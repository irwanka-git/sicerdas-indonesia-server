// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalGayaBelajar(db *gorm.DB, opts ...gen.DOOption) soalGayaBelajar {
	_soalGayaBelajar := soalGayaBelajar{}

	_soalGayaBelajar.soalGayaBelajarDo.UseDB(db, opts...)
	_soalGayaBelajar.soalGayaBelajarDo.UseModel(&entity.SoalGayaBelajar{})

	tableName := _soalGayaBelajar.soalGayaBelajarDo.TableName()
	_soalGayaBelajar.ALL = field.NewAsterisk(tableName)
	_soalGayaBelajar.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalGayaBelajar.Urutan = field.NewInt32(tableName, "urutan")
	_soalGayaBelajar.Pernyataan = field.NewString(tableName, "pernyataan")
	_soalGayaBelajar.UUID = field.NewString(tableName, "uuid")
	_soalGayaBelajar.PilihanA = field.NewString(tableName, "pilihan_a")
	_soalGayaBelajar.PilihanB = field.NewString(tableName, "pilihan_b")
	_soalGayaBelajar.PilihanC = field.NewString(tableName, "pilihan_c")

	_soalGayaBelajar.fillFieldMap()

	return _soalGayaBelajar
}

type soalGayaBelajar struct {
	soalGayaBelajarDo soalGayaBelajarDo

	ALL        field.Asterisk
	IDSoal     field.Int32
	Urutan     field.Int32
	Pernyataan field.String
	UUID       field.String
	PilihanA   field.String
	PilihanB   field.String
	PilihanC   field.String

	fieldMap map[string]field.Expr
}

func (s soalGayaBelajar) Table(newTableName string) *soalGayaBelajar {
	s.soalGayaBelajarDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalGayaBelajar) As(alias string) *soalGayaBelajar {
	s.soalGayaBelajarDo.DO = *(s.soalGayaBelajarDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalGayaBelajar) updateTableName(table string) *soalGayaBelajar {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.Urutan = field.NewInt32(table, "urutan")
	s.Pernyataan = field.NewString(table, "pernyataan")
	s.UUID = field.NewString(table, "uuid")
	s.PilihanA = field.NewString(table, "pilihan_a")
	s.PilihanB = field.NewString(table, "pilihan_b")
	s.PilihanC = field.NewString(table, "pilihan_c")

	s.fillFieldMap()

	return s
}

func (s *soalGayaBelajar) WithContext(ctx context.Context) *soalGayaBelajarDo {
	return s.soalGayaBelajarDo.WithContext(ctx)
}

func (s soalGayaBelajar) TableName() string { return s.soalGayaBelajarDo.TableName() }

func (s soalGayaBelajar) Alias() string { return s.soalGayaBelajarDo.Alias() }

func (s soalGayaBelajar) Columns(cols ...field.Expr) gen.Columns {
	return s.soalGayaBelajarDo.Columns(cols...)
}

func (s *soalGayaBelajar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalGayaBelajar) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["pernyataan"] = s.Pernyataan
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["pilihan_a"] = s.PilihanA
	s.fieldMap["pilihan_b"] = s.PilihanB
	s.fieldMap["pilihan_c"] = s.PilihanC
}

func (s soalGayaBelajar) clone(db *gorm.DB) soalGayaBelajar {
	s.soalGayaBelajarDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalGayaBelajar) replaceDB(db *gorm.DB) soalGayaBelajar {
	s.soalGayaBelajarDo.ReplaceDB(db)
	return s
}

type soalGayaBelajarDo struct{ gen.DO }

func (s soalGayaBelajarDo) Debug() *soalGayaBelajarDo {
	return s.withDO(s.DO.Debug())
}

func (s soalGayaBelajarDo) WithContext(ctx context.Context) *soalGayaBelajarDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalGayaBelajarDo) ReadDB() *soalGayaBelajarDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalGayaBelajarDo) WriteDB() *soalGayaBelajarDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalGayaBelajarDo) Session(config *gorm.Session) *soalGayaBelajarDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalGayaBelajarDo) Clauses(conds ...clause.Expression) *soalGayaBelajarDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalGayaBelajarDo) Returning(value interface{}, columns ...string) *soalGayaBelajarDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalGayaBelajarDo) Not(conds ...gen.Condition) *soalGayaBelajarDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalGayaBelajarDo) Or(conds ...gen.Condition) *soalGayaBelajarDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalGayaBelajarDo) Select(conds ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalGayaBelajarDo) Where(conds ...gen.Condition) *soalGayaBelajarDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalGayaBelajarDo) Order(conds ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalGayaBelajarDo) Distinct(cols ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalGayaBelajarDo) Omit(cols ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalGayaBelajarDo) Join(table schema.Tabler, on ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalGayaBelajarDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalGayaBelajarDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalGayaBelajarDo) Group(cols ...field.Expr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalGayaBelajarDo) Having(conds ...gen.Condition) *soalGayaBelajarDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalGayaBelajarDo) Limit(limit int) *soalGayaBelajarDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalGayaBelajarDo) Offset(offset int) *soalGayaBelajarDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalGayaBelajarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalGayaBelajarDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalGayaBelajarDo) Unscoped() *soalGayaBelajarDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalGayaBelajarDo) Create(values ...*entity.SoalGayaBelajar) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalGayaBelajarDo) CreateInBatches(values []*entity.SoalGayaBelajar, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalGayaBelajarDo) Save(values ...*entity.SoalGayaBelajar) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalGayaBelajarDo) First() (*entity.SoalGayaBelajar, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaBelajar), nil
	}
}

func (s soalGayaBelajarDo) Take() (*entity.SoalGayaBelajar, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaBelajar), nil
	}
}

func (s soalGayaBelajarDo) Last() (*entity.SoalGayaBelajar, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaBelajar), nil
	}
}

func (s soalGayaBelajarDo) Find() ([]*entity.SoalGayaBelajar, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalGayaBelajar), err
}

func (s soalGayaBelajarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalGayaBelajar, err error) {
	buf := make([]*entity.SoalGayaBelajar, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalGayaBelajarDo) FindInBatches(result *[]*entity.SoalGayaBelajar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalGayaBelajarDo) Attrs(attrs ...field.AssignExpr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalGayaBelajarDo) Assign(attrs ...field.AssignExpr) *soalGayaBelajarDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalGayaBelajarDo) Joins(fields ...field.RelationField) *soalGayaBelajarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalGayaBelajarDo) Preload(fields ...field.RelationField) *soalGayaBelajarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalGayaBelajarDo) FirstOrInit() (*entity.SoalGayaBelajar, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaBelajar), nil
	}
}

func (s soalGayaBelajarDo) FirstOrCreate() (*entity.SoalGayaBelajar, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaBelajar), nil
	}
}

func (s soalGayaBelajarDo) FindByPage(offset int, limit int) (result []*entity.SoalGayaBelajar, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalGayaBelajarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalGayaBelajarDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalGayaBelajarDo) Delete(models ...*entity.SoalGayaBelajar) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalGayaBelajarDo) withDO(do gen.Dao) *soalGayaBelajarDo {
	s.DO = *do.(*gen.DO)
	return s
}
