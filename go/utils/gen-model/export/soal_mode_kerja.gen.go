// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalModeKerja(db *gorm.DB, opts ...gen.DOOption) soalModeKerja {
	_soalModeKerja := soalModeKerja{}

	_soalModeKerja.soalModeKerjaDo.UseDB(db, opts...)
	_soalModeKerja.soalModeKerjaDo.UseModel(&entity.SoalModeKerja{})

	tableName := _soalModeKerja.soalModeKerjaDo.TableName()
	_soalModeKerja.ALL = field.NewAsterisk(tableName)
	_soalModeKerja.Urutan = field.NewInt16(tableName, "urutan")
	_soalModeKerja.Soal = field.NewString(tableName, "soal")
	_soalModeKerja.Deskripsi = field.NewString(tableName, "deskripsi")
	_soalModeKerja.UUID = field.NewString(tableName, "uuid")
	_soalModeKerja.PilihanA = field.NewString(tableName, "pilihan_a")
	_soalModeKerja.PilihanB = field.NewString(tableName, "pilihan_b")
	_soalModeKerja.PilihanC = field.NewString(tableName, "pilihan_c")
	_soalModeKerja.PilihanD = field.NewString(tableName, "pilihan_d")
	_soalModeKerja.PilihanE = field.NewString(tableName, "pilihan_e")
	_soalModeKerja.ModeKerja = field.NewString(tableName, "mode_kerja")
	_soalModeKerja.Kelompok = field.NewString(tableName, "kelompok")

	_soalModeKerja.fillFieldMap()

	return _soalModeKerja
}

type soalModeKerja struct {
	soalModeKerjaDo soalModeKerjaDo

	ALL       field.Asterisk
	Urutan    field.Int16
	Soal      field.String
	Deskripsi field.String
	UUID      field.String
	PilihanA  field.String
	PilihanB  field.String
	PilihanC  field.String
	PilihanD  field.String
	PilihanE  field.String
	ModeKerja field.String
	Kelompok  field.String

	fieldMap map[string]field.Expr
}

func (s soalModeKerja) Table(newTableName string) *soalModeKerja {
	s.soalModeKerjaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalModeKerja) As(alias string) *soalModeKerja {
	s.soalModeKerjaDo.DO = *(s.soalModeKerjaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalModeKerja) updateTableName(table string) *soalModeKerja {
	s.ALL = field.NewAsterisk(table)
	s.Urutan = field.NewInt16(table, "urutan")
	s.Soal = field.NewString(table, "soal")
	s.Deskripsi = field.NewString(table, "deskripsi")
	s.UUID = field.NewString(table, "uuid")
	s.PilihanA = field.NewString(table, "pilihan_a")
	s.PilihanB = field.NewString(table, "pilihan_b")
	s.PilihanC = field.NewString(table, "pilihan_c")
	s.PilihanD = field.NewString(table, "pilihan_d")
	s.PilihanE = field.NewString(table, "pilihan_e")
	s.ModeKerja = field.NewString(table, "mode_kerja")
	s.Kelompok = field.NewString(table, "kelompok")

	s.fillFieldMap()

	return s
}

func (s *soalModeKerja) WithContext(ctx context.Context) *soalModeKerjaDo {
	return s.soalModeKerjaDo.WithContext(ctx)
}

func (s soalModeKerja) TableName() string { return s.soalModeKerjaDo.TableName() }

func (s soalModeKerja) Alias() string { return s.soalModeKerjaDo.Alias() }

func (s soalModeKerja) Columns(cols ...field.Expr) gen.Columns {
	return s.soalModeKerjaDo.Columns(cols...)
}

func (s *soalModeKerja) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalModeKerja) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["soal"] = s.Soal
	s.fieldMap["deskripsi"] = s.Deskripsi
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["pilihan_a"] = s.PilihanA
	s.fieldMap["pilihan_b"] = s.PilihanB
	s.fieldMap["pilihan_c"] = s.PilihanC
	s.fieldMap["pilihan_d"] = s.PilihanD
	s.fieldMap["pilihan_e"] = s.PilihanE
	s.fieldMap["mode_kerja"] = s.ModeKerja
	s.fieldMap["kelompok"] = s.Kelompok
}

func (s soalModeKerja) clone(db *gorm.DB) soalModeKerja {
	s.soalModeKerjaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalModeKerja) replaceDB(db *gorm.DB) soalModeKerja {
	s.soalModeKerjaDo.ReplaceDB(db)
	return s
}

type soalModeKerjaDo struct{ gen.DO }

func (s soalModeKerjaDo) Debug() *soalModeKerjaDo {
	return s.withDO(s.DO.Debug())
}

func (s soalModeKerjaDo) WithContext(ctx context.Context) *soalModeKerjaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalModeKerjaDo) ReadDB() *soalModeKerjaDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalModeKerjaDo) WriteDB() *soalModeKerjaDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalModeKerjaDo) Session(config *gorm.Session) *soalModeKerjaDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalModeKerjaDo) Clauses(conds ...clause.Expression) *soalModeKerjaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalModeKerjaDo) Returning(value interface{}, columns ...string) *soalModeKerjaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalModeKerjaDo) Not(conds ...gen.Condition) *soalModeKerjaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalModeKerjaDo) Or(conds ...gen.Condition) *soalModeKerjaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalModeKerjaDo) Select(conds ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalModeKerjaDo) Where(conds ...gen.Condition) *soalModeKerjaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalModeKerjaDo) Order(conds ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalModeKerjaDo) Distinct(cols ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalModeKerjaDo) Omit(cols ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalModeKerjaDo) Join(table schema.Tabler, on ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalModeKerjaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalModeKerjaDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalModeKerjaDo) Group(cols ...field.Expr) *soalModeKerjaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalModeKerjaDo) Having(conds ...gen.Condition) *soalModeKerjaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalModeKerjaDo) Limit(limit int) *soalModeKerjaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalModeKerjaDo) Offset(offset int) *soalModeKerjaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalModeKerjaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalModeKerjaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalModeKerjaDo) Unscoped() *soalModeKerjaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalModeKerjaDo) Create(values ...*entity.SoalModeKerja) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalModeKerjaDo) CreateInBatches(values []*entity.SoalModeKerja, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalModeKerjaDo) Save(values ...*entity.SoalModeKerja) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalModeKerjaDo) First() (*entity.SoalModeKerja, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalModeKerja), nil
	}
}

func (s soalModeKerjaDo) Take() (*entity.SoalModeKerja, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalModeKerja), nil
	}
}

func (s soalModeKerjaDo) Last() (*entity.SoalModeKerja, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalModeKerja), nil
	}
}

func (s soalModeKerjaDo) Find() ([]*entity.SoalModeKerja, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalModeKerja), err
}

func (s soalModeKerjaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalModeKerja, err error) {
	buf := make([]*entity.SoalModeKerja, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalModeKerjaDo) FindInBatches(result *[]*entity.SoalModeKerja, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalModeKerjaDo) Attrs(attrs ...field.AssignExpr) *soalModeKerjaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalModeKerjaDo) Assign(attrs ...field.AssignExpr) *soalModeKerjaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalModeKerjaDo) Joins(fields ...field.RelationField) *soalModeKerjaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalModeKerjaDo) Preload(fields ...field.RelationField) *soalModeKerjaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalModeKerjaDo) FirstOrInit() (*entity.SoalModeKerja, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalModeKerja), nil
	}
}

func (s soalModeKerjaDo) FirstOrCreate() (*entity.SoalModeKerja, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalModeKerja), nil
	}
}

func (s soalModeKerjaDo) FindByPage(offset int, limit int) (result []*entity.SoalModeKerja, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalModeKerjaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalModeKerjaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalModeKerjaDo) Delete(models ...*entity.SoalModeKerja) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalModeKerjaDo) withDO(do gen.Dao) *soalModeKerjaDo {
	s.DO = *do.(*gen.DO)
	return s
}
