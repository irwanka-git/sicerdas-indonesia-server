// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorDisc(db *gorm.DB, opts ...gen.DOOption) skorDisc {
	_skorDisc := skorDisc{}

	_skorDisc.skorDiscDo.UseDB(db, opts...)
	_skorDisc.skorDiscDo.UseModel(&entity.SkorDisc{})

	tableName := _skorDisc.skorDiscDo.TableName()
	_skorDisc.ALL = field.NewAsterisk(tableName)
	_skorDisc.IDUser = field.NewInt32(tableName, "id_user")
	_skorDisc.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorDisc.SkorD = field.NewInt32(tableName, "skor_d")
	_skorDisc.SkorI = field.NewInt32(tableName, "skor_i")
	_skorDisc.SkorS = field.NewInt32(tableName, "skor_s")
	_skorDisc.SkorC = field.NewInt32(tableName, "skor_c")
	_skorDisc.KlasifikasiD = field.NewString(tableName, "klasifikasi_d")
	_skorDisc.KlasifikasiS = field.NewString(tableName, "klasifikasi_s")
	_skorDisc.KlasifikasiI = field.NewString(tableName, "klasifikasi_i")
	_skorDisc.KlasifikasiC = field.NewString(tableName, "klasifikasi_c")

	_skorDisc.fillFieldMap()

	return _skorDisc
}

type skorDisc struct {
	skorDiscDo skorDiscDo

	ALL          field.Asterisk
	IDUser       field.Int32
	IDQuiz       field.Int32
	SkorD        field.Int32
	SkorI        field.Int32
	SkorS        field.Int32
	SkorC        field.Int32
	KlasifikasiD field.String
	KlasifikasiS field.String
	KlasifikasiI field.String
	KlasifikasiC field.String

	fieldMap map[string]field.Expr
}

func (s skorDisc) Table(newTableName string) *skorDisc {
	s.skorDiscDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorDisc) As(alias string) *skorDisc {
	s.skorDiscDo.DO = *(s.skorDiscDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorDisc) updateTableName(table string) *skorDisc {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.SkorD = field.NewInt32(table, "skor_d")
	s.SkorI = field.NewInt32(table, "skor_i")
	s.SkorS = field.NewInt32(table, "skor_s")
	s.SkorC = field.NewInt32(table, "skor_c")
	s.KlasifikasiD = field.NewString(table, "klasifikasi_d")
	s.KlasifikasiS = field.NewString(table, "klasifikasi_s")
	s.KlasifikasiI = field.NewString(table, "klasifikasi_i")
	s.KlasifikasiC = field.NewString(table, "klasifikasi_c")

	s.fillFieldMap()

	return s
}

func (s *skorDisc) WithContext(ctx context.Context) *skorDiscDo { return s.skorDiscDo.WithContext(ctx) }

func (s skorDisc) TableName() string { return s.skorDiscDo.TableName() }

func (s skorDisc) Alias() string { return s.skorDiscDo.Alias() }

func (s skorDisc) Columns(cols ...field.Expr) gen.Columns { return s.skorDiscDo.Columns(cols...) }

func (s *skorDisc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorDisc) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["skor_d"] = s.SkorD
	s.fieldMap["skor_i"] = s.SkorI
	s.fieldMap["skor_s"] = s.SkorS
	s.fieldMap["skor_c"] = s.SkorC
	s.fieldMap["klasifikasi_d"] = s.KlasifikasiD
	s.fieldMap["klasifikasi_s"] = s.KlasifikasiS
	s.fieldMap["klasifikasi_i"] = s.KlasifikasiI
	s.fieldMap["klasifikasi_c"] = s.KlasifikasiC
}

func (s skorDisc) clone(db *gorm.DB) skorDisc {
	s.skorDiscDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorDisc) replaceDB(db *gorm.DB) skorDisc {
	s.skorDiscDo.ReplaceDB(db)
	return s
}

type skorDiscDo struct{ gen.DO }

func (s skorDiscDo) Debug() *skorDiscDo {
	return s.withDO(s.DO.Debug())
}

func (s skorDiscDo) WithContext(ctx context.Context) *skorDiscDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorDiscDo) ReadDB() *skorDiscDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorDiscDo) WriteDB() *skorDiscDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorDiscDo) Session(config *gorm.Session) *skorDiscDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorDiscDo) Clauses(conds ...clause.Expression) *skorDiscDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorDiscDo) Returning(value interface{}, columns ...string) *skorDiscDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorDiscDo) Not(conds ...gen.Condition) *skorDiscDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorDiscDo) Or(conds ...gen.Condition) *skorDiscDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorDiscDo) Select(conds ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorDiscDo) Where(conds ...gen.Condition) *skorDiscDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorDiscDo) Order(conds ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorDiscDo) Distinct(cols ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorDiscDo) Omit(cols ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorDiscDo) Join(table schema.Tabler, on ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorDiscDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorDiscDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorDiscDo) Group(cols ...field.Expr) *skorDiscDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorDiscDo) Having(conds ...gen.Condition) *skorDiscDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorDiscDo) Limit(limit int) *skorDiscDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorDiscDo) Offset(offset int) *skorDiscDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorDiscDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorDiscDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorDiscDo) Unscoped() *skorDiscDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorDiscDo) Create(values ...*entity.SkorDisc) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorDiscDo) CreateInBatches(values []*entity.SkorDisc, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorDiscDo) Save(values ...*entity.SkorDisc) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorDiscDo) First() (*entity.SkorDisc, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorDisc), nil
	}
}

func (s skorDiscDo) Take() (*entity.SkorDisc, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorDisc), nil
	}
}

func (s skorDiscDo) Last() (*entity.SkorDisc, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorDisc), nil
	}
}

func (s skorDiscDo) Find() ([]*entity.SkorDisc, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorDisc), err
}

func (s skorDiscDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorDisc, err error) {
	buf := make([]*entity.SkorDisc, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorDiscDo) FindInBatches(result *[]*entity.SkorDisc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorDiscDo) Attrs(attrs ...field.AssignExpr) *skorDiscDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorDiscDo) Assign(attrs ...field.AssignExpr) *skorDiscDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorDiscDo) Joins(fields ...field.RelationField) *skorDiscDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorDiscDo) Preload(fields ...field.RelationField) *skorDiscDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorDiscDo) FirstOrInit() (*entity.SkorDisc, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorDisc), nil
	}
}

func (s skorDiscDo) FirstOrCreate() (*entity.SkorDisc, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorDisc), nil
	}
}

func (s skorDiscDo) FindByPage(offset int, limit int) (result []*entity.SkorDisc, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorDiscDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorDiscDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorDiscDo) Delete(models ...*entity.SkorDisc) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorDiscDo) withDO(do gen.Dao) *skorDiscDo {
	s.DO = *do.(*gen.DO)
	return s
}
