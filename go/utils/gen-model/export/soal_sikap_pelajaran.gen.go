// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalSikapPelajaran(db *gorm.DB, opts ...gen.DOOption) soalSikapPelajaran {
	_soalSikapPelajaran := soalSikapPelajaran{}

	_soalSikapPelajaran.soalSikapPelajaranDo.UseDB(db, opts...)
	_soalSikapPelajaran.soalSikapPelajaranDo.UseModel(&entity.SoalSikapPelajaran{})

	tableName := _soalSikapPelajaran.soalSikapPelajaranDo.TableName()
	_soalSikapPelajaran.ALL = field.NewAsterisk(tableName)
	_soalSikapPelajaran.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalSikapPelajaran.Urutan = field.NewInt32(tableName, "urutan")
	_soalSikapPelajaran.Pelajaran = field.NewString(tableName, "pelajaran")
	_soalSikapPelajaran.Kode = field.NewString(tableName, "kode")
	_soalSikapPelajaran.SikapNegatif1 = field.NewString(tableName, "sikap_negatif1")
	_soalSikapPelajaran.SikapPositif1 = field.NewString(tableName, "sikap_positif1")
	_soalSikapPelajaran.SikapNegatif2 = field.NewString(tableName, "sikap_negatif2")
	_soalSikapPelajaran.SikapPositif2 = field.NewString(tableName, "sikap_positif2")
	_soalSikapPelajaran.SikapNegatif3 = field.NewString(tableName, "sikap_negatif3")
	_soalSikapPelajaran.SikapPositif3 = field.NewString(tableName, "sikap_positif3")
	_soalSikapPelajaran.Kelompok = field.NewString(tableName, "kelompok")
	_soalSikapPelajaran.FieldSkoring = field.NewString(tableName, "field_skoring")
	_soalSikapPelajaran.UUID = field.NewString(tableName, "uuid")

	_soalSikapPelajaran.fillFieldMap()

	return _soalSikapPelajaran
}

type soalSikapPelajaran struct {
	soalSikapPelajaranDo soalSikapPelajaranDo

	ALL           field.Asterisk
	IDSoal        field.Int32
	Urutan        field.Int32
	Pelajaran     field.String
	Kode          field.String
	SikapNegatif1 field.String
	SikapPositif1 field.String
	SikapNegatif2 field.String
	SikapPositif2 field.String
	SikapNegatif3 field.String
	SikapPositif3 field.String
	Kelompok      field.String
	FieldSkoring  field.String
	UUID          field.String

	fieldMap map[string]field.Expr
}

func (s soalSikapPelajaran) Table(newTableName string) *soalSikapPelajaran {
	s.soalSikapPelajaranDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalSikapPelajaran) As(alias string) *soalSikapPelajaran {
	s.soalSikapPelajaranDo.DO = *(s.soalSikapPelajaranDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalSikapPelajaran) updateTableName(table string) *soalSikapPelajaran {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.Urutan = field.NewInt32(table, "urutan")
	s.Pelajaran = field.NewString(table, "pelajaran")
	s.Kode = field.NewString(table, "kode")
	s.SikapNegatif1 = field.NewString(table, "sikap_negatif1")
	s.SikapPositif1 = field.NewString(table, "sikap_positif1")
	s.SikapNegatif2 = field.NewString(table, "sikap_negatif2")
	s.SikapPositif2 = field.NewString(table, "sikap_positif2")
	s.SikapNegatif3 = field.NewString(table, "sikap_negatif3")
	s.SikapPositif3 = field.NewString(table, "sikap_positif3")
	s.Kelompok = field.NewString(table, "kelompok")
	s.FieldSkoring = field.NewString(table, "field_skoring")
	s.UUID = field.NewString(table, "uuid")

	s.fillFieldMap()

	return s
}

func (s *soalSikapPelajaran) WithContext(ctx context.Context) *soalSikapPelajaranDo {
	return s.soalSikapPelajaranDo.WithContext(ctx)
}

func (s soalSikapPelajaran) TableName() string { return s.soalSikapPelajaranDo.TableName() }

func (s soalSikapPelajaran) Alias() string { return s.soalSikapPelajaranDo.Alias() }

func (s soalSikapPelajaran) Columns(cols ...field.Expr) gen.Columns {
	return s.soalSikapPelajaranDo.Columns(cols...)
}

func (s *soalSikapPelajaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalSikapPelajaran) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["pelajaran"] = s.Pelajaran
	s.fieldMap["kode"] = s.Kode
	s.fieldMap["sikap_negatif1"] = s.SikapNegatif1
	s.fieldMap["sikap_positif1"] = s.SikapPositif1
	s.fieldMap["sikap_negatif2"] = s.SikapNegatif2
	s.fieldMap["sikap_positif2"] = s.SikapPositif2
	s.fieldMap["sikap_negatif3"] = s.SikapNegatif3
	s.fieldMap["sikap_positif3"] = s.SikapPositif3
	s.fieldMap["kelompok"] = s.Kelompok
	s.fieldMap["field_skoring"] = s.FieldSkoring
	s.fieldMap["uuid"] = s.UUID
}

func (s soalSikapPelajaran) clone(db *gorm.DB) soalSikapPelajaran {
	s.soalSikapPelajaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalSikapPelajaran) replaceDB(db *gorm.DB) soalSikapPelajaran {
	s.soalSikapPelajaranDo.ReplaceDB(db)
	return s
}

type soalSikapPelajaranDo struct{ gen.DO }

func (s soalSikapPelajaranDo) Debug() *soalSikapPelajaranDo {
	return s.withDO(s.DO.Debug())
}

func (s soalSikapPelajaranDo) WithContext(ctx context.Context) *soalSikapPelajaranDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalSikapPelajaranDo) ReadDB() *soalSikapPelajaranDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalSikapPelajaranDo) WriteDB() *soalSikapPelajaranDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalSikapPelajaranDo) Session(config *gorm.Session) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalSikapPelajaranDo) Clauses(conds ...clause.Expression) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalSikapPelajaranDo) Returning(value interface{}, columns ...string) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalSikapPelajaranDo) Not(conds ...gen.Condition) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalSikapPelajaranDo) Or(conds ...gen.Condition) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalSikapPelajaranDo) Select(conds ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalSikapPelajaranDo) Where(conds ...gen.Condition) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalSikapPelajaranDo) Order(conds ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalSikapPelajaranDo) Distinct(cols ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalSikapPelajaranDo) Omit(cols ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalSikapPelajaranDo) Join(table schema.Tabler, on ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalSikapPelajaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalSikapPelajaranDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalSikapPelajaranDo) Group(cols ...field.Expr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalSikapPelajaranDo) Having(conds ...gen.Condition) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalSikapPelajaranDo) Limit(limit int) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalSikapPelajaranDo) Offset(offset int) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalSikapPelajaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalSikapPelajaranDo) Unscoped() *soalSikapPelajaranDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalSikapPelajaranDo) Create(values ...*entity.SoalSikapPelajaran) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalSikapPelajaranDo) CreateInBatches(values []*entity.SoalSikapPelajaran, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalSikapPelajaranDo) Save(values ...*entity.SoalSikapPelajaran) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalSikapPelajaranDo) First() (*entity.SoalSikapPelajaran, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSikapPelajaran), nil
	}
}

func (s soalSikapPelajaranDo) Take() (*entity.SoalSikapPelajaran, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSikapPelajaran), nil
	}
}

func (s soalSikapPelajaranDo) Last() (*entity.SoalSikapPelajaran, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSikapPelajaran), nil
	}
}

func (s soalSikapPelajaranDo) Find() ([]*entity.SoalSikapPelajaran, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalSikapPelajaran), err
}

func (s soalSikapPelajaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalSikapPelajaran, err error) {
	buf := make([]*entity.SoalSikapPelajaran, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalSikapPelajaranDo) FindInBatches(result *[]*entity.SoalSikapPelajaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalSikapPelajaranDo) Attrs(attrs ...field.AssignExpr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalSikapPelajaranDo) Assign(attrs ...field.AssignExpr) *soalSikapPelajaranDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalSikapPelajaranDo) Joins(fields ...field.RelationField) *soalSikapPelajaranDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalSikapPelajaranDo) Preload(fields ...field.RelationField) *soalSikapPelajaranDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalSikapPelajaranDo) FirstOrInit() (*entity.SoalSikapPelajaran, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSikapPelajaran), nil
	}
}

func (s soalSikapPelajaranDo) FirstOrCreate() (*entity.SoalSikapPelajaran, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSikapPelajaran), nil
	}
}

func (s soalSikapPelajaranDo) FindByPage(offset int, limit int) (result []*entity.SoalSikapPelajaran, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalSikapPelajaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalSikapPelajaranDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalSikapPelajaranDo) Delete(models ...*entity.SoalSikapPelajaran) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalSikapPelajaranDo) withDO(do gen.Dao) *soalSikapPelajaranDo {
	s.DO = *do.(*gen.DO)
	return s
}
