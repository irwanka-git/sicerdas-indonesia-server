// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalKraeplin(db *gorm.DB, opts ...gen.DOOption) soalKraeplin {
	_soalKraeplin := soalKraeplin{}

	_soalKraeplin.soalKraeplinDo.UseDB(db, opts...)
	_soalKraeplin.soalKraeplinDo.UseModel(&entity.SoalKraeplin{})

	tableName := _soalKraeplin.soalKraeplinDo.TableName()
	_soalKraeplin.ALL = field.NewAsterisk(tableName)
	_soalKraeplin.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalKraeplin.Urutan = field.NewInt32(tableName, "urutan")
	_soalKraeplin.IDPetunjuk = field.NewInt32(tableName, "id_petunjuk")
	_soalKraeplin.Pertanyaan = field.NewString(tableName, "pertanyaan")
	_soalKraeplin.PilihanJawaban = field.NewString(tableName, "pilihan_jawaban")
	_soalKraeplin.UUID = field.NewString(tableName, "uuid")

	_soalKraeplin.fillFieldMap()

	return _soalKraeplin
}

type soalKraeplin struct {
	soalKraeplinDo soalKraeplinDo

	ALL            field.Asterisk
	IDSoal         field.Int32
	Urutan         field.Int32
	IDPetunjuk     field.Int32
	Pertanyaan     field.String
	PilihanJawaban field.String
	UUID           field.String

	fieldMap map[string]field.Expr
}

func (s soalKraeplin) Table(newTableName string) *soalKraeplin {
	s.soalKraeplinDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalKraeplin) As(alias string) *soalKraeplin {
	s.soalKraeplinDo.DO = *(s.soalKraeplinDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalKraeplin) updateTableName(table string) *soalKraeplin {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.Urutan = field.NewInt32(table, "urutan")
	s.IDPetunjuk = field.NewInt32(table, "id_petunjuk")
	s.Pertanyaan = field.NewString(table, "pertanyaan")
	s.PilihanJawaban = field.NewString(table, "pilihan_jawaban")
	s.UUID = field.NewString(table, "uuid")

	s.fillFieldMap()

	return s
}

func (s *soalKraeplin) WithContext(ctx context.Context) *soalKraeplinDo {
	return s.soalKraeplinDo.WithContext(ctx)
}

func (s soalKraeplin) TableName() string { return s.soalKraeplinDo.TableName() }

func (s soalKraeplin) Alias() string { return s.soalKraeplinDo.Alias() }

func (s soalKraeplin) Columns(cols ...field.Expr) gen.Columns {
	return s.soalKraeplinDo.Columns(cols...)
}

func (s *soalKraeplin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalKraeplin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["id_petunjuk"] = s.IDPetunjuk
	s.fieldMap["pertanyaan"] = s.Pertanyaan
	s.fieldMap["pilihan_jawaban"] = s.PilihanJawaban
	s.fieldMap["uuid"] = s.UUID
}

func (s soalKraeplin) clone(db *gorm.DB) soalKraeplin {
	s.soalKraeplinDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalKraeplin) replaceDB(db *gorm.DB) soalKraeplin {
	s.soalKraeplinDo.ReplaceDB(db)
	return s
}

type soalKraeplinDo struct{ gen.DO }

func (s soalKraeplinDo) Debug() *soalKraeplinDo {
	return s.withDO(s.DO.Debug())
}

func (s soalKraeplinDo) WithContext(ctx context.Context) *soalKraeplinDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalKraeplinDo) ReadDB() *soalKraeplinDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalKraeplinDo) WriteDB() *soalKraeplinDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalKraeplinDo) Session(config *gorm.Session) *soalKraeplinDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalKraeplinDo) Clauses(conds ...clause.Expression) *soalKraeplinDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalKraeplinDo) Returning(value interface{}, columns ...string) *soalKraeplinDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalKraeplinDo) Not(conds ...gen.Condition) *soalKraeplinDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalKraeplinDo) Or(conds ...gen.Condition) *soalKraeplinDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalKraeplinDo) Select(conds ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalKraeplinDo) Where(conds ...gen.Condition) *soalKraeplinDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalKraeplinDo) Order(conds ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalKraeplinDo) Distinct(cols ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalKraeplinDo) Omit(cols ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalKraeplinDo) Join(table schema.Tabler, on ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalKraeplinDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalKraeplinDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalKraeplinDo) Group(cols ...field.Expr) *soalKraeplinDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalKraeplinDo) Having(conds ...gen.Condition) *soalKraeplinDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalKraeplinDo) Limit(limit int) *soalKraeplinDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalKraeplinDo) Offset(offset int) *soalKraeplinDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalKraeplinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalKraeplinDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalKraeplinDo) Unscoped() *soalKraeplinDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalKraeplinDo) Create(values ...*entity.SoalKraeplin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalKraeplinDo) CreateInBatches(values []*entity.SoalKraeplin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalKraeplinDo) Save(values ...*entity.SoalKraeplin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalKraeplinDo) First() (*entity.SoalKraeplin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKraeplin), nil
	}
}

func (s soalKraeplinDo) Take() (*entity.SoalKraeplin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKraeplin), nil
	}
}

func (s soalKraeplinDo) Last() (*entity.SoalKraeplin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKraeplin), nil
	}
}

func (s soalKraeplinDo) Find() ([]*entity.SoalKraeplin, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalKraeplin), err
}

func (s soalKraeplinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalKraeplin, err error) {
	buf := make([]*entity.SoalKraeplin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalKraeplinDo) FindInBatches(result *[]*entity.SoalKraeplin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalKraeplinDo) Attrs(attrs ...field.AssignExpr) *soalKraeplinDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalKraeplinDo) Assign(attrs ...field.AssignExpr) *soalKraeplinDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalKraeplinDo) Joins(fields ...field.RelationField) *soalKraeplinDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalKraeplinDo) Preload(fields ...field.RelationField) *soalKraeplinDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalKraeplinDo) FirstOrInit() (*entity.SoalKraeplin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKraeplin), nil
	}
}

func (s soalKraeplinDo) FirstOrCreate() (*entity.SoalKraeplin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKraeplin), nil
	}
}

func (s soalKraeplinDo) FindByPage(offset int, limit int) (result []*entity.SoalKraeplin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalKraeplinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalKraeplinDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalKraeplinDo) Delete(models ...*entity.SoalKraeplin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalKraeplinDo) withDO(do gen.Dao) *soalKraeplinDo {
	s.DO = *do.(*gen.DO)
	return s
}
