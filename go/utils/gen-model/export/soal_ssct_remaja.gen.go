// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalSsctRemaja(db *gorm.DB, opts ...gen.DOOption) soalSsctRemaja {
	_soalSsctRemaja := soalSsctRemaja{}

	_soalSsctRemaja.soalSsctRemajaDo.UseDB(db, opts...)
	_soalSsctRemaja.soalSsctRemajaDo.UseModel(&entity.SoalSsctRemaja{})

	tableName := _soalSsctRemaja.soalSsctRemajaDo.TableName()
	_soalSsctRemaja.ALL = field.NewAsterisk(tableName)
	_soalSsctRemaja.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalSsctRemaja.Urutan = field.NewInt32(tableName, "urutan")
	_soalSsctRemaja.SubjekPenilaian = field.NewString(tableName, "subjek_penilaian")
	_soalSsctRemaja.SikapNegatif1 = field.NewString(tableName, "sikap_negatif1")
	_soalSsctRemaja.SikapPositif1 = field.NewString(tableName, "sikap_positif1")
	_soalSsctRemaja.SikapNegatif2 = field.NewString(tableName, "sikap_negatif2")
	_soalSsctRemaja.SikapPositif2 = field.NewString(tableName, "sikap_positif2")
	_soalSsctRemaja.SikapNegatif3 = field.NewString(tableName, "sikap_negatif3")
	_soalSsctRemaja.SikapPositif3 = field.NewString(tableName, "sikap_positif3")
	_soalSsctRemaja.Aspek = field.NewString(tableName, "aspek")
	_soalSsctRemaja.UUID = field.NewString(tableName, "uuid")
	_soalSsctRemaja.Komponen = field.NewString(tableName, "komponen")

	_soalSsctRemaja.fillFieldMap()

	return _soalSsctRemaja
}

type soalSsctRemaja struct {
	soalSsctRemajaDo soalSsctRemajaDo

	ALL             field.Asterisk
	IDSoal          field.Int32
	Urutan          field.Int32
	SubjekPenilaian field.String
	SikapNegatif1   field.String
	SikapPositif1   field.String
	SikapNegatif2   field.String
	SikapPositif2   field.String
	SikapNegatif3   field.String
	SikapPositif3   field.String
	Aspek           field.String
	UUID            field.String
	Komponen        field.String

	fieldMap map[string]field.Expr
}

func (s soalSsctRemaja) Table(newTableName string) *soalSsctRemaja {
	s.soalSsctRemajaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalSsctRemaja) As(alias string) *soalSsctRemaja {
	s.soalSsctRemajaDo.DO = *(s.soalSsctRemajaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalSsctRemaja) updateTableName(table string) *soalSsctRemaja {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.Urutan = field.NewInt32(table, "urutan")
	s.SubjekPenilaian = field.NewString(table, "subjek_penilaian")
	s.SikapNegatif1 = field.NewString(table, "sikap_negatif1")
	s.SikapPositif1 = field.NewString(table, "sikap_positif1")
	s.SikapNegatif2 = field.NewString(table, "sikap_negatif2")
	s.SikapPositif2 = field.NewString(table, "sikap_positif2")
	s.SikapNegatif3 = field.NewString(table, "sikap_negatif3")
	s.SikapPositif3 = field.NewString(table, "sikap_positif3")
	s.Aspek = field.NewString(table, "aspek")
	s.UUID = field.NewString(table, "uuid")
	s.Komponen = field.NewString(table, "komponen")

	s.fillFieldMap()

	return s
}

func (s *soalSsctRemaja) WithContext(ctx context.Context) *soalSsctRemajaDo {
	return s.soalSsctRemajaDo.WithContext(ctx)
}

func (s soalSsctRemaja) TableName() string { return s.soalSsctRemajaDo.TableName() }

func (s soalSsctRemaja) Alias() string { return s.soalSsctRemajaDo.Alias() }

func (s soalSsctRemaja) Columns(cols ...field.Expr) gen.Columns {
	return s.soalSsctRemajaDo.Columns(cols...)
}

func (s *soalSsctRemaja) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalSsctRemaja) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["subjek_penilaian"] = s.SubjekPenilaian
	s.fieldMap["sikap_negatif1"] = s.SikapNegatif1
	s.fieldMap["sikap_positif1"] = s.SikapPositif1
	s.fieldMap["sikap_negatif2"] = s.SikapNegatif2
	s.fieldMap["sikap_positif2"] = s.SikapPositif2
	s.fieldMap["sikap_negatif3"] = s.SikapNegatif3
	s.fieldMap["sikap_positif3"] = s.SikapPositif3
	s.fieldMap["aspek"] = s.Aspek
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["komponen"] = s.Komponen
}

func (s soalSsctRemaja) clone(db *gorm.DB) soalSsctRemaja {
	s.soalSsctRemajaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalSsctRemaja) replaceDB(db *gorm.DB) soalSsctRemaja {
	s.soalSsctRemajaDo.ReplaceDB(db)
	return s
}

type soalSsctRemajaDo struct{ gen.DO }

func (s soalSsctRemajaDo) Debug() *soalSsctRemajaDo {
	return s.withDO(s.DO.Debug())
}

func (s soalSsctRemajaDo) WithContext(ctx context.Context) *soalSsctRemajaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalSsctRemajaDo) ReadDB() *soalSsctRemajaDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalSsctRemajaDo) WriteDB() *soalSsctRemajaDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalSsctRemajaDo) Session(config *gorm.Session) *soalSsctRemajaDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalSsctRemajaDo) Clauses(conds ...clause.Expression) *soalSsctRemajaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalSsctRemajaDo) Returning(value interface{}, columns ...string) *soalSsctRemajaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalSsctRemajaDo) Not(conds ...gen.Condition) *soalSsctRemajaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalSsctRemajaDo) Or(conds ...gen.Condition) *soalSsctRemajaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalSsctRemajaDo) Select(conds ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalSsctRemajaDo) Where(conds ...gen.Condition) *soalSsctRemajaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalSsctRemajaDo) Order(conds ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalSsctRemajaDo) Distinct(cols ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalSsctRemajaDo) Omit(cols ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalSsctRemajaDo) Join(table schema.Tabler, on ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalSsctRemajaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalSsctRemajaDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalSsctRemajaDo) Group(cols ...field.Expr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalSsctRemajaDo) Having(conds ...gen.Condition) *soalSsctRemajaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalSsctRemajaDo) Limit(limit int) *soalSsctRemajaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalSsctRemajaDo) Offset(offset int) *soalSsctRemajaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalSsctRemajaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalSsctRemajaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalSsctRemajaDo) Unscoped() *soalSsctRemajaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalSsctRemajaDo) Create(values ...*entity.SoalSsctRemaja) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalSsctRemajaDo) CreateInBatches(values []*entity.SoalSsctRemaja, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalSsctRemajaDo) Save(values ...*entity.SoalSsctRemaja) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalSsctRemajaDo) First() (*entity.SoalSsctRemaja, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSsctRemaja), nil
	}
}

func (s soalSsctRemajaDo) Take() (*entity.SoalSsctRemaja, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSsctRemaja), nil
	}
}

func (s soalSsctRemajaDo) Last() (*entity.SoalSsctRemaja, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSsctRemaja), nil
	}
}

func (s soalSsctRemajaDo) Find() ([]*entity.SoalSsctRemaja, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalSsctRemaja), err
}

func (s soalSsctRemajaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalSsctRemaja, err error) {
	buf := make([]*entity.SoalSsctRemaja, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalSsctRemajaDo) FindInBatches(result *[]*entity.SoalSsctRemaja, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalSsctRemajaDo) Attrs(attrs ...field.AssignExpr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalSsctRemajaDo) Assign(attrs ...field.AssignExpr) *soalSsctRemajaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalSsctRemajaDo) Joins(fields ...field.RelationField) *soalSsctRemajaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalSsctRemajaDo) Preload(fields ...field.RelationField) *soalSsctRemajaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalSsctRemajaDo) FirstOrInit() (*entity.SoalSsctRemaja, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSsctRemaja), nil
	}
}

func (s soalSsctRemajaDo) FirstOrCreate() (*entity.SoalSsctRemaja, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalSsctRemaja), nil
	}
}

func (s soalSsctRemajaDo) FindByPage(offset int, limit int) (result []*entity.SoalSsctRemaja, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalSsctRemajaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalSsctRemajaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalSsctRemajaDo) Delete(models ...*entity.SoalSsctRemaja) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalSsctRemajaDo) withDO(do gen.Dao) *soalSsctRemajaDo {
	s.DO = *do.(*gen.DO)
	return s
}
