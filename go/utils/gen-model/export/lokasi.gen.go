// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newLokasi(db *gorm.DB, opts ...gen.DOOption) lokasi {
	_lokasi := lokasi{}

	_lokasi.lokasiDo.UseDB(db, opts...)
	_lokasi.lokasiDo.UseModel(&entity.Lokasi{})

	tableName := _lokasi.lokasiDo.TableName()
	_lokasi.ALL = field.NewAsterisk(tableName)
	_lokasi.IDLokasi = field.NewInt16(tableName, "id_lokasi")
	_lokasi.NamaLokasi = field.NewString(tableName, "nama_lokasi")
	_lokasi.UUID = field.NewString(tableName, "uuid")
	_lokasi.KodeProvinsi = field.NewString(tableName, "kode_provinsi")
	_lokasi.KodeKabupaten = field.NewString(tableName, "kode_kabupaten")

	_lokasi.fillFieldMap()

	return _lokasi
}

type lokasi struct {
	lokasiDo lokasiDo

	ALL           field.Asterisk
	IDLokasi      field.Int16
	NamaLokasi    field.String
	UUID          field.String
	KodeProvinsi  field.String
	KodeKabupaten field.String

	fieldMap map[string]field.Expr
}

func (l lokasi) Table(newTableName string) *lokasi {
	l.lokasiDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lokasi) As(alias string) *lokasi {
	l.lokasiDo.DO = *(l.lokasiDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lokasi) updateTableName(table string) *lokasi {
	l.ALL = field.NewAsterisk(table)
	l.IDLokasi = field.NewInt16(table, "id_lokasi")
	l.NamaLokasi = field.NewString(table, "nama_lokasi")
	l.UUID = field.NewString(table, "uuid")
	l.KodeProvinsi = field.NewString(table, "kode_provinsi")
	l.KodeKabupaten = field.NewString(table, "kode_kabupaten")

	l.fillFieldMap()

	return l
}

func (l *lokasi) WithContext(ctx context.Context) *lokasiDo { return l.lokasiDo.WithContext(ctx) }

func (l lokasi) TableName() string { return l.lokasiDo.TableName() }

func (l lokasi) Alias() string { return l.lokasiDo.Alias() }

func (l lokasi) Columns(cols ...field.Expr) gen.Columns { return l.lokasiDo.Columns(cols...) }

func (l *lokasi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lokasi) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["id_lokasi"] = l.IDLokasi
	l.fieldMap["nama_lokasi"] = l.NamaLokasi
	l.fieldMap["uuid"] = l.UUID
	l.fieldMap["kode_provinsi"] = l.KodeProvinsi
	l.fieldMap["kode_kabupaten"] = l.KodeKabupaten
}

func (l lokasi) clone(db *gorm.DB) lokasi {
	l.lokasiDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lokasi) replaceDB(db *gorm.DB) lokasi {
	l.lokasiDo.ReplaceDB(db)
	return l
}

type lokasiDo struct{ gen.DO }

func (l lokasiDo) Debug() *lokasiDo {
	return l.withDO(l.DO.Debug())
}

func (l lokasiDo) WithContext(ctx context.Context) *lokasiDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lokasiDo) ReadDB() *lokasiDo {
	return l.Clauses(dbresolver.Read)
}

func (l lokasiDo) WriteDB() *lokasiDo {
	return l.Clauses(dbresolver.Write)
}

func (l lokasiDo) Session(config *gorm.Session) *lokasiDo {
	return l.withDO(l.DO.Session(config))
}

func (l lokasiDo) Clauses(conds ...clause.Expression) *lokasiDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lokasiDo) Returning(value interface{}, columns ...string) *lokasiDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lokasiDo) Not(conds ...gen.Condition) *lokasiDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lokasiDo) Or(conds ...gen.Condition) *lokasiDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lokasiDo) Select(conds ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lokasiDo) Where(conds ...gen.Condition) *lokasiDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lokasiDo) Order(conds ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lokasiDo) Distinct(cols ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lokasiDo) Omit(cols ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lokasiDo) Join(table schema.Tabler, on ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lokasiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lokasiDo) RightJoin(table schema.Tabler, on ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lokasiDo) Group(cols ...field.Expr) *lokasiDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lokasiDo) Having(conds ...gen.Condition) *lokasiDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lokasiDo) Limit(limit int) *lokasiDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lokasiDo) Offset(offset int) *lokasiDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lokasiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lokasiDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lokasiDo) Unscoped() *lokasiDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lokasiDo) Create(values ...*entity.Lokasi) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lokasiDo) CreateInBatches(values []*entity.Lokasi, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lokasiDo) Save(values ...*entity.Lokasi) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lokasiDo) First() (*entity.Lokasi, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lokasi), nil
	}
}

func (l lokasiDo) Take() (*entity.Lokasi, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lokasi), nil
	}
}

func (l lokasiDo) Last() (*entity.Lokasi, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lokasi), nil
	}
}

func (l lokasiDo) Find() ([]*entity.Lokasi, error) {
	result, err := l.DO.Find()
	return result.([]*entity.Lokasi), err
}

func (l lokasiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Lokasi, err error) {
	buf := make([]*entity.Lokasi, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lokasiDo) FindInBatches(result *[]*entity.Lokasi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lokasiDo) Attrs(attrs ...field.AssignExpr) *lokasiDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lokasiDo) Assign(attrs ...field.AssignExpr) *lokasiDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lokasiDo) Joins(fields ...field.RelationField) *lokasiDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lokasiDo) Preload(fields ...field.RelationField) *lokasiDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lokasiDo) FirstOrInit() (*entity.Lokasi, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lokasi), nil
	}
}

func (l lokasiDo) FirstOrCreate() (*entity.Lokasi, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Lokasi), nil
	}
}

func (l lokasiDo) FindByPage(offset int, limit int) (result []*entity.Lokasi, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lokasiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lokasiDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lokasiDo) Delete(models ...*entity.Lokasi) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lokasiDo) withDO(do gen.Dao) *lokasiDo {
	l.DO = *do.(*gen.DO)
	return l
}
