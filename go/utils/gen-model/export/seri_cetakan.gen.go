// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSeriCetakan(db *gorm.DB, opts ...gen.DOOption) seriCetakan {
	_seriCetakan := seriCetakan{}

	_seriCetakan.seriCetakanDo.UseDB(db, opts...)
	_seriCetakan.seriCetakanDo.UseModel(&entity.SeriCetakan{})

	tableName := _seriCetakan.seriCetakanDo.TableName()
	_seriCetakan.ALL = field.NewAsterisk(tableName)
	_seriCetakan.ID = field.NewInt32(tableName, "id")
	_seriCetakan.NoSeri = field.NewString(tableName, "no_seri")
	_seriCetakan.Token = field.NewString(tableName, "token")
	_seriCetakan.CreatedAt = field.NewTime(tableName, "created_at")
	_seriCetakan.IDUser = field.NewInt32(tableName, "id_user")
	_seriCetakan.URL = field.NewString(tableName, "url")
	_seriCetakan.JenisTes = field.NewString(tableName, "jenis_tes")
	_seriCetakan.Filename = field.NewString(tableName, "filename")

	_seriCetakan.fillFieldMap()

	return _seriCetakan
}

type seriCetakan struct {
	seriCetakanDo seriCetakanDo

	ALL       field.Asterisk
	ID        field.Int32
	NoSeri    field.String
	Token     field.String
	CreatedAt field.Time
	IDUser    field.Int32
	URL       field.String
	JenisTes  field.String
	Filename  field.String

	fieldMap map[string]field.Expr
}

func (s seriCetakan) Table(newTableName string) *seriCetakan {
	s.seriCetakanDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seriCetakan) As(alias string) *seriCetakan {
	s.seriCetakanDo.DO = *(s.seriCetakanDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seriCetakan) updateTableName(table string) *seriCetakan {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.NoSeri = field.NewString(table, "no_seri")
	s.Token = field.NewString(table, "token")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.IDUser = field.NewInt32(table, "id_user")
	s.URL = field.NewString(table, "url")
	s.JenisTes = field.NewString(table, "jenis_tes")
	s.Filename = field.NewString(table, "filename")

	s.fillFieldMap()

	return s
}

func (s *seriCetakan) WithContext(ctx context.Context) *seriCetakanDo {
	return s.seriCetakanDo.WithContext(ctx)
}

func (s seriCetakan) TableName() string { return s.seriCetakanDo.TableName() }

func (s seriCetakan) Alias() string { return s.seriCetakanDo.Alias() }

func (s seriCetakan) Columns(cols ...field.Expr) gen.Columns { return s.seriCetakanDo.Columns(cols...) }

func (s *seriCetakan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seriCetakan) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["no_seri"] = s.NoSeri
	s.fieldMap["token"] = s.Token
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["url"] = s.URL
	s.fieldMap["jenis_tes"] = s.JenisTes
	s.fieldMap["filename"] = s.Filename
}

func (s seriCetakan) clone(db *gorm.DB) seriCetakan {
	s.seriCetakanDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seriCetakan) replaceDB(db *gorm.DB) seriCetakan {
	s.seriCetakanDo.ReplaceDB(db)
	return s
}

type seriCetakanDo struct{ gen.DO }

func (s seriCetakanDo) Debug() *seriCetakanDo {
	return s.withDO(s.DO.Debug())
}

func (s seriCetakanDo) WithContext(ctx context.Context) *seriCetakanDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seriCetakanDo) ReadDB() *seriCetakanDo {
	return s.Clauses(dbresolver.Read)
}

func (s seriCetakanDo) WriteDB() *seriCetakanDo {
	return s.Clauses(dbresolver.Write)
}

func (s seriCetakanDo) Session(config *gorm.Session) *seriCetakanDo {
	return s.withDO(s.DO.Session(config))
}

func (s seriCetakanDo) Clauses(conds ...clause.Expression) *seriCetakanDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seriCetakanDo) Returning(value interface{}, columns ...string) *seriCetakanDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seriCetakanDo) Not(conds ...gen.Condition) *seriCetakanDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seriCetakanDo) Or(conds ...gen.Condition) *seriCetakanDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seriCetakanDo) Select(conds ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seriCetakanDo) Where(conds ...gen.Condition) *seriCetakanDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seriCetakanDo) Order(conds ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seriCetakanDo) Distinct(cols ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seriCetakanDo) Omit(cols ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seriCetakanDo) Join(table schema.Tabler, on ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seriCetakanDo) LeftJoin(table schema.Tabler, on ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seriCetakanDo) RightJoin(table schema.Tabler, on ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seriCetakanDo) Group(cols ...field.Expr) *seriCetakanDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seriCetakanDo) Having(conds ...gen.Condition) *seriCetakanDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seriCetakanDo) Limit(limit int) *seriCetakanDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seriCetakanDo) Offset(offset int) *seriCetakanDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seriCetakanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *seriCetakanDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seriCetakanDo) Unscoped() *seriCetakanDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seriCetakanDo) Create(values ...*entity.SeriCetakan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seriCetakanDo) CreateInBatches(values []*entity.SeriCetakan, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seriCetakanDo) Save(values ...*entity.SeriCetakan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seriCetakanDo) First() (*entity.SeriCetakan, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SeriCetakan), nil
	}
}

func (s seriCetakanDo) Take() (*entity.SeriCetakan, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SeriCetakan), nil
	}
}

func (s seriCetakanDo) Last() (*entity.SeriCetakan, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SeriCetakan), nil
	}
}

func (s seriCetakanDo) Find() ([]*entity.SeriCetakan, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SeriCetakan), err
}

func (s seriCetakanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SeriCetakan, err error) {
	buf := make([]*entity.SeriCetakan, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seriCetakanDo) FindInBatches(result *[]*entity.SeriCetakan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seriCetakanDo) Attrs(attrs ...field.AssignExpr) *seriCetakanDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seriCetakanDo) Assign(attrs ...field.AssignExpr) *seriCetakanDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seriCetakanDo) Joins(fields ...field.RelationField) *seriCetakanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seriCetakanDo) Preload(fields ...field.RelationField) *seriCetakanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seriCetakanDo) FirstOrInit() (*entity.SeriCetakan, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SeriCetakan), nil
	}
}

func (s seriCetakanDo) FirstOrCreate() (*entity.SeriCetakan, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SeriCetakan), nil
	}
}

func (s seriCetakanDo) FindByPage(offset int, limit int) (result []*entity.SeriCetakan, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seriCetakanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seriCetakanDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seriCetakanDo) Delete(models ...*entity.SeriCetakan) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seriCetakanDo) withDO(do gen.Dao) *seriCetakanDo {
	s.DO = *do.(*gen.DO)
	return s
}
