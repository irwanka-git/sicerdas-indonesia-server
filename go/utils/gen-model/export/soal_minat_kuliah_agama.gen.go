// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalMinatKuliahAgama(db *gorm.DB, opts ...gen.DOOption) soalMinatKuliahAgama {
	_soalMinatKuliahAgama := soalMinatKuliahAgama{}

	_soalMinatKuliahAgama.soalMinatKuliahAgamaDo.UseDB(db, opts...)
	_soalMinatKuliahAgama.soalMinatKuliahAgamaDo.UseModel(&entity.SoalMinatKuliahAgama{})

	tableName := _soalMinatKuliahAgama.soalMinatKuliahAgamaDo.TableName()
	_soalMinatKuliahAgama.ALL = field.NewAsterisk(tableName)
	_soalMinatKuliahAgama.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalMinatKuliahAgama.Urutan = field.NewInt32(tableName, "urutan")
	_soalMinatKuliahAgama.Indikator = field.NewString(tableName, "indikator")
	_soalMinatKuliahAgama.Jurusan = field.NewString(tableName, "jurusan")
	_soalMinatKuliahAgama.UUID = field.NewString(tableName, "uuid")
	_soalMinatKuliahAgama.Gambar = field.NewString(tableName, "gambar")

	_soalMinatKuliahAgama.fillFieldMap()

	return _soalMinatKuliahAgama
}

type soalMinatKuliahAgama struct {
	soalMinatKuliahAgamaDo soalMinatKuliahAgamaDo

	ALL       field.Asterisk
	IDSoal    field.Int32
	Urutan    field.Int32
	Indikator field.String
	Jurusan   field.String
	UUID      field.String
	Gambar    field.String

	fieldMap map[string]field.Expr
}

func (s soalMinatKuliahAgama) Table(newTableName string) *soalMinatKuliahAgama {
	s.soalMinatKuliahAgamaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalMinatKuliahAgama) As(alias string) *soalMinatKuliahAgama {
	s.soalMinatKuliahAgamaDo.DO = *(s.soalMinatKuliahAgamaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalMinatKuliahAgama) updateTableName(table string) *soalMinatKuliahAgama {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.Urutan = field.NewInt32(table, "urutan")
	s.Indikator = field.NewString(table, "indikator")
	s.Jurusan = field.NewString(table, "jurusan")
	s.UUID = field.NewString(table, "uuid")
	s.Gambar = field.NewString(table, "gambar")

	s.fillFieldMap()

	return s
}

func (s *soalMinatKuliahAgama) WithContext(ctx context.Context) *soalMinatKuliahAgamaDo {
	return s.soalMinatKuliahAgamaDo.WithContext(ctx)
}

func (s soalMinatKuliahAgama) TableName() string { return s.soalMinatKuliahAgamaDo.TableName() }

func (s soalMinatKuliahAgama) Alias() string { return s.soalMinatKuliahAgamaDo.Alias() }

func (s soalMinatKuliahAgama) Columns(cols ...field.Expr) gen.Columns {
	return s.soalMinatKuliahAgamaDo.Columns(cols...)
}

func (s *soalMinatKuliahAgama) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalMinatKuliahAgama) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["indikator"] = s.Indikator
	s.fieldMap["jurusan"] = s.Jurusan
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["gambar"] = s.Gambar
}

func (s soalMinatKuliahAgama) clone(db *gorm.DB) soalMinatKuliahAgama {
	s.soalMinatKuliahAgamaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalMinatKuliahAgama) replaceDB(db *gorm.DB) soalMinatKuliahAgama {
	s.soalMinatKuliahAgamaDo.ReplaceDB(db)
	return s
}

type soalMinatKuliahAgamaDo struct{ gen.DO }

func (s soalMinatKuliahAgamaDo) Debug() *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Debug())
}

func (s soalMinatKuliahAgamaDo) WithContext(ctx context.Context) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalMinatKuliahAgamaDo) ReadDB() *soalMinatKuliahAgamaDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalMinatKuliahAgamaDo) WriteDB() *soalMinatKuliahAgamaDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalMinatKuliahAgamaDo) Session(config *gorm.Session) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalMinatKuliahAgamaDo) Clauses(conds ...clause.Expression) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalMinatKuliahAgamaDo) Returning(value interface{}, columns ...string) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalMinatKuliahAgamaDo) Not(conds ...gen.Condition) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalMinatKuliahAgamaDo) Or(conds ...gen.Condition) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalMinatKuliahAgamaDo) Select(conds ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalMinatKuliahAgamaDo) Where(conds ...gen.Condition) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalMinatKuliahAgamaDo) Order(conds ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalMinatKuliahAgamaDo) Distinct(cols ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalMinatKuliahAgamaDo) Omit(cols ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalMinatKuliahAgamaDo) Join(table schema.Tabler, on ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalMinatKuliahAgamaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalMinatKuliahAgamaDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalMinatKuliahAgamaDo) Group(cols ...field.Expr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalMinatKuliahAgamaDo) Having(conds ...gen.Condition) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalMinatKuliahAgamaDo) Limit(limit int) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalMinatKuliahAgamaDo) Offset(offset int) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalMinatKuliahAgamaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalMinatKuliahAgamaDo) Unscoped() *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalMinatKuliahAgamaDo) Create(values ...*entity.SoalMinatKuliahAgama) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalMinatKuliahAgamaDo) CreateInBatches(values []*entity.SoalMinatKuliahAgama, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalMinatKuliahAgamaDo) Save(values ...*entity.SoalMinatKuliahAgama) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalMinatKuliahAgamaDo) First() (*entity.SoalMinatKuliahAgama, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahAgama), nil
	}
}

func (s soalMinatKuliahAgamaDo) Take() (*entity.SoalMinatKuliahAgama, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahAgama), nil
	}
}

func (s soalMinatKuliahAgamaDo) Last() (*entity.SoalMinatKuliahAgama, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahAgama), nil
	}
}

func (s soalMinatKuliahAgamaDo) Find() ([]*entity.SoalMinatKuliahAgama, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalMinatKuliahAgama), err
}

func (s soalMinatKuliahAgamaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalMinatKuliahAgama, err error) {
	buf := make([]*entity.SoalMinatKuliahAgama, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalMinatKuliahAgamaDo) FindInBatches(result *[]*entity.SoalMinatKuliahAgama, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalMinatKuliahAgamaDo) Attrs(attrs ...field.AssignExpr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalMinatKuliahAgamaDo) Assign(attrs ...field.AssignExpr) *soalMinatKuliahAgamaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalMinatKuliahAgamaDo) Joins(fields ...field.RelationField) *soalMinatKuliahAgamaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalMinatKuliahAgamaDo) Preload(fields ...field.RelationField) *soalMinatKuliahAgamaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalMinatKuliahAgamaDo) FirstOrInit() (*entity.SoalMinatKuliahAgama, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahAgama), nil
	}
}

func (s soalMinatKuliahAgamaDo) FirstOrCreate() (*entity.SoalMinatKuliahAgama, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahAgama), nil
	}
}

func (s soalMinatKuliahAgamaDo) FindByPage(offset int, limit int) (result []*entity.SoalMinatKuliahAgama, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalMinatKuliahAgamaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalMinatKuliahAgamaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalMinatKuliahAgamaDo) Delete(models ...*entity.SoalMinatKuliahAgama) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalMinatKuliahAgamaDo) withDO(do gen.Dao) *soalMinatKuliahAgamaDo {
	s.DO = *do.(*gen.DO)
	return s
}
