// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorKognitifPmk(db *gorm.DB, opts ...gen.DOOption) skorKognitifPmk {
	_skorKognitifPmk := skorKognitifPmk{}

	_skorKognitifPmk.skorKognitifPmkDo.UseDB(db, opts...)
	_skorKognitifPmk.skorKognitifPmkDo.UseModel(&entity.SkorKognitifPmk{})

	tableName := _skorKognitifPmk.skorKognitifPmkDo.TableName()
	_skorKognitifPmk.ALL = field.NewAsterisk(tableName)
	_skorKognitifPmk.ID = field.NewInt64(tableName, "id")
	_skorKognitifPmk.IDUser = field.NewInt32(tableName, "id_user")
	_skorKognitifPmk.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorKognitifPmk.TpaIu = field.NewInt32(tableName, "tpa_iu")
	_skorKognitifPmk.TpaPv = field.NewInt32(tableName, "tpa_pv")
	_skorKognitifPmk.TpaPk = field.NewInt32(tableName, "tpa_pk")
	_skorKognitifPmk.TpaPa = field.NewInt32(tableName, "tpa_pa")
	_skorKognitifPmk.TpaPs = field.NewInt32(tableName, "tpa_ps")
	_skorKognitifPmk.TpaPm = field.NewInt32(tableName, "tpa_pm")
	_skorKognitifPmk.TpaKt = field.NewInt32(tableName, "tpa_kt")
	_skorKognitifPmk.TpaIq = field.NewInt32(tableName, "tpa_iq")
	_skorKognitifPmk.SkorIq = field.NewFloat32(tableName, "skor_iq")
	_skorKognitifPmk.KlasifikasiPv = field.NewString(tableName, "klasifikasi_pv")
	_skorKognitifPmk.KlasifikasiPk = field.NewString(tableName, "klasifikasi_pk")
	_skorKognitifPmk.KlasifikasiPa = field.NewString(tableName, "klasifikasi_pa")
	_skorKognitifPmk.KlasifikasiPs = field.NewString(tableName, "klasifikasi_ps")
	_skorKognitifPmk.KlasifikasiPm = field.NewString(tableName, "klasifikasi_pm")
	_skorKognitifPmk.KlasifikasiKt = field.NewString(tableName, "klasifikasi_kt")
	_skorKognitifPmk.KlasifikasiIq = field.NewString(tableName, "klasifikasi_iq")
	_skorKognitifPmk.KlasifikasiIu = field.NewString(tableName, "klasifikasi_iu")

	_skorKognitifPmk.fillFieldMap()

	return _skorKognitifPmk
}

type skorKognitifPmk struct {
	skorKognitifPmkDo skorKognitifPmkDo

	ALL           field.Asterisk
	ID            field.Int64
	IDUser        field.Int32
	IDQuiz        field.Int32
	TpaIu         field.Int32
	TpaPv         field.Int32
	TpaPk         field.Int32
	TpaPa         field.Int32
	TpaPs         field.Int32
	TpaPm         field.Int32
	TpaKt         field.Int32
	TpaIq         field.Int32
	SkorIq        field.Float32
	KlasifikasiPv field.String
	KlasifikasiPk field.String
	KlasifikasiPa field.String
	KlasifikasiPs field.String
	KlasifikasiPm field.String
	KlasifikasiKt field.String
	KlasifikasiIq field.String
	KlasifikasiIu field.String

	fieldMap map[string]field.Expr
}

func (s skorKognitifPmk) Table(newTableName string) *skorKognitifPmk {
	s.skorKognitifPmkDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorKognitifPmk) As(alias string) *skorKognitifPmk {
	s.skorKognitifPmkDo.DO = *(s.skorKognitifPmkDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorKognitifPmk) updateTableName(table string) *skorKognitifPmk {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TpaIu = field.NewInt32(table, "tpa_iu")
	s.TpaPv = field.NewInt32(table, "tpa_pv")
	s.TpaPk = field.NewInt32(table, "tpa_pk")
	s.TpaPa = field.NewInt32(table, "tpa_pa")
	s.TpaPs = field.NewInt32(table, "tpa_ps")
	s.TpaPm = field.NewInt32(table, "tpa_pm")
	s.TpaKt = field.NewInt32(table, "tpa_kt")
	s.TpaIq = field.NewInt32(table, "tpa_iq")
	s.SkorIq = field.NewFloat32(table, "skor_iq")
	s.KlasifikasiPv = field.NewString(table, "klasifikasi_pv")
	s.KlasifikasiPk = field.NewString(table, "klasifikasi_pk")
	s.KlasifikasiPa = field.NewString(table, "klasifikasi_pa")
	s.KlasifikasiPs = field.NewString(table, "klasifikasi_ps")
	s.KlasifikasiPm = field.NewString(table, "klasifikasi_pm")
	s.KlasifikasiKt = field.NewString(table, "klasifikasi_kt")
	s.KlasifikasiIq = field.NewString(table, "klasifikasi_iq")
	s.KlasifikasiIu = field.NewString(table, "klasifikasi_iu")

	s.fillFieldMap()

	return s
}

func (s *skorKognitifPmk) WithContext(ctx context.Context) *skorKognitifPmkDo {
	return s.skorKognitifPmkDo.WithContext(ctx)
}

func (s skorKognitifPmk) TableName() string { return s.skorKognitifPmkDo.TableName() }

func (s skorKognitifPmk) Alias() string { return s.skorKognitifPmkDo.Alias() }

func (s skorKognitifPmk) Columns(cols ...field.Expr) gen.Columns {
	return s.skorKognitifPmkDo.Columns(cols...)
}

func (s *skorKognitifPmk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorKognitifPmk) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 20)
	s.fieldMap["id"] = s.ID
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tpa_iu"] = s.TpaIu
	s.fieldMap["tpa_pv"] = s.TpaPv
	s.fieldMap["tpa_pk"] = s.TpaPk
	s.fieldMap["tpa_pa"] = s.TpaPa
	s.fieldMap["tpa_ps"] = s.TpaPs
	s.fieldMap["tpa_pm"] = s.TpaPm
	s.fieldMap["tpa_kt"] = s.TpaKt
	s.fieldMap["tpa_iq"] = s.TpaIq
	s.fieldMap["skor_iq"] = s.SkorIq
	s.fieldMap["klasifikasi_pv"] = s.KlasifikasiPv
	s.fieldMap["klasifikasi_pk"] = s.KlasifikasiPk
	s.fieldMap["klasifikasi_pa"] = s.KlasifikasiPa
	s.fieldMap["klasifikasi_ps"] = s.KlasifikasiPs
	s.fieldMap["klasifikasi_pm"] = s.KlasifikasiPm
	s.fieldMap["klasifikasi_kt"] = s.KlasifikasiKt
	s.fieldMap["klasifikasi_iq"] = s.KlasifikasiIq
	s.fieldMap["klasifikasi_iu"] = s.KlasifikasiIu
}

func (s skorKognitifPmk) clone(db *gorm.DB) skorKognitifPmk {
	s.skorKognitifPmkDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorKognitifPmk) replaceDB(db *gorm.DB) skorKognitifPmk {
	s.skorKognitifPmkDo.ReplaceDB(db)
	return s
}

type skorKognitifPmkDo struct{ gen.DO }

func (s skorKognitifPmkDo) Debug() *skorKognitifPmkDo {
	return s.withDO(s.DO.Debug())
}

func (s skorKognitifPmkDo) WithContext(ctx context.Context) *skorKognitifPmkDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorKognitifPmkDo) ReadDB() *skorKognitifPmkDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorKognitifPmkDo) WriteDB() *skorKognitifPmkDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorKognitifPmkDo) Session(config *gorm.Session) *skorKognitifPmkDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorKognitifPmkDo) Clauses(conds ...clause.Expression) *skorKognitifPmkDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorKognitifPmkDo) Returning(value interface{}, columns ...string) *skorKognitifPmkDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorKognitifPmkDo) Not(conds ...gen.Condition) *skorKognitifPmkDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorKognitifPmkDo) Or(conds ...gen.Condition) *skorKognitifPmkDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorKognitifPmkDo) Select(conds ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorKognitifPmkDo) Where(conds ...gen.Condition) *skorKognitifPmkDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorKognitifPmkDo) Order(conds ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorKognitifPmkDo) Distinct(cols ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorKognitifPmkDo) Omit(cols ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorKognitifPmkDo) Join(table schema.Tabler, on ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorKognitifPmkDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorKognitifPmkDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorKognitifPmkDo) Group(cols ...field.Expr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorKognitifPmkDo) Having(conds ...gen.Condition) *skorKognitifPmkDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorKognitifPmkDo) Limit(limit int) *skorKognitifPmkDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorKognitifPmkDo) Offset(offset int) *skorKognitifPmkDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorKognitifPmkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorKognitifPmkDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorKognitifPmkDo) Unscoped() *skorKognitifPmkDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorKognitifPmkDo) Create(values ...*entity.SkorKognitifPmk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorKognitifPmkDo) CreateInBatches(values []*entity.SkorKognitifPmk, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorKognitifPmkDo) Save(values ...*entity.SkorKognitifPmk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorKognitifPmkDo) First() (*entity.SkorKognitifPmk, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKognitifPmk), nil
	}
}

func (s skorKognitifPmkDo) Take() (*entity.SkorKognitifPmk, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKognitifPmk), nil
	}
}

func (s skorKognitifPmkDo) Last() (*entity.SkorKognitifPmk, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKognitifPmk), nil
	}
}

func (s skorKognitifPmkDo) Find() ([]*entity.SkorKognitifPmk, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorKognitifPmk), err
}

func (s skorKognitifPmkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorKognitifPmk, err error) {
	buf := make([]*entity.SkorKognitifPmk, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorKognitifPmkDo) FindInBatches(result *[]*entity.SkorKognitifPmk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorKognitifPmkDo) Attrs(attrs ...field.AssignExpr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorKognitifPmkDo) Assign(attrs ...field.AssignExpr) *skorKognitifPmkDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorKognitifPmkDo) Joins(fields ...field.RelationField) *skorKognitifPmkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorKognitifPmkDo) Preload(fields ...field.RelationField) *skorKognitifPmkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorKognitifPmkDo) FirstOrInit() (*entity.SkorKognitifPmk, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKognitifPmk), nil
	}
}

func (s skorKognitifPmkDo) FirstOrCreate() (*entity.SkorKognitifPmk, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKognitifPmk), nil
	}
}

func (s skorKognitifPmkDo) FindByPage(offset int, limit int) (result []*entity.SkorKognitifPmk, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorKognitifPmkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorKognitifPmkDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorKognitifPmkDo) Delete(models ...*entity.SkorKognitifPmk) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorKognitifPmkDo) withDO(do gen.Dao) *skorKognitifPmkDo {
	s.DO = *do.(*gen.DO)
	return s
}
