// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefKonversiIq90(db *gorm.DB, opts ...gen.DOOption) refKonversiIq90 {
	_refKonversiIq90 := refKonversiIq90{}

	_refKonversiIq90.refKonversiIq90Do.UseDB(db, opts...)
	_refKonversiIq90.refKonversiIq90Do.UseModel(&entity.RefKonversiIq90{})

	tableName := _refKonversiIq90.refKonversiIq90Do.TableName()
	_refKonversiIq90.ALL = field.NewAsterisk(tableName)
	_refKonversiIq90.ID = field.NewInt32(tableName, "id")
	_refKonversiIq90.SkorX = field.NewInt32(tableName, "skor_x")
	_refKonversiIq90.TotIq = field.NewFloat32(tableName, "tot_iq")
	_refKonversiIq90.Klasifikasi = field.NewString(tableName, "klasifikasi")

	_refKonversiIq90.fillFieldMap()

	return _refKonversiIq90
}

type refKonversiIq90 struct {
	refKonversiIq90Do refKonversiIq90Do

	ALL         field.Asterisk
	ID          field.Int32
	SkorX       field.Int32
	TotIq       field.Float32
	Klasifikasi field.String

	fieldMap map[string]field.Expr
}

func (r refKonversiIq90) Table(newTableName string) *refKonversiIq90 {
	r.refKonversiIq90Do.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refKonversiIq90) As(alias string) *refKonversiIq90 {
	r.refKonversiIq90Do.DO = *(r.refKonversiIq90Do.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refKonversiIq90) updateTableName(table string) *refKonversiIq90 {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.SkorX = field.NewInt32(table, "skor_x")
	r.TotIq = field.NewFloat32(table, "tot_iq")
	r.Klasifikasi = field.NewString(table, "klasifikasi")

	r.fillFieldMap()

	return r
}

func (r *refKonversiIq90) WithContext(ctx context.Context) *refKonversiIq90Do {
	return r.refKonversiIq90Do.WithContext(ctx)
}

func (r refKonversiIq90) TableName() string { return r.refKonversiIq90Do.TableName() }

func (r refKonversiIq90) Alias() string { return r.refKonversiIq90Do.Alias() }

func (r refKonversiIq90) Columns(cols ...field.Expr) gen.Columns {
	return r.refKonversiIq90Do.Columns(cols...)
}

func (r *refKonversiIq90) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refKonversiIq90) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["id"] = r.ID
	r.fieldMap["skor_x"] = r.SkorX
	r.fieldMap["tot_iq"] = r.TotIq
	r.fieldMap["klasifikasi"] = r.Klasifikasi
}

func (r refKonversiIq90) clone(db *gorm.DB) refKonversiIq90 {
	r.refKonversiIq90Do.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refKonversiIq90) replaceDB(db *gorm.DB) refKonversiIq90 {
	r.refKonversiIq90Do.ReplaceDB(db)
	return r
}

type refKonversiIq90Do struct{ gen.DO }

func (r refKonversiIq90Do) Debug() *refKonversiIq90Do {
	return r.withDO(r.DO.Debug())
}

func (r refKonversiIq90Do) WithContext(ctx context.Context) *refKonversiIq90Do {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refKonversiIq90Do) ReadDB() *refKonversiIq90Do {
	return r.Clauses(dbresolver.Read)
}

func (r refKonversiIq90Do) WriteDB() *refKonversiIq90Do {
	return r.Clauses(dbresolver.Write)
}

func (r refKonversiIq90Do) Session(config *gorm.Session) *refKonversiIq90Do {
	return r.withDO(r.DO.Session(config))
}

func (r refKonversiIq90Do) Clauses(conds ...clause.Expression) *refKonversiIq90Do {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refKonversiIq90Do) Returning(value interface{}, columns ...string) *refKonversiIq90Do {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refKonversiIq90Do) Not(conds ...gen.Condition) *refKonversiIq90Do {
	return r.withDO(r.DO.Not(conds...))
}

func (r refKonversiIq90Do) Or(conds ...gen.Condition) *refKonversiIq90Do {
	return r.withDO(r.DO.Or(conds...))
}

func (r refKonversiIq90Do) Select(conds ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.Select(conds...))
}

func (r refKonversiIq90Do) Where(conds ...gen.Condition) *refKonversiIq90Do {
	return r.withDO(r.DO.Where(conds...))
}

func (r refKonversiIq90Do) Order(conds ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.Order(conds...))
}

func (r refKonversiIq90Do) Distinct(cols ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refKonversiIq90Do) Omit(cols ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refKonversiIq90Do) Join(table schema.Tabler, on ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refKonversiIq90Do) LeftJoin(table schema.Tabler, on ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refKonversiIq90Do) RightJoin(table schema.Tabler, on ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refKonversiIq90Do) Group(cols ...field.Expr) *refKonversiIq90Do {
	return r.withDO(r.DO.Group(cols...))
}

func (r refKonversiIq90Do) Having(conds ...gen.Condition) *refKonversiIq90Do {
	return r.withDO(r.DO.Having(conds...))
}

func (r refKonversiIq90Do) Limit(limit int) *refKonversiIq90Do {
	return r.withDO(r.DO.Limit(limit))
}

func (r refKonversiIq90Do) Offset(offset int) *refKonversiIq90Do {
	return r.withDO(r.DO.Offset(offset))
}

func (r refKonversiIq90Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *refKonversiIq90Do {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refKonversiIq90Do) Unscoped() *refKonversiIq90Do {
	return r.withDO(r.DO.Unscoped())
}

func (r refKonversiIq90Do) Create(values ...*entity.RefKonversiIq90) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refKonversiIq90Do) CreateInBatches(values []*entity.RefKonversiIq90, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refKonversiIq90Do) Save(values ...*entity.RefKonversiIq90) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refKonversiIq90Do) First() (*entity.RefKonversiIq90, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKonversiIq90), nil
	}
}

func (r refKonversiIq90Do) Take() (*entity.RefKonversiIq90, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKonversiIq90), nil
	}
}

func (r refKonversiIq90Do) Last() (*entity.RefKonversiIq90, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKonversiIq90), nil
	}
}

func (r refKonversiIq90Do) Find() ([]*entity.RefKonversiIq90, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefKonversiIq90), err
}

func (r refKonversiIq90Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefKonversiIq90, err error) {
	buf := make([]*entity.RefKonversiIq90, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refKonversiIq90Do) FindInBatches(result *[]*entity.RefKonversiIq90, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refKonversiIq90Do) Attrs(attrs ...field.AssignExpr) *refKonversiIq90Do {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refKonversiIq90Do) Assign(attrs ...field.AssignExpr) *refKonversiIq90Do {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refKonversiIq90Do) Joins(fields ...field.RelationField) *refKonversiIq90Do {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refKonversiIq90Do) Preload(fields ...field.RelationField) *refKonversiIq90Do {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refKonversiIq90Do) FirstOrInit() (*entity.RefKonversiIq90, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKonversiIq90), nil
	}
}

func (r refKonversiIq90Do) FirstOrCreate() (*entity.RefKonversiIq90, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKonversiIq90), nil
	}
}

func (r refKonversiIq90Do) FindByPage(offset int, limit int) (result []*entity.RefKonversiIq90, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refKonversiIq90Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refKonversiIq90Do) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refKonversiIq90Do) Delete(models ...*entity.RefKonversiIq90) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refKonversiIq90Do) withDO(do gen.Dao) *refKonversiIq90Do {
	r.DO = *do.(*gen.DO)
	return r
}
