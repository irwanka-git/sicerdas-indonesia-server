// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkoringPenjurusanKuliahV3(db *gorm.DB, opts ...gen.DOOption) skoringPenjurusanKuliahV3 {
	_skoringPenjurusanKuliahV3 := skoringPenjurusanKuliahV3{}

	_skoringPenjurusanKuliahV3.skoringPenjurusanKuliahV3Do.UseDB(db, opts...)
	_skoringPenjurusanKuliahV3.skoringPenjurusanKuliahV3Do.UseModel(&entity.SkoringPenjurusanKuliahV3{})

	tableName := _skoringPenjurusanKuliahV3.skoringPenjurusanKuliahV3Do.TableName()
	_skoringPenjurusanKuliahV3.ALL = field.NewAsterisk(tableName)
	_skoringPenjurusanKuliahV3.ID = field.NewInt32(tableName, "id")
	_skoringPenjurusanKuliahV3.IDUser = field.NewInt32(tableName, "id_user")
	_skoringPenjurusanKuliahV3.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skoringPenjurusanKuliahV3.TpaIu = field.NewInt32(tableName, "tpa_iu")
	_skoringPenjurusanKuliahV3.TpaPv = field.NewInt32(tableName, "tpa_pv")
	_skoringPenjurusanKuliahV3.TpaPk = field.NewInt32(tableName, "tpa_pk")
	_skoringPenjurusanKuliahV3.TpaPa = field.NewInt32(tableName, "tpa_pa")
	_skoringPenjurusanKuliahV3.TpaPm = field.NewInt32(tableName, "tpa_pm")
	_skoringPenjurusanKuliahV3.TpaKt = field.NewInt32(tableName, "tpa_kt")
	_skoringPenjurusanKuliahV3.TpaIq = field.NewInt32(tableName, "tpa_iq")
	_skoringPenjurusanKuliahV3.SkorIq = field.NewFloat32(tableName, "skor_iq")
	_skoringPenjurusanKuliahV3.MinatIpa1 = field.NewInt32(tableName, "minat_ipa1")
	_skoringPenjurusanKuliahV3.MinatIpa2 = field.NewInt32(tableName, "minat_ipa2")
	_skoringPenjurusanKuliahV3.MinatIpa3 = field.NewInt32(tableName, "minat_ipa3")
	_skoringPenjurusanKuliahV3.MinatIpa4 = field.NewInt32(tableName, "minat_ipa4")
	_skoringPenjurusanKuliahV3.MinatIpa5 = field.NewInt32(tableName, "minat_ipa5")
	_skoringPenjurusanKuliahV3.MinatIps1 = field.NewInt32(tableName, "minat_ips1")
	_skoringPenjurusanKuliahV3.MinatIps2 = field.NewInt32(tableName, "minat_ips2")
	_skoringPenjurusanKuliahV3.MinatIps3 = field.NewInt32(tableName, "minat_ips3")
	_skoringPenjurusanKuliahV3.MinatIps4 = field.NewInt32(tableName, "minat_ips4")
	_skoringPenjurusanKuliahV3.MinatIps5 = field.NewInt32(tableName, "minat_ips5")
	_skoringPenjurusanKuliahV3.SikapAgm = field.NewInt32(tableName, "sikap_agm")
	_skoringPenjurusanKuliahV3.SikapPkn = field.NewInt32(tableName, "sikap_pkn")
	_skoringPenjurusanKuliahV3.SikapInd = field.NewInt32(tableName, "sikap_ind")
	_skoringPenjurusanKuliahV3.SikapEng = field.NewInt32(tableName, "sikap_eng")
	_skoringPenjurusanKuliahV3.SikapMat = field.NewInt32(tableName, "sikap_mat")
	_skoringPenjurusanKuliahV3.SikapFis = field.NewInt32(tableName, "sikap_fis")
	_skoringPenjurusanKuliahV3.SikapBio = field.NewInt32(tableName, "sikap_bio")
	_skoringPenjurusanKuliahV3.SikapKim = field.NewInt32(tableName, "sikap_kim")
	_skoringPenjurusanKuliahV3.SikapEko = field.NewInt32(tableName, "sikap_eko")
	_skoringPenjurusanKuliahV3.SikapSej = field.NewInt32(tableName, "sikap_sej")
	_skoringPenjurusanKuliahV3.SikapSos = field.NewInt32(tableName, "sikap_sos")
	_skoringPenjurusanKuliahV3.SikapGeo = field.NewInt32(tableName, "sikap_geo")
	_skoringPenjurusanKuliahV3.SikapSbd = field.NewInt32(tableName, "sikap_sbd")
	_skoringPenjurusanKuliahV3.SikapOrg = field.NewInt32(tableName, "sikap_org")
	_skoringPenjurusanKuliahV3.SikapMlk = field.NewInt32(tableName, "sikap_mlk")
	_skoringPenjurusanKuliahV3.SikapTik = field.NewInt32(tableName, "sikap_tik")
	_skoringPenjurusanKuliahV3.MinatAgm1 = field.NewInt32(tableName, "minat_agm1")
	_skoringPenjurusanKuliahV3.MinatAgm2 = field.NewInt32(tableName, "minat_agm2")
	_skoringPenjurusanKuliahV3.MinatAgm3 = field.NewInt32(tableName, "minat_agm3")
	_skoringPenjurusanKuliahV3.MinatAgm4 = field.NewInt32(tableName, "minat_agm4")
	_skoringPenjurusanKuliahV3.MinatAgm5 = field.NewInt32(tableName, "minat_agm5")
	_skoringPenjurusanKuliahV3.MinatDinas1 = field.NewString(tableName, "minat_dinas1")
	_skoringPenjurusanKuliahV3.MinatDinas2 = field.NewString(tableName, "minat_dinas2")
	_skoringPenjurusanKuliahV3.MinatDinas3 = field.NewString(tableName, "minat_dinas3")
	_skoringPenjurusanKuliahV3.SelesaiSkoring = field.NewInt32(tableName, "selesai_skoring")
	_skoringPenjurusanKuliahV3.GpA = field.NewInt32(tableName, "gp_a")
	_skoringPenjurusanKuliahV3.GpB = field.NewInt32(tableName, "gp_b")
	_skoringPenjurusanKuliahV3.GpC = field.NewInt32(tableName, "gp_c")
	_skoringPenjurusanKuliahV3.GpD = field.NewInt32(tableName, "gp_d")
	_skoringPenjurusanKuliahV3.GpE = field.NewInt32(tableName, "gp_e")
	_skoringPenjurusanKuliahV3.GpF = field.NewInt32(tableName, "gp_f")
	_skoringPenjurusanKuliahV3.GpG = field.NewInt32(tableName, "gp_g")
	_skoringPenjurusanKuliahV3.GpH = field.NewInt32(tableName, "gp_h")
	_skoringPenjurusanKuliahV3.GpI = field.NewInt32(tableName, "gp_i")
	_skoringPenjurusanKuliahV3.GpJ = field.NewInt32(tableName, "gp_j")
	_skoringPenjurusanKuliahV3.GpK = field.NewInt32(tableName, "gp_k")
	_skoringPenjurusanKuliahV3.GpL = field.NewInt32(tableName, "gp_l")
	_skoringPenjurusanKuliahV3.RangkingGp1 = field.NewString(tableName, "rangking_gp1")
	_skoringPenjurusanKuliahV3.RangkingGp2 = field.NewString(tableName, "rangking_gp2")
	_skoringPenjurusanKuliahV3.RangkingGp3 = field.NewString(tableName, "rangking_gp3")
	_skoringPenjurusanKuliahV3.TpaPs = field.NewInt16(tableName, "tpa_ps")
	_skoringPenjurusanKuliahV3.GayaAuditoris = field.NewInt16(tableName, "gaya_auditoris")
	_skoringPenjurusanKuliahV3.GayaVisual = field.NewInt16(tableName, "gaya_visual")
	_skoringPenjurusanKuliahV3.GayaKinestetik = field.NewInt16(tableName, "gaya_kinestetik")

	_skoringPenjurusanKuliahV3.fillFieldMap()

	return _skoringPenjurusanKuliahV3
}

type skoringPenjurusanKuliahV3 struct {
	skoringPenjurusanKuliahV3Do skoringPenjurusanKuliahV3Do

	ALL            field.Asterisk
	ID             field.Int32
	IDUser         field.Int32
	IDQuiz         field.Int32
	TpaIu          field.Int32
	TpaPv          field.Int32
	TpaPk          field.Int32
	TpaPa          field.Int32
	TpaPm          field.Int32
	TpaKt          field.Int32
	TpaIq          field.Int32
	SkorIq         field.Float32
	MinatIpa1      field.Int32
	MinatIpa2      field.Int32
	MinatIpa3      field.Int32
	MinatIpa4      field.Int32
	MinatIpa5      field.Int32
	MinatIps1      field.Int32
	MinatIps2      field.Int32
	MinatIps3      field.Int32
	MinatIps4      field.Int32
	MinatIps5      field.Int32
	SikapAgm       field.Int32
	SikapPkn       field.Int32
	SikapInd       field.Int32
	SikapEng       field.Int32
	SikapMat       field.Int32
	SikapFis       field.Int32
	SikapBio       field.Int32
	SikapKim       field.Int32
	SikapEko       field.Int32
	SikapSej       field.Int32
	SikapSos       field.Int32
	SikapGeo       field.Int32
	SikapSbd       field.Int32
	SikapOrg       field.Int32
	SikapMlk       field.Int32
	SikapTik       field.Int32
	MinatAgm1      field.Int32
	MinatAgm2      field.Int32
	MinatAgm3      field.Int32
	MinatAgm4      field.Int32
	MinatAgm5      field.Int32
	MinatDinas1    field.String
	MinatDinas2    field.String
	MinatDinas3    field.String
	SelesaiSkoring field.Int32
	GpA            field.Int32
	GpB            field.Int32
	GpC            field.Int32
	GpD            field.Int32
	GpE            field.Int32
	GpF            field.Int32
	GpG            field.Int32
	GpH            field.Int32
	GpI            field.Int32
	GpJ            field.Int32
	GpK            field.Int32
	GpL            field.Int32
	RangkingGp1    field.String
	RangkingGp2    field.String
	RangkingGp3    field.String
	TpaPs          field.Int16
	GayaAuditoris  field.Int16
	GayaVisual     field.Int16
	GayaKinestetik field.Int16

	fieldMap map[string]field.Expr
}

func (s skoringPenjurusanKuliahV3) Table(newTableName string) *skoringPenjurusanKuliahV3 {
	s.skoringPenjurusanKuliahV3Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skoringPenjurusanKuliahV3) As(alias string) *skoringPenjurusanKuliahV3 {
	s.skoringPenjurusanKuliahV3Do.DO = *(s.skoringPenjurusanKuliahV3Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skoringPenjurusanKuliahV3) updateTableName(table string) *skoringPenjurusanKuliahV3 {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TpaIu = field.NewInt32(table, "tpa_iu")
	s.TpaPv = field.NewInt32(table, "tpa_pv")
	s.TpaPk = field.NewInt32(table, "tpa_pk")
	s.TpaPa = field.NewInt32(table, "tpa_pa")
	s.TpaPm = field.NewInt32(table, "tpa_pm")
	s.TpaKt = field.NewInt32(table, "tpa_kt")
	s.TpaIq = field.NewInt32(table, "tpa_iq")
	s.SkorIq = field.NewFloat32(table, "skor_iq")
	s.MinatIpa1 = field.NewInt32(table, "minat_ipa1")
	s.MinatIpa2 = field.NewInt32(table, "minat_ipa2")
	s.MinatIpa3 = field.NewInt32(table, "minat_ipa3")
	s.MinatIpa4 = field.NewInt32(table, "minat_ipa4")
	s.MinatIpa5 = field.NewInt32(table, "minat_ipa5")
	s.MinatIps1 = field.NewInt32(table, "minat_ips1")
	s.MinatIps2 = field.NewInt32(table, "minat_ips2")
	s.MinatIps3 = field.NewInt32(table, "minat_ips3")
	s.MinatIps4 = field.NewInt32(table, "minat_ips4")
	s.MinatIps5 = field.NewInt32(table, "minat_ips5")
	s.SikapAgm = field.NewInt32(table, "sikap_agm")
	s.SikapPkn = field.NewInt32(table, "sikap_pkn")
	s.SikapInd = field.NewInt32(table, "sikap_ind")
	s.SikapEng = field.NewInt32(table, "sikap_eng")
	s.SikapMat = field.NewInt32(table, "sikap_mat")
	s.SikapFis = field.NewInt32(table, "sikap_fis")
	s.SikapBio = field.NewInt32(table, "sikap_bio")
	s.SikapKim = field.NewInt32(table, "sikap_kim")
	s.SikapEko = field.NewInt32(table, "sikap_eko")
	s.SikapSej = field.NewInt32(table, "sikap_sej")
	s.SikapSos = field.NewInt32(table, "sikap_sos")
	s.SikapGeo = field.NewInt32(table, "sikap_geo")
	s.SikapSbd = field.NewInt32(table, "sikap_sbd")
	s.SikapOrg = field.NewInt32(table, "sikap_org")
	s.SikapMlk = field.NewInt32(table, "sikap_mlk")
	s.SikapTik = field.NewInt32(table, "sikap_tik")
	s.MinatAgm1 = field.NewInt32(table, "minat_agm1")
	s.MinatAgm2 = field.NewInt32(table, "minat_agm2")
	s.MinatAgm3 = field.NewInt32(table, "minat_agm3")
	s.MinatAgm4 = field.NewInt32(table, "minat_agm4")
	s.MinatAgm5 = field.NewInt32(table, "minat_agm5")
	s.MinatDinas1 = field.NewString(table, "minat_dinas1")
	s.MinatDinas2 = field.NewString(table, "minat_dinas2")
	s.MinatDinas3 = field.NewString(table, "minat_dinas3")
	s.SelesaiSkoring = field.NewInt32(table, "selesai_skoring")
	s.GpA = field.NewInt32(table, "gp_a")
	s.GpB = field.NewInt32(table, "gp_b")
	s.GpC = field.NewInt32(table, "gp_c")
	s.GpD = field.NewInt32(table, "gp_d")
	s.GpE = field.NewInt32(table, "gp_e")
	s.GpF = field.NewInt32(table, "gp_f")
	s.GpG = field.NewInt32(table, "gp_g")
	s.GpH = field.NewInt32(table, "gp_h")
	s.GpI = field.NewInt32(table, "gp_i")
	s.GpJ = field.NewInt32(table, "gp_j")
	s.GpK = field.NewInt32(table, "gp_k")
	s.GpL = field.NewInt32(table, "gp_l")
	s.RangkingGp1 = field.NewString(table, "rangking_gp1")
	s.RangkingGp2 = field.NewString(table, "rangking_gp2")
	s.RangkingGp3 = field.NewString(table, "rangking_gp3")
	s.TpaPs = field.NewInt16(table, "tpa_ps")
	s.GayaAuditoris = field.NewInt16(table, "gaya_auditoris")
	s.GayaVisual = field.NewInt16(table, "gaya_visual")
	s.GayaKinestetik = field.NewInt16(table, "gaya_kinestetik")

	s.fillFieldMap()

	return s
}

func (s *skoringPenjurusanKuliahV3) WithContext(ctx context.Context) *skoringPenjurusanKuliahV3Do {
	return s.skoringPenjurusanKuliahV3Do.WithContext(ctx)
}

func (s skoringPenjurusanKuliahV3) TableName() string {
	return s.skoringPenjurusanKuliahV3Do.TableName()
}

func (s skoringPenjurusanKuliahV3) Alias() string { return s.skoringPenjurusanKuliahV3Do.Alias() }

func (s skoringPenjurusanKuliahV3) Columns(cols ...field.Expr) gen.Columns {
	return s.skoringPenjurusanKuliahV3Do.Columns(cols...)
}

func (s *skoringPenjurusanKuliahV3) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skoringPenjurusanKuliahV3) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 65)
	s.fieldMap["id"] = s.ID
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tpa_iu"] = s.TpaIu
	s.fieldMap["tpa_pv"] = s.TpaPv
	s.fieldMap["tpa_pk"] = s.TpaPk
	s.fieldMap["tpa_pa"] = s.TpaPa
	s.fieldMap["tpa_pm"] = s.TpaPm
	s.fieldMap["tpa_kt"] = s.TpaKt
	s.fieldMap["tpa_iq"] = s.TpaIq
	s.fieldMap["skor_iq"] = s.SkorIq
	s.fieldMap["minat_ipa1"] = s.MinatIpa1
	s.fieldMap["minat_ipa2"] = s.MinatIpa2
	s.fieldMap["minat_ipa3"] = s.MinatIpa3
	s.fieldMap["minat_ipa4"] = s.MinatIpa4
	s.fieldMap["minat_ipa5"] = s.MinatIpa5
	s.fieldMap["minat_ips1"] = s.MinatIps1
	s.fieldMap["minat_ips2"] = s.MinatIps2
	s.fieldMap["minat_ips3"] = s.MinatIps3
	s.fieldMap["minat_ips4"] = s.MinatIps4
	s.fieldMap["minat_ips5"] = s.MinatIps5
	s.fieldMap["sikap_agm"] = s.SikapAgm
	s.fieldMap["sikap_pkn"] = s.SikapPkn
	s.fieldMap["sikap_ind"] = s.SikapInd
	s.fieldMap["sikap_eng"] = s.SikapEng
	s.fieldMap["sikap_mat"] = s.SikapMat
	s.fieldMap["sikap_fis"] = s.SikapFis
	s.fieldMap["sikap_bio"] = s.SikapBio
	s.fieldMap["sikap_kim"] = s.SikapKim
	s.fieldMap["sikap_eko"] = s.SikapEko
	s.fieldMap["sikap_sej"] = s.SikapSej
	s.fieldMap["sikap_sos"] = s.SikapSos
	s.fieldMap["sikap_geo"] = s.SikapGeo
	s.fieldMap["sikap_sbd"] = s.SikapSbd
	s.fieldMap["sikap_org"] = s.SikapOrg
	s.fieldMap["sikap_mlk"] = s.SikapMlk
	s.fieldMap["sikap_tik"] = s.SikapTik
	s.fieldMap["minat_agm1"] = s.MinatAgm1
	s.fieldMap["minat_agm2"] = s.MinatAgm2
	s.fieldMap["minat_agm3"] = s.MinatAgm3
	s.fieldMap["minat_agm4"] = s.MinatAgm4
	s.fieldMap["minat_agm5"] = s.MinatAgm5
	s.fieldMap["minat_dinas1"] = s.MinatDinas1
	s.fieldMap["minat_dinas2"] = s.MinatDinas2
	s.fieldMap["minat_dinas3"] = s.MinatDinas3
	s.fieldMap["selesai_skoring"] = s.SelesaiSkoring
	s.fieldMap["gp_a"] = s.GpA
	s.fieldMap["gp_b"] = s.GpB
	s.fieldMap["gp_c"] = s.GpC
	s.fieldMap["gp_d"] = s.GpD
	s.fieldMap["gp_e"] = s.GpE
	s.fieldMap["gp_f"] = s.GpF
	s.fieldMap["gp_g"] = s.GpG
	s.fieldMap["gp_h"] = s.GpH
	s.fieldMap["gp_i"] = s.GpI
	s.fieldMap["gp_j"] = s.GpJ
	s.fieldMap["gp_k"] = s.GpK
	s.fieldMap["gp_l"] = s.GpL
	s.fieldMap["rangking_gp1"] = s.RangkingGp1
	s.fieldMap["rangking_gp2"] = s.RangkingGp2
	s.fieldMap["rangking_gp3"] = s.RangkingGp3
	s.fieldMap["tpa_ps"] = s.TpaPs
	s.fieldMap["gaya_auditoris"] = s.GayaAuditoris
	s.fieldMap["gaya_visual"] = s.GayaVisual
	s.fieldMap["gaya_kinestetik"] = s.GayaKinestetik
}

func (s skoringPenjurusanKuliahV3) clone(db *gorm.DB) skoringPenjurusanKuliahV3 {
	s.skoringPenjurusanKuliahV3Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skoringPenjurusanKuliahV3) replaceDB(db *gorm.DB) skoringPenjurusanKuliahV3 {
	s.skoringPenjurusanKuliahV3Do.ReplaceDB(db)
	return s
}

type skoringPenjurusanKuliahV3Do struct{ gen.DO }

func (s skoringPenjurusanKuliahV3Do) Debug() *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Debug())
}

func (s skoringPenjurusanKuliahV3Do) WithContext(ctx context.Context) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skoringPenjurusanKuliahV3Do) ReadDB() *skoringPenjurusanKuliahV3Do {
	return s.Clauses(dbresolver.Read)
}

func (s skoringPenjurusanKuliahV3Do) WriteDB() *skoringPenjurusanKuliahV3Do {
	return s.Clauses(dbresolver.Write)
}

func (s skoringPenjurusanKuliahV3Do) Session(config *gorm.Session) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Session(config))
}

func (s skoringPenjurusanKuliahV3Do) Clauses(conds ...clause.Expression) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skoringPenjurusanKuliahV3Do) Returning(value interface{}, columns ...string) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skoringPenjurusanKuliahV3Do) Not(conds ...gen.Condition) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s skoringPenjurusanKuliahV3Do) Or(conds ...gen.Condition) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s skoringPenjurusanKuliahV3Do) Select(conds ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s skoringPenjurusanKuliahV3Do) Where(conds ...gen.Condition) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s skoringPenjurusanKuliahV3Do) Order(conds ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s skoringPenjurusanKuliahV3Do) Distinct(cols ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skoringPenjurusanKuliahV3Do) Omit(cols ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skoringPenjurusanKuliahV3Do) Join(table schema.Tabler, on ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skoringPenjurusanKuliahV3Do) LeftJoin(table schema.Tabler, on ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skoringPenjurusanKuliahV3Do) RightJoin(table schema.Tabler, on ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skoringPenjurusanKuliahV3Do) Group(cols ...field.Expr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s skoringPenjurusanKuliahV3Do) Having(conds ...gen.Condition) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s skoringPenjurusanKuliahV3Do) Limit(limit int) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s skoringPenjurusanKuliahV3Do) Offset(offset int) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s skoringPenjurusanKuliahV3Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skoringPenjurusanKuliahV3Do) Unscoped() *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Unscoped())
}

func (s skoringPenjurusanKuliahV3Do) Create(values ...*entity.SkoringPenjurusanKuliahV3) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skoringPenjurusanKuliahV3Do) CreateInBatches(values []*entity.SkoringPenjurusanKuliahV3, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skoringPenjurusanKuliahV3Do) Save(values ...*entity.SkoringPenjurusanKuliahV3) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skoringPenjurusanKuliahV3Do) First() (*entity.SkoringPenjurusanKuliahV3, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringPenjurusanKuliahV3), nil
	}
}

func (s skoringPenjurusanKuliahV3Do) Take() (*entity.SkoringPenjurusanKuliahV3, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringPenjurusanKuliahV3), nil
	}
}

func (s skoringPenjurusanKuliahV3Do) Last() (*entity.SkoringPenjurusanKuliahV3, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringPenjurusanKuliahV3), nil
	}
}

func (s skoringPenjurusanKuliahV3Do) Find() ([]*entity.SkoringPenjurusanKuliahV3, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkoringPenjurusanKuliahV3), err
}

func (s skoringPenjurusanKuliahV3Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkoringPenjurusanKuliahV3, err error) {
	buf := make([]*entity.SkoringPenjurusanKuliahV3, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skoringPenjurusanKuliahV3Do) FindInBatches(result *[]*entity.SkoringPenjurusanKuliahV3, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skoringPenjurusanKuliahV3Do) Attrs(attrs ...field.AssignExpr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skoringPenjurusanKuliahV3Do) Assign(attrs ...field.AssignExpr) *skoringPenjurusanKuliahV3Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skoringPenjurusanKuliahV3Do) Joins(fields ...field.RelationField) *skoringPenjurusanKuliahV3Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skoringPenjurusanKuliahV3Do) Preload(fields ...field.RelationField) *skoringPenjurusanKuliahV3Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skoringPenjurusanKuliahV3Do) FirstOrInit() (*entity.SkoringPenjurusanKuliahV3, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringPenjurusanKuliahV3), nil
	}
}

func (s skoringPenjurusanKuliahV3Do) FirstOrCreate() (*entity.SkoringPenjurusanKuliahV3, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringPenjurusanKuliahV3), nil
	}
}

func (s skoringPenjurusanKuliahV3Do) FindByPage(offset int, limit int) (result []*entity.SkoringPenjurusanKuliahV3, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skoringPenjurusanKuliahV3Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skoringPenjurusanKuliahV3Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skoringPenjurusanKuliahV3Do) Delete(models ...*entity.SkoringPenjurusanKuliahV3) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skoringPenjurusanKuliahV3Do) withDO(do gen.Dao) *skoringPenjurusanKuliahV3Do {
	s.DO = *do.(*gen.DO)
	return s
}
