// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newModelReport(db *gorm.DB, opts ...gen.DOOption) modelReport {
	_modelReport := modelReport{}

	_modelReport.modelReportDo.UseDB(db, opts...)
	_modelReport.modelReportDo.UseModel(&entity.ModelReport{})

	tableName := _modelReport.modelReportDo.TableName()
	_modelReport.ALL = field.NewAsterisk(tableName)
	_modelReport.ID = field.NewString(tableName, "id")
	_modelReport.Nama = field.NewString(tableName, "nama")

	_modelReport.fillFieldMap()

	return _modelReport
}

type modelReport struct {
	modelReportDo modelReportDo

	ALL  field.Asterisk
	ID   field.String
	Nama field.String

	fieldMap map[string]field.Expr
}

func (m modelReport) Table(newTableName string) *modelReport {
	m.modelReportDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelReport) As(alias string) *modelReport {
	m.modelReportDo.DO = *(m.modelReportDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelReport) updateTableName(table string) *modelReport {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.Nama = field.NewString(table, "nama")

	m.fillFieldMap()

	return m
}

func (m *modelReport) WithContext(ctx context.Context) *modelReportDo {
	return m.modelReportDo.WithContext(ctx)
}

func (m modelReport) TableName() string { return m.modelReportDo.TableName() }

func (m modelReport) Alias() string { return m.modelReportDo.Alias() }

func (m modelReport) Columns(cols ...field.Expr) gen.Columns { return m.modelReportDo.Columns(cols...) }

func (m *modelReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelReport) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["id"] = m.ID
	m.fieldMap["nama"] = m.Nama
}

func (m modelReport) clone(db *gorm.DB) modelReport {
	m.modelReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelReport) replaceDB(db *gorm.DB) modelReport {
	m.modelReportDo.ReplaceDB(db)
	return m
}

type modelReportDo struct{ gen.DO }

func (m modelReportDo) Debug() *modelReportDo {
	return m.withDO(m.DO.Debug())
}

func (m modelReportDo) WithContext(ctx context.Context) *modelReportDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelReportDo) ReadDB() *modelReportDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelReportDo) WriteDB() *modelReportDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelReportDo) Session(config *gorm.Session) *modelReportDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelReportDo) Clauses(conds ...clause.Expression) *modelReportDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelReportDo) Returning(value interface{}, columns ...string) *modelReportDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelReportDo) Not(conds ...gen.Condition) *modelReportDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelReportDo) Or(conds ...gen.Condition) *modelReportDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelReportDo) Select(conds ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelReportDo) Where(conds ...gen.Condition) *modelReportDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelReportDo) Order(conds ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelReportDo) Distinct(cols ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelReportDo) Omit(cols ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelReportDo) Join(table schema.Tabler, on ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelReportDo) Group(cols ...field.Expr) *modelReportDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelReportDo) Having(conds ...gen.Condition) *modelReportDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelReportDo) Limit(limit int) *modelReportDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelReportDo) Offset(offset int) *modelReportDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *modelReportDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelReportDo) Unscoped() *modelReportDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelReportDo) Create(values ...*entity.ModelReport) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelReportDo) CreateInBatches(values []*entity.ModelReport, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelReportDo) Save(values ...*entity.ModelReport) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelReportDo) First() (*entity.ModelReport, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ModelReport), nil
	}
}

func (m modelReportDo) Take() (*entity.ModelReport, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ModelReport), nil
	}
}

func (m modelReportDo) Last() (*entity.ModelReport, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ModelReport), nil
	}
}

func (m modelReportDo) Find() ([]*entity.ModelReport, error) {
	result, err := m.DO.Find()
	return result.([]*entity.ModelReport), err
}

func (m modelReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ModelReport, err error) {
	buf := make([]*entity.ModelReport, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelReportDo) FindInBatches(result *[]*entity.ModelReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelReportDo) Attrs(attrs ...field.AssignExpr) *modelReportDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelReportDo) Assign(attrs ...field.AssignExpr) *modelReportDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelReportDo) Joins(fields ...field.RelationField) *modelReportDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelReportDo) Preload(fields ...field.RelationField) *modelReportDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelReportDo) FirstOrInit() (*entity.ModelReport, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ModelReport), nil
	}
}

func (m modelReportDo) FirstOrCreate() (*entity.ModelReport, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ModelReport), nil
	}
}

func (m modelReportDo) FindByPage(offset int, limit int) (result []*entity.ModelReport, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelReportDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelReportDo) Delete(models ...*entity.ModelReport) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelReportDo) withDO(do gen.Dao) *modelReportDo {
	m.DO = *do.(*gen.DO)
	return m
}
