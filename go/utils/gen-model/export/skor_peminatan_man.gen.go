// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorPeminatanMan(db *gorm.DB, opts ...gen.DOOption) skorPeminatanMan {
	_skorPeminatanMan := skorPeminatanMan{}

	_skorPeminatanMan.skorPeminatanManDo.UseDB(db, opts...)
	_skorPeminatanMan.skorPeminatanManDo.UseModel(&entity.SkorPeminatanMan{})

	tableName := _skorPeminatanMan.skorPeminatanManDo.TableName()
	_skorPeminatanMan.ALL = field.NewAsterisk(tableName)
	_skorPeminatanMan.IDUser = field.NewInt32(tableName, "id_user")
	_skorPeminatanMan.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorPeminatanMan.MinatSains = field.NewInt32(tableName, "minat_sains")
	_skorPeminatanMan.MinatHumaniora = field.NewInt32(tableName, "minat_humaniora")
	_skorPeminatanMan.MinatBahasa = field.NewInt32(tableName, "minat_bahasa")
	_skorPeminatanMan.MinatRentang = field.NewInt32(tableName, "minat_rentang")
	_skorPeminatanMan.RekomMinat = field.NewString(tableName, "rekom_minat")
	_skorPeminatanMan.MinatAgama = field.NewInt32(tableName, "minat_agama")

	_skorPeminatanMan.fillFieldMap()

	return _skorPeminatanMan
}

type skorPeminatanMan struct {
	skorPeminatanManDo skorPeminatanManDo

	ALL            field.Asterisk
	IDUser         field.Int32
	IDQuiz         field.Int32
	MinatSains     field.Int32
	MinatHumaniora field.Int32
	MinatBahasa    field.Int32
	MinatRentang   field.Int32
	RekomMinat     field.String
	MinatAgama     field.Int32

	fieldMap map[string]field.Expr
}

func (s skorPeminatanMan) Table(newTableName string) *skorPeminatanMan {
	s.skorPeminatanManDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorPeminatanMan) As(alias string) *skorPeminatanMan {
	s.skorPeminatanManDo.DO = *(s.skorPeminatanManDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorPeminatanMan) updateTableName(table string) *skorPeminatanMan {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.MinatSains = field.NewInt32(table, "minat_sains")
	s.MinatHumaniora = field.NewInt32(table, "minat_humaniora")
	s.MinatBahasa = field.NewInt32(table, "minat_bahasa")
	s.MinatRentang = field.NewInt32(table, "minat_rentang")
	s.RekomMinat = field.NewString(table, "rekom_minat")
	s.MinatAgama = field.NewInt32(table, "minat_agama")

	s.fillFieldMap()

	return s
}

func (s *skorPeminatanMan) WithContext(ctx context.Context) *skorPeminatanManDo {
	return s.skorPeminatanManDo.WithContext(ctx)
}

func (s skorPeminatanMan) TableName() string { return s.skorPeminatanManDo.TableName() }

func (s skorPeminatanMan) Alias() string { return s.skorPeminatanManDo.Alias() }

func (s skorPeminatanMan) Columns(cols ...field.Expr) gen.Columns {
	return s.skorPeminatanManDo.Columns(cols...)
}

func (s *skorPeminatanMan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorPeminatanMan) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["minat_sains"] = s.MinatSains
	s.fieldMap["minat_humaniora"] = s.MinatHumaniora
	s.fieldMap["minat_bahasa"] = s.MinatBahasa
	s.fieldMap["minat_rentang"] = s.MinatRentang
	s.fieldMap["rekom_minat"] = s.RekomMinat
	s.fieldMap["minat_agama"] = s.MinatAgama
}

func (s skorPeminatanMan) clone(db *gorm.DB) skorPeminatanMan {
	s.skorPeminatanManDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorPeminatanMan) replaceDB(db *gorm.DB) skorPeminatanMan {
	s.skorPeminatanManDo.ReplaceDB(db)
	return s
}

type skorPeminatanManDo struct{ gen.DO }

func (s skorPeminatanManDo) Debug() *skorPeminatanManDo {
	return s.withDO(s.DO.Debug())
}

func (s skorPeminatanManDo) WithContext(ctx context.Context) *skorPeminatanManDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorPeminatanManDo) ReadDB() *skorPeminatanManDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorPeminatanManDo) WriteDB() *skorPeminatanManDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorPeminatanManDo) Session(config *gorm.Session) *skorPeminatanManDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorPeminatanManDo) Clauses(conds ...clause.Expression) *skorPeminatanManDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorPeminatanManDo) Returning(value interface{}, columns ...string) *skorPeminatanManDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorPeminatanManDo) Not(conds ...gen.Condition) *skorPeminatanManDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorPeminatanManDo) Or(conds ...gen.Condition) *skorPeminatanManDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorPeminatanManDo) Select(conds ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorPeminatanManDo) Where(conds ...gen.Condition) *skorPeminatanManDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorPeminatanManDo) Order(conds ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorPeminatanManDo) Distinct(cols ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorPeminatanManDo) Omit(cols ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorPeminatanManDo) Join(table schema.Tabler, on ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorPeminatanManDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorPeminatanManDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorPeminatanManDo) Group(cols ...field.Expr) *skorPeminatanManDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorPeminatanManDo) Having(conds ...gen.Condition) *skorPeminatanManDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorPeminatanManDo) Limit(limit int) *skorPeminatanManDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorPeminatanManDo) Offset(offset int) *skorPeminatanManDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorPeminatanManDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorPeminatanManDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorPeminatanManDo) Unscoped() *skorPeminatanManDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorPeminatanManDo) Create(values ...*entity.SkorPeminatanMan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorPeminatanManDo) CreateInBatches(values []*entity.SkorPeminatanMan, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorPeminatanManDo) Save(values ...*entity.SkorPeminatanMan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorPeminatanManDo) First() (*entity.SkorPeminatanMan, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanMan), nil
	}
}

func (s skorPeminatanManDo) Take() (*entity.SkorPeminatanMan, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanMan), nil
	}
}

func (s skorPeminatanManDo) Last() (*entity.SkorPeminatanMan, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanMan), nil
	}
}

func (s skorPeminatanManDo) Find() ([]*entity.SkorPeminatanMan, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorPeminatanMan), err
}

func (s skorPeminatanManDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorPeminatanMan, err error) {
	buf := make([]*entity.SkorPeminatanMan, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorPeminatanManDo) FindInBatches(result *[]*entity.SkorPeminatanMan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorPeminatanManDo) Attrs(attrs ...field.AssignExpr) *skorPeminatanManDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorPeminatanManDo) Assign(attrs ...field.AssignExpr) *skorPeminatanManDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorPeminatanManDo) Joins(fields ...field.RelationField) *skorPeminatanManDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorPeminatanManDo) Preload(fields ...field.RelationField) *skorPeminatanManDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorPeminatanManDo) FirstOrInit() (*entity.SkorPeminatanMan, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanMan), nil
	}
}

func (s skorPeminatanManDo) FirstOrCreate() (*entity.SkorPeminatanMan, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanMan), nil
	}
}

func (s skorPeminatanManDo) FindByPage(offset int, limit int) (result []*entity.SkorPeminatanMan, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorPeminatanManDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorPeminatanManDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorPeminatanManDo) Delete(models ...*entity.SkorPeminatanMan) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorPeminatanManDo) withDO(do gen.Dao) *skorPeminatanManDo {
	s.DO = *do.(*gen.DO)
	return s
}
