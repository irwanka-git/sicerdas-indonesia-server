// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorModeKerja(db *gorm.DB, opts ...gen.DOOption) skorModeKerja {
	_skorModeKerja := skorModeKerja{}

	_skorModeKerja.skorModeKerjaDo.UseDB(db, opts...)
	_skorModeKerja.skorModeKerjaDo.UseModel(&entity.SkorModeKerja{})

	tableName := _skorModeKerja.skorModeKerjaDo.TableName()
	_skorModeKerja.ALL = field.NewAsterisk(tableName)
	_skorModeKerja.IDUser = field.NewInt32(tableName, "id_user")
	_skorModeKerja.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorModeKerja.IDModeKerja = field.NewInt32(tableName, "id_mode_kerja")
	_skorModeKerja.Prioritas1 = field.NewString(tableName, "prioritas_1")
	_skorModeKerja.Prioritas2 = field.NewString(tableName, "prioritas_2")
	_skorModeKerja.Prioritas3 = field.NewString(tableName, "prioritas_3")
	_skorModeKerja.Prioritas4 = field.NewString(tableName, "prioritas_4")
	_skorModeKerja.Prioritas5 = field.NewString(tableName, "prioritas_5")

	_skorModeKerja.fillFieldMap()

	return _skorModeKerja
}

type skorModeKerja struct {
	skorModeKerjaDo skorModeKerjaDo

	ALL         field.Asterisk
	IDUser      field.Int32
	IDQuiz      field.Int32
	IDModeKerja field.Int32
	Prioritas1  field.String
	Prioritas2  field.String
	Prioritas3  field.String
	Prioritas4  field.String
	Prioritas5  field.String

	fieldMap map[string]field.Expr
}

func (s skorModeKerja) Table(newTableName string) *skorModeKerja {
	s.skorModeKerjaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorModeKerja) As(alias string) *skorModeKerja {
	s.skorModeKerjaDo.DO = *(s.skorModeKerjaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorModeKerja) updateTableName(table string) *skorModeKerja {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.IDModeKerja = field.NewInt32(table, "id_mode_kerja")
	s.Prioritas1 = field.NewString(table, "prioritas_1")
	s.Prioritas2 = field.NewString(table, "prioritas_2")
	s.Prioritas3 = field.NewString(table, "prioritas_3")
	s.Prioritas4 = field.NewString(table, "prioritas_4")
	s.Prioritas5 = field.NewString(table, "prioritas_5")

	s.fillFieldMap()

	return s
}

func (s *skorModeKerja) WithContext(ctx context.Context) *skorModeKerjaDo {
	return s.skorModeKerjaDo.WithContext(ctx)
}

func (s skorModeKerja) TableName() string { return s.skorModeKerjaDo.TableName() }

func (s skorModeKerja) Alias() string { return s.skorModeKerjaDo.Alias() }

func (s skorModeKerja) Columns(cols ...field.Expr) gen.Columns {
	return s.skorModeKerjaDo.Columns(cols...)
}

func (s *skorModeKerja) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorModeKerja) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["id_mode_kerja"] = s.IDModeKerja
	s.fieldMap["prioritas_1"] = s.Prioritas1
	s.fieldMap["prioritas_2"] = s.Prioritas2
	s.fieldMap["prioritas_3"] = s.Prioritas3
	s.fieldMap["prioritas_4"] = s.Prioritas4
	s.fieldMap["prioritas_5"] = s.Prioritas5
}

func (s skorModeKerja) clone(db *gorm.DB) skorModeKerja {
	s.skorModeKerjaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorModeKerja) replaceDB(db *gorm.DB) skorModeKerja {
	s.skorModeKerjaDo.ReplaceDB(db)
	return s
}

type skorModeKerjaDo struct{ gen.DO }

func (s skorModeKerjaDo) Debug() *skorModeKerjaDo {
	return s.withDO(s.DO.Debug())
}

func (s skorModeKerjaDo) WithContext(ctx context.Context) *skorModeKerjaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorModeKerjaDo) ReadDB() *skorModeKerjaDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorModeKerjaDo) WriteDB() *skorModeKerjaDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorModeKerjaDo) Session(config *gorm.Session) *skorModeKerjaDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorModeKerjaDo) Clauses(conds ...clause.Expression) *skorModeKerjaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorModeKerjaDo) Returning(value interface{}, columns ...string) *skorModeKerjaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorModeKerjaDo) Not(conds ...gen.Condition) *skorModeKerjaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorModeKerjaDo) Or(conds ...gen.Condition) *skorModeKerjaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorModeKerjaDo) Select(conds ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorModeKerjaDo) Where(conds ...gen.Condition) *skorModeKerjaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorModeKerjaDo) Order(conds ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorModeKerjaDo) Distinct(cols ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorModeKerjaDo) Omit(cols ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorModeKerjaDo) Join(table schema.Tabler, on ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorModeKerjaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorModeKerjaDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorModeKerjaDo) Group(cols ...field.Expr) *skorModeKerjaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorModeKerjaDo) Having(conds ...gen.Condition) *skorModeKerjaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorModeKerjaDo) Limit(limit int) *skorModeKerjaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorModeKerjaDo) Offset(offset int) *skorModeKerjaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorModeKerjaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorModeKerjaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorModeKerjaDo) Unscoped() *skorModeKerjaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorModeKerjaDo) Create(values ...*entity.SkorModeKerja) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorModeKerjaDo) CreateInBatches(values []*entity.SkorModeKerja, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorModeKerjaDo) Save(values ...*entity.SkorModeKerja) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorModeKerjaDo) First() (*entity.SkorModeKerja, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorModeKerja), nil
	}
}

func (s skorModeKerjaDo) Take() (*entity.SkorModeKerja, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorModeKerja), nil
	}
}

func (s skorModeKerjaDo) Last() (*entity.SkorModeKerja, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorModeKerja), nil
	}
}

func (s skorModeKerjaDo) Find() ([]*entity.SkorModeKerja, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorModeKerja), err
}

func (s skorModeKerjaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorModeKerja, err error) {
	buf := make([]*entity.SkorModeKerja, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorModeKerjaDo) FindInBatches(result *[]*entity.SkorModeKerja, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorModeKerjaDo) Attrs(attrs ...field.AssignExpr) *skorModeKerjaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorModeKerjaDo) Assign(attrs ...field.AssignExpr) *skorModeKerjaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorModeKerjaDo) Joins(fields ...field.RelationField) *skorModeKerjaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorModeKerjaDo) Preload(fields ...field.RelationField) *skorModeKerjaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorModeKerjaDo) FirstOrInit() (*entity.SkorModeKerja, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorModeKerja), nil
	}
}

func (s skorModeKerjaDo) FirstOrCreate() (*entity.SkorModeKerja, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorModeKerja), nil
	}
}

func (s skorModeKerjaDo) FindByPage(offset int, limit int) (result []*entity.SkorModeKerja, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorModeKerjaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorModeKerjaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorModeKerjaDo) Delete(models ...*entity.SkorModeKerja) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorModeKerjaDo) withDO(do gen.Dao) *skorModeKerjaDo {
	s.DO = *do.(*gen.DO)
	return s
}
