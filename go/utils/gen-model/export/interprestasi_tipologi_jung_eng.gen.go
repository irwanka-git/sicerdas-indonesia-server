// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newInterprestasiTipologiJungEng(db *gorm.DB, opts ...gen.DOOption) interprestasiTipologiJungEng {
	_interprestasiTipologiJungEng := interprestasiTipologiJungEng{}

	_interprestasiTipologiJungEng.interprestasiTipologiJungEngDo.UseDB(db, opts...)
	_interprestasiTipologiJungEng.interprestasiTipologiJungEngDo.UseModel(&entity.InterprestasiTipologiJungEng{})

	tableName := _interprestasiTipologiJungEng.interprestasiTipologiJungEngDo.TableName()
	_interprestasiTipologiJungEng.ALL = field.NewAsterisk(tableName)
	_interprestasiTipologiJungEng.IDInterprestasi = field.NewInt32(tableName, "id_interprestasi")
	_interprestasiTipologiJungEng.Urutan = field.NewInt32(tableName, "urutan")
	_interprestasiTipologiJungEng.Kode = field.NewString(tableName, "kode")
	_interprestasiTipologiJungEng.Nama = field.NewString(tableName, "nama")
	_interprestasiTipologiJungEng.Keterangan = field.NewString(tableName, "keterangan")
	_interprestasiTipologiJungEng.Deskripsi = field.NewString(tableName, "deskripsi")
	_interprestasiTipologiJungEng.UUID = field.NewString(tableName, "uuid")

	_interprestasiTipologiJungEng.fillFieldMap()

	return _interprestasiTipologiJungEng
}

type interprestasiTipologiJungEng struct {
	interprestasiTipologiJungEngDo interprestasiTipologiJungEngDo

	ALL             field.Asterisk
	IDInterprestasi field.Int32
	Urutan          field.Int32
	Kode            field.String
	Nama            field.String
	Keterangan      field.String
	Deskripsi       field.String
	UUID            field.String

	fieldMap map[string]field.Expr
}

func (i interprestasiTipologiJungEng) Table(newTableName string) *interprestasiTipologiJungEng {
	i.interprestasiTipologiJungEngDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i interprestasiTipologiJungEng) As(alias string) *interprestasiTipologiJungEng {
	i.interprestasiTipologiJungEngDo.DO = *(i.interprestasiTipologiJungEngDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *interprestasiTipologiJungEng) updateTableName(table string) *interprestasiTipologiJungEng {
	i.ALL = field.NewAsterisk(table)
	i.IDInterprestasi = field.NewInt32(table, "id_interprestasi")
	i.Urutan = field.NewInt32(table, "urutan")
	i.Kode = field.NewString(table, "kode")
	i.Nama = field.NewString(table, "nama")
	i.Keterangan = field.NewString(table, "keterangan")
	i.Deskripsi = field.NewString(table, "deskripsi")
	i.UUID = field.NewString(table, "uuid")

	i.fillFieldMap()

	return i
}

func (i *interprestasiTipologiJungEng) WithContext(ctx context.Context) *interprestasiTipologiJungEngDo {
	return i.interprestasiTipologiJungEngDo.WithContext(ctx)
}

func (i interprestasiTipologiJungEng) TableName() string {
	return i.interprestasiTipologiJungEngDo.TableName()
}

func (i interprestasiTipologiJungEng) Alias() string { return i.interprestasiTipologiJungEngDo.Alias() }

func (i interprestasiTipologiJungEng) Columns(cols ...field.Expr) gen.Columns {
	return i.interprestasiTipologiJungEngDo.Columns(cols...)
}

func (i *interprestasiTipologiJungEng) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *interprestasiTipologiJungEng) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id_interprestasi"] = i.IDInterprestasi
	i.fieldMap["urutan"] = i.Urutan
	i.fieldMap["kode"] = i.Kode
	i.fieldMap["nama"] = i.Nama
	i.fieldMap["keterangan"] = i.Keterangan
	i.fieldMap["deskripsi"] = i.Deskripsi
	i.fieldMap["uuid"] = i.UUID
}

func (i interprestasiTipologiJungEng) clone(db *gorm.DB) interprestasiTipologiJungEng {
	i.interprestasiTipologiJungEngDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i interprestasiTipologiJungEng) replaceDB(db *gorm.DB) interprestasiTipologiJungEng {
	i.interprestasiTipologiJungEngDo.ReplaceDB(db)
	return i
}

type interprestasiTipologiJungEngDo struct{ gen.DO }

func (i interprestasiTipologiJungEngDo) Debug() *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Debug())
}

func (i interprestasiTipologiJungEngDo) WithContext(ctx context.Context) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i interprestasiTipologiJungEngDo) ReadDB() *interprestasiTipologiJungEngDo {
	return i.Clauses(dbresolver.Read)
}

func (i interprestasiTipologiJungEngDo) WriteDB() *interprestasiTipologiJungEngDo {
	return i.Clauses(dbresolver.Write)
}

func (i interprestasiTipologiJungEngDo) Session(config *gorm.Session) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Session(config))
}

func (i interprestasiTipologiJungEngDo) Clauses(conds ...clause.Expression) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i interprestasiTipologiJungEngDo) Returning(value interface{}, columns ...string) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i interprestasiTipologiJungEngDo) Not(conds ...gen.Condition) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i interprestasiTipologiJungEngDo) Or(conds ...gen.Condition) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i interprestasiTipologiJungEngDo) Select(conds ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i interprestasiTipologiJungEngDo) Where(conds ...gen.Condition) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i interprestasiTipologiJungEngDo) Order(conds ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i interprestasiTipologiJungEngDo) Distinct(cols ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i interprestasiTipologiJungEngDo) Omit(cols ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i interprestasiTipologiJungEngDo) Join(table schema.Tabler, on ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i interprestasiTipologiJungEngDo) LeftJoin(table schema.Tabler, on ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i interprestasiTipologiJungEngDo) RightJoin(table schema.Tabler, on ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i interprestasiTipologiJungEngDo) Group(cols ...field.Expr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i interprestasiTipologiJungEngDo) Having(conds ...gen.Condition) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i interprestasiTipologiJungEngDo) Limit(limit int) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i interprestasiTipologiJungEngDo) Offset(offset int) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i interprestasiTipologiJungEngDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i interprestasiTipologiJungEngDo) Unscoped() *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Unscoped())
}

func (i interprestasiTipologiJungEngDo) Create(values ...*entity.InterprestasiTipologiJungEng) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i interprestasiTipologiJungEngDo) CreateInBatches(values []*entity.InterprestasiTipologiJungEng, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i interprestasiTipologiJungEngDo) Save(values ...*entity.InterprestasiTipologiJungEng) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i interprestasiTipologiJungEngDo) First() (*entity.InterprestasiTipologiJungEng, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJungEng), nil
	}
}

func (i interprestasiTipologiJungEngDo) Take() (*entity.InterprestasiTipologiJungEng, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJungEng), nil
	}
}

func (i interprestasiTipologiJungEngDo) Last() (*entity.InterprestasiTipologiJungEng, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJungEng), nil
	}
}

func (i interprestasiTipologiJungEngDo) Find() ([]*entity.InterprestasiTipologiJungEng, error) {
	result, err := i.DO.Find()
	return result.([]*entity.InterprestasiTipologiJungEng), err
}

func (i interprestasiTipologiJungEngDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.InterprestasiTipologiJungEng, err error) {
	buf := make([]*entity.InterprestasiTipologiJungEng, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i interprestasiTipologiJungEngDo) FindInBatches(result *[]*entity.InterprestasiTipologiJungEng, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i interprestasiTipologiJungEngDo) Attrs(attrs ...field.AssignExpr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i interprestasiTipologiJungEngDo) Assign(attrs ...field.AssignExpr) *interprestasiTipologiJungEngDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i interprestasiTipologiJungEngDo) Joins(fields ...field.RelationField) *interprestasiTipologiJungEngDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i interprestasiTipologiJungEngDo) Preload(fields ...field.RelationField) *interprestasiTipologiJungEngDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i interprestasiTipologiJungEngDo) FirstOrInit() (*entity.InterprestasiTipologiJungEng, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJungEng), nil
	}
}

func (i interprestasiTipologiJungEngDo) FirstOrCreate() (*entity.InterprestasiTipologiJungEng, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJungEng), nil
	}
}

func (i interprestasiTipologiJungEngDo) FindByPage(offset int, limit int) (result []*entity.InterprestasiTipologiJungEng, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i interprestasiTipologiJungEngDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i interprestasiTipologiJungEngDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i interprestasiTipologiJungEngDo) Delete(models ...*entity.InterprestasiTipologiJungEng) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *interprestasiTipologiJungEngDo) withDO(do gen.Dao) *interprestasiTipologiJungEngDo {
	i.DO = *do.(*gen.DO)
	return i
}
