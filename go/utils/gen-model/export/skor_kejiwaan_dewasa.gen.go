// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorKejiwaanDewasa(db *gorm.DB, opts ...gen.DOOption) skorKejiwaanDewasa {
	_skorKejiwaanDewasa := skorKejiwaanDewasa{}

	_skorKejiwaanDewasa.skorKejiwaanDewasaDo.UseDB(db, opts...)
	_skorKejiwaanDewasa.skorKejiwaanDewasaDo.UseModel(&entity.SkorKejiwaanDewasa{})

	tableName := _skorKejiwaanDewasa.skorKejiwaanDewasaDo.TableName()
	_skorKejiwaanDewasa.ALL = field.NewAsterisk(tableName)
	_skorKejiwaanDewasa.IDUser = field.NewInt32(tableName, "id_user")
	_skorKejiwaanDewasa.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorKejiwaanDewasa.SkorDepresi = field.NewInt32(tableName, "skor_depresi")
	_skorKejiwaanDewasa.SkorKecemasan = field.NewInt32(tableName, "skor_kecemasan")
	_skorKejiwaanDewasa.SkorManipulatif = field.NewInt32(tableName, "skor_manipulatif")
	_skorKejiwaanDewasa.SkorParanoid = field.NewInt32(tableName, "skor_paranoid")
	_skorKejiwaanDewasa.SkorPsikopat = field.NewInt32(tableName, "skor_psikopat")
	_skorKejiwaanDewasa.SkorScizopernia = field.NewInt32(tableName, "skor_scizopernia")
	_skorKejiwaanDewasa.SkorHisteria = field.NewInt32(tableName, "skor_histeria")
	_skorKejiwaanDewasa.SkorHipokratis = field.NewInt32(tableName, "skor_hipokratis")
	_skorKejiwaanDewasa.SkorHipomania = field.NewInt32(tableName, "skor_hipomania")
	_skorKejiwaanDewasa.SkorImpulsif = field.NewInt32(tableName, "skor_impulsif")
	_skorKejiwaanDewasa.NilaiDepresi = field.NewInt32(tableName, "nilai_depresi")
	_skorKejiwaanDewasa.NilaiKecemasan = field.NewInt32(tableName, "nilai_kecemasan")
	_skorKejiwaanDewasa.NilaiManipulatif = field.NewInt32(tableName, "nilai_manipulatif")
	_skorKejiwaanDewasa.NilaiParanoid = field.NewInt32(tableName, "nilai_paranoid")
	_skorKejiwaanDewasa.NilaiPsikopat = field.NewInt32(tableName, "nilai_psikopat")
	_skorKejiwaanDewasa.NilaiScizopernia = field.NewInt32(tableName, "nilai_scizopernia")
	_skorKejiwaanDewasa.NilaiHisteria = field.NewInt32(tableName, "nilai_histeria")
	_skorKejiwaanDewasa.NilaiHipokratis = field.NewInt32(tableName, "nilai_hipokratis")
	_skorKejiwaanDewasa.NilaiHipomania = field.NewInt32(tableName, "nilai_hipomania")
	_skorKejiwaanDewasa.NilaiImpulsif = field.NewInt32(tableName, "nilai_impulsif")

	_skorKejiwaanDewasa.fillFieldMap()

	return _skorKejiwaanDewasa
}

type skorKejiwaanDewasa struct {
	skorKejiwaanDewasaDo skorKejiwaanDewasaDo

	ALL              field.Asterisk
	IDUser           field.Int32
	IDQuiz           field.Int32
	SkorDepresi      field.Int32
	SkorKecemasan    field.Int32
	SkorManipulatif  field.Int32
	SkorParanoid     field.Int32
	SkorPsikopat     field.Int32
	SkorScizopernia  field.Int32
	SkorHisteria     field.Int32
	SkorHipokratis   field.Int32
	SkorHipomania    field.Int32
	SkorImpulsif     field.Int32
	NilaiDepresi     field.Int32
	NilaiKecemasan   field.Int32
	NilaiManipulatif field.Int32
	NilaiParanoid    field.Int32
	NilaiPsikopat    field.Int32
	NilaiScizopernia field.Int32
	NilaiHisteria    field.Int32
	NilaiHipokratis  field.Int32
	NilaiHipomania   field.Int32
	NilaiImpulsif    field.Int32

	fieldMap map[string]field.Expr
}

func (s skorKejiwaanDewasa) Table(newTableName string) *skorKejiwaanDewasa {
	s.skorKejiwaanDewasaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorKejiwaanDewasa) As(alias string) *skorKejiwaanDewasa {
	s.skorKejiwaanDewasaDo.DO = *(s.skorKejiwaanDewasaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorKejiwaanDewasa) updateTableName(table string) *skorKejiwaanDewasa {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.SkorDepresi = field.NewInt32(table, "skor_depresi")
	s.SkorKecemasan = field.NewInt32(table, "skor_kecemasan")
	s.SkorManipulatif = field.NewInt32(table, "skor_manipulatif")
	s.SkorParanoid = field.NewInt32(table, "skor_paranoid")
	s.SkorPsikopat = field.NewInt32(table, "skor_psikopat")
	s.SkorScizopernia = field.NewInt32(table, "skor_scizopernia")
	s.SkorHisteria = field.NewInt32(table, "skor_histeria")
	s.SkorHipokratis = field.NewInt32(table, "skor_hipokratis")
	s.SkorHipomania = field.NewInt32(table, "skor_hipomania")
	s.SkorImpulsif = field.NewInt32(table, "skor_impulsif")
	s.NilaiDepresi = field.NewInt32(table, "nilai_depresi")
	s.NilaiKecemasan = field.NewInt32(table, "nilai_kecemasan")
	s.NilaiManipulatif = field.NewInt32(table, "nilai_manipulatif")
	s.NilaiParanoid = field.NewInt32(table, "nilai_paranoid")
	s.NilaiPsikopat = field.NewInt32(table, "nilai_psikopat")
	s.NilaiScizopernia = field.NewInt32(table, "nilai_scizopernia")
	s.NilaiHisteria = field.NewInt32(table, "nilai_histeria")
	s.NilaiHipokratis = field.NewInt32(table, "nilai_hipokratis")
	s.NilaiHipomania = field.NewInt32(table, "nilai_hipomania")
	s.NilaiImpulsif = field.NewInt32(table, "nilai_impulsif")

	s.fillFieldMap()

	return s
}

func (s *skorKejiwaanDewasa) WithContext(ctx context.Context) *skorKejiwaanDewasaDo {
	return s.skorKejiwaanDewasaDo.WithContext(ctx)
}

func (s skorKejiwaanDewasa) TableName() string { return s.skorKejiwaanDewasaDo.TableName() }

func (s skorKejiwaanDewasa) Alias() string { return s.skorKejiwaanDewasaDo.Alias() }

func (s skorKejiwaanDewasa) Columns(cols ...field.Expr) gen.Columns {
	return s.skorKejiwaanDewasaDo.Columns(cols...)
}

func (s *skorKejiwaanDewasa) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorKejiwaanDewasa) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 22)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["skor_depresi"] = s.SkorDepresi
	s.fieldMap["skor_kecemasan"] = s.SkorKecemasan
	s.fieldMap["skor_manipulatif"] = s.SkorManipulatif
	s.fieldMap["skor_paranoid"] = s.SkorParanoid
	s.fieldMap["skor_psikopat"] = s.SkorPsikopat
	s.fieldMap["skor_scizopernia"] = s.SkorScizopernia
	s.fieldMap["skor_histeria"] = s.SkorHisteria
	s.fieldMap["skor_hipokratis"] = s.SkorHipokratis
	s.fieldMap["skor_hipomania"] = s.SkorHipomania
	s.fieldMap["skor_impulsif"] = s.SkorImpulsif
	s.fieldMap["nilai_depresi"] = s.NilaiDepresi
	s.fieldMap["nilai_kecemasan"] = s.NilaiKecemasan
	s.fieldMap["nilai_manipulatif"] = s.NilaiManipulatif
	s.fieldMap["nilai_paranoid"] = s.NilaiParanoid
	s.fieldMap["nilai_psikopat"] = s.NilaiPsikopat
	s.fieldMap["nilai_scizopernia"] = s.NilaiScizopernia
	s.fieldMap["nilai_histeria"] = s.NilaiHisteria
	s.fieldMap["nilai_hipokratis"] = s.NilaiHipokratis
	s.fieldMap["nilai_hipomania"] = s.NilaiHipomania
	s.fieldMap["nilai_impulsif"] = s.NilaiImpulsif
}

func (s skorKejiwaanDewasa) clone(db *gorm.DB) skorKejiwaanDewasa {
	s.skorKejiwaanDewasaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorKejiwaanDewasa) replaceDB(db *gorm.DB) skorKejiwaanDewasa {
	s.skorKejiwaanDewasaDo.ReplaceDB(db)
	return s
}

type skorKejiwaanDewasaDo struct{ gen.DO }

func (s skorKejiwaanDewasaDo) Debug() *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Debug())
}

func (s skorKejiwaanDewasaDo) WithContext(ctx context.Context) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorKejiwaanDewasaDo) ReadDB() *skorKejiwaanDewasaDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorKejiwaanDewasaDo) WriteDB() *skorKejiwaanDewasaDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorKejiwaanDewasaDo) Session(config *gorm.Session) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorKejiwaanDewasaDo) Clauses(conds ...clause.Expression) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorKejiwaanDewasaDo) Returning(value interface{}, columns ...string) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorKejiwaanDewasaDo) Not(conds ...gen.Condition) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorKejiwaanDewasaDo) Or(conds ...gen.Condition) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorKejiwaanDewasaDo) Select(conds ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorKejiwaanDewasaDo) Where(conds ...gen.Condition) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorKejiwaanDewasaDo) Order(conds ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorKejiwaanDewasaDo) Distinct(cols ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorKejiwaanDewasaDo) Omit(cols ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorKejiwaanDewasaDo) Join(table schema.Tabler, on ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorKejiwaanDewasaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorKejiwaanDewasaDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorKejiwaanDewasaDo) Group(cols ...field.Expr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorKejiwaanDewasaDo) Having(conds ...gen.Condition) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorKejiwaanDewasaDo) Limit(limit int) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorKejiwaanDewasaDo) Offset(offset int) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorKejiwaanDewasaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorKejiwaanDewasaDo) Unscoped() *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorKejiwaanDewasaDo) Create(values ...*entity.SkorKejiwaanDewasa) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorKejiwaanDewasaDo) CreateInBatches(values []*entity.SkorKejiwaanDewasa, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorKejiwaanDewasaDo) Save(values ...*entity.SkorKejiwaanDewasa) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorKejiwaanDewasaDo) First() (*entity.SkorKejiwaanDewasa, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKejiwaanDewasa), nil
	}
}

func (s skorKejiwaanDewasaDo) Take() (*entity.SkorKejiwaanDewasa, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKejiwaanDewasa), nil
	}
}

func (s skorKejiwaanDewasaDo) Last() (*entity.SkorKejiwaanDewasa, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKejiwaanDewasa), nil
	}
}

func (s skorKejiwaanDewasaDo) Find() ([]*entity.SkorKejiwaanDewasa, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorKejiwaanDewasa), err
}

func (s skorKejiwaanDewasaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorKejiwaanDewasa, err error) {
	buf := make([]*entity.SkorKejiwaanDewasa, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorKejiwaanDewasaDo) FindInBatches(result *[]*entity.SkorKejiwaanDewasa, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorKejiwaanDewasaDo) Attrs(attrs ...field.AssignExpr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorKejiwaanDewasaDo) Assign(attrs ...field.AssignExpr) *skorKejiwaanDewasaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorKejiwaanDewasaDo) Joins(fields ...field.RelationField) *skorKejiwaanDewasaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorKejiwaanDewasaDo) Preload(fields ...field.RelationField) *skorKejiwaanDewasaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorKejiwaanDewasaDo) FirstOrInit() (*entity.SkorKejiwaanDewasa, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKejiwaanDewasa), nil
	}
}

func (s skorKejiwaanDewasaDo) FirstOrCreate() (*entity.SkorKejiwaanDewasa, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKejiwaanDewasa), nil
	}
}

func (s skorKejiwaanDewasaDo) FindByPage(offset int, limit int) (result []*entity.SkorKejiwaanDewasa, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorKejiwaanDewasaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorKejiwaanDewasaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorKejiwaanDewasaDo) Delete(models ...*entity.SkorKejiwaanDewasa) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorKejiwaanDewasaDo) withDO(do gen.Dao) *skorKejiwaanDewasaDo {
	s.DO = *do.(*gen.DO)
	return s
}
