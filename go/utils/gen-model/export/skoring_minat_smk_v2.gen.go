// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkoringMinatSmkV2(db *gorm.DB, opts ...gen.DOOption) skoringMinatSmkV2 {
	_skoringMinatSmkV2 := skoringMinatSmkV2{}

	_skoringMinatSmkV2.skoringMinatSmkV2Do.UseDB(db, opts...)
	_skoringMinatSmkV2.skoringMinatSmkV2Do.UseModel(&entity.SkoringMinatSmkV2{})

	tableName := _skoringMinatSmkV2.skoringMinatSmkV2Do.TableName()
	_skoringMinatSmkV2.ALL = field.NewAsterisk(tableName)
	_skoringMinatSmkV2.ID = field.NewInt32(tableName, "id")
	_skoringMinatSmkV2.IDUser = field.NewInt32(tableName, "id_user")
	_skoringMinatSmkV2.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skoringMinatSmkV2.TpaIu = field.NewInt32(tableName, "tpa_iu")
	_skoringMinatSmkV2.TpaPv = field.NewInt32(tableName, "tpa_pv")
	_skoringMinatSmkV2.TpaPk = field.NewInt32(tableName, "tpa_pk")
	_skoringMinatSmkV2.TpaPa = field.NewInt32(tableName, "tpa_pa")
	_skoringMinatSmkV2.TpaPs = field.NewInt32(tableName, "tpa_ps")
	_skoringMinatSmkV2.TpaPm = field.NewInt32(tableName, "tpa_pm")
	_skoringMinatSmkV2.TpaKt = field.NewInt32(tableName, "tpa_kt")
	_skoringMinatSmkV2.TpaIq = field.NewInt32(tableName, "tpa_iq")
	_skoringMinatSmkV2.SkorIq = field.NewFloat32(tableName, "skor_iq")
	_skoringMinatSmkV2.Minat1 = field.NewString(tableName, "minat_1")
	_skoringMinatSmkV2.Minat2 = field.NewString(tableName, "minat_2")
	_skoringMinatSmkV2.Minat3 = field.NewString(tableName, "minat_3")
	_skoringMinatSmkV2.Minat4 = field.NewString(tableName, "minat_4")
	_skoringMinatSmkV2.Minat5 = field.NewString(tableName, "minat_5")
	_skoringMinatSmkV2.PribadiMotivasi = field.NewInt32(tableName, "pribadi_motivasi")
	_skoringMinatSmkV2.PribadiJuang = field.NewInt32(tableName, "pribadi_juang")
	_skoringMinatSmkV2.PribadiYakin = field.NewInt32(tableName, "pribadi_yakin")
	_skoringMinatSmkV2.PribadiPercaya = field.NewInt32(tableName, "pribadi_percaya")
	_skoringMinatSmkV2.PribadiKonsep = field.NewInt32(tableName, "pribadi_konsep")
	_skoringMinatSmkV2.PribadiKreativitas = field.NewInt32(tableName, "pribadi_kreativitas")
	_skoringMinatSmkV2.PribadiMimpin = field.NewInt32(tableName, "pribadi_mimpin")
	_skoringMinatSmkV2.PribadiEntrepreneur = field.NewInt32(tableName, "pribadi_entrepreneur")
	_skoringMinatSmkV2.PribadiStress = field.NewInt32(tableName, "pribadi_stress")
	_skoringMinatSmkV2.PribadiEmosi = field.NewInt32(tableName, "pribadi_emosi")
	_skoringMinatSmkV2.PribadiSosial = field.NewInt32(tableName, "pribadi_sosial")
	_skoringMinatSmkV2.PribadiEmpati = field.NewInt32(tableName, "pribadi_empati")
	_skoringMinatSmkV2.RekomAkhir = field.NewString(tableName, "rekom_akhir")
	_skoringMinatSmkV2.SelesaiSkoring = field.NewInt32(tableName, "selesai_skoring")
	_skoringMinatSmkV2.MinatIpa1 = field.NewInt16(tableName, "minat_ipa1")
	_skoringMinatSmkV2.MinatIpa2 = field.NewInt16(tableName, "minat_ipa2")
	_skoringMinatSmkV2.MinatIpa3 = field.NewInt16(tableName, "minat_ipa3")
	_skoringMinatSmkV2.MinatIpa4 = field.NewInt16(tableName, "minat_ipa4")
	_skoringMinatSmkV2.MinatIpa5 = field.NewInt16(tableName, "minat_ipa5")
	_skoringMinatSmkV2.MinatIps1 = field.NewInt16(tableName, "minat_ips1")
	_skoringMinatSmkV2.MinatIps2 = field.NewInt16(tableName, "minat_ips2")
	_skoringMinatSmkV2.MinatIps3 = field.NewInt16(tableName, "minat_ips3")
	_skoringMinatSmkV2.MinatIps4 = field.NewInt16(tableName, "minat_ips4")
	_skoringMinatSmkV2.MinatIps5 = field.NewInt16(tableName, "minat_ips5")
	_skoringMinatSmkV2.GpA = field.NewInt32(tableName, "gp_a")
	_skoringMinatSmkV2.GpB = field.NewInt32(tableName, "gp_b")
	_skoringMinatSmkV2.GpC = field.NewInt32(tableName, "gp_c")
	_skoringMinatSmkV2.GpD = field.NewInt32(tableName, "gp_d")
	_skoringMinatSmkV2.GpE = field.NewInt32(tableName, "gp_e")
	_skoringMinatSmkV2.GpF = field.NewInt32(tableName, "gp_f")
	_skoringMinatSmkV2.GpG = field.NewInt32(tableName, "gp_g")
	_skoringMinatSmkV2.GpH = field.NewInt32(tableName, "gp_h")
	_skoringMinatSmkV2.GpI = field.NewInt32(tableName, "gp_i")
	_skoringMinatSmkV2.GpJ = field.NewInt32(tableName, "gp_j")
	_skoringMinatSmkV2.GpK = field.NewInt32(tableName, "gp_k")
	_skoringMinatSmkV2.GpL = field.NewInt32(tableName, "gp_l")
	_skoringMinatSmkV2.RangkingGp1 = field.NewString(tableName, "rangking_gp1")
	_skoringMinatSmkV2.RangkingGp2 = field.NewString(tableName, "rangking_gp2")
	_skoringMinatSmkV2.RangkingGp3 = field.NewString(tableName, "rangking_gp3")
	_skoringMinatSmkV2.Km1 = field.NewString(tableName, "km_1")
	_skoringMinatSmkV2.Km2 = field.NewString(tableName, "km_2")
	_skoringMinatSmkV2.Km3 = field.NewString(tableName, "km_3")
	_skoringMinatSmkV2.Km4 = field.NewString(tableName, "km_4")
	_skoringMinatSmkV2.Km5 = field.NewString(tableName, "km_5")
	_skoringMinatSmkV2.Minat6 = field.NewString(tableName, "minat_6")
	_skoringMinatSmkV2.Minat7 = field.NewString(tableName, "minat_7")
	_skoringMinatSmkV2.Minat8 = field.NewString(tableName, "minat_8")
	_skoringMinatSmkV2.Minat9 = field.NewString(tableName, "minat_9")
	_skoringMinatSmkV2.Minat10 = field.NewString(tableName, "minat_10")

	_skoringMinatSmkV2.fillFieldMap()

	return _skoringMinatSmkV2
}

type skoringMinatSmkV2 struct {
	skoringMinatSmkV2Do skoringMinatSmkV2Do

	ALL                 field.Asterisk
	ID                  field.Int32
	IDUser              field.Int32
	IDQuiz              field.Int32
	TpaIu               field.Int32
	TpaPv               field.Int32
	TpaPk               field.Int32
	TpaPa               field.Int32
	TpaPs               field.Int32
	TpaPm               field.Int32
	TpaKt               field.Int32
	TpaIq               field.Int32
	SkorIq              field.Float32
	Minat1              field.String
	Minat2              field.String
	Minat3              field.String
	Minat4              field.String
	Minat5              field.String
	PribadiMotivasi     field.Int32
	PribadiJuang        field.Int32
	PribadiYakin        field.Int32
	PribadiPercaya      field.Int32
	PribadiKonsep       field.Int32
	PribadiKreativitas  field.Int32
	PribadiMimpin       field.Int32
	PribadiEntrepreneur field.Int32
	PribadiStress       field.Int32
	PribadiEmosi        field.Int32
	PribadiSosial       field.Int32
	PribadiEmpati       field.Int32
	RekomAkhir          field.String
	SelesaiSkoring      field.Int32
	MinatIpa1           field.Int16 // Minat Kuliah ILMU ALAM - 1
	MinatIpa2           field.Int16 // Minat Kuliah ILMU ALAM - 2
	MinatIpa3           field.Int16 // Minat Kuliah ILMU ALAM - 3
	MinatIpa4           field.Int16 // Minat Kuliah ULMU ALAM - 4
	MinatIpa5           field.Int16 // Minat Kuliah ILMU ALAM - 5
	MinatIps1           field.Int16 // Minat Kuliah ILMU SOSIAL - 1
	MinatIps2           field.Int16 // Minat Kuliah ILMU SOSIAL - 2
	MinatIps3           field.Int16 // Minat Kuliah ILMU SOSIAL - 3
	MinatIps4           field.Int16 // Minat Kuliah ILMU SOSIAL - 4
	MinatIps5           field.Int16 // Minat Kuliah ILMU SOSIAL -5
	GpA                 field.Int32
	GpB                 field.Int32
	GpC                 field.Int32
	GpD                 field.Int32
	GpE                 field.Int32
	GpF                 field.Int32
	GpG                 field.Int32
	GpH                 field.Int32
	GpI                 field.Int32
	GpJ                 field.Int32
	GpK                 field.Int32
	GpL                 field.Int32
	RangkingGp1         field.String
	RangkingGp2         field.String
	RangkingGp3         field.String
	Km1                 field.String
	Km2                 field.String
	Km3                 field.String
	Km4                 field.String
	Km5                 field.String
	Minat6              field.String
	Minat7              field.String
	Minat8              field.String
	Minat9              field.String
	Minat10             field.String

	fieldMap map[string]field.Expr
}

func (s skoringMinatSmkV2) Table(newTableName string) *skoringMinatSmkV2 {
	s.skoringMinatSmkV2Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skoringMinatSmkV2) As(alias string) *skoringMinatSmkV2 {
	s.skoringMinatSmkV2Do.DO = *(s.skoringMinatSmkV2Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skoringMinatSmkV2) updateTableName(table string) *skoringMinatSmkV2 {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TpaIu = field.NewInt32(table, "tpa_iu")
	s.TpaPv = field.NewInt32(table, "tpa_pv")
	s.TpaPk = field.NewInt32(table, "tpa_pk")
	s.TpaPa = field.NewInt32(table, "tpa_pa")
	s.TpaPs = field.NewInt32(table, "tpa_ps")
	s.TpaPm = field.NewInt32(table, "tpa_pm")
	s.TpaKt = field.NewInt32(table, "tpa_kt")
	s.TpaIq = field.NewInt32(table, "tpa_iq")
	s.SkorIq = field.NewFloat32(table, "skor_iq")
	s.Minat1 = field.NewString(table, "minat_1")
	s.Minat2 = field.NewString(table, "minat_2")
	s.Minat3 = field.NewString(table, "minat_3")
	s.Minat4 = field.NewString(table, "minat_4")
	s.Minat5 = field.NewString(table, "minat_5")
	s.PribadiMotivasi = field.NewInt32(table, "pribadi_motivasi")
	s.PribadiJuang = field.NewInt32(table, "pribadi_juang")
	s.PribadiYakin = field.NewInt32(table, "pribadi_yakin")
	s.PribadiPercaya = field.NewInt32(table, "pribadi_percaya")
	s.PribadiKonsep = field.NewInt32(table, "pribadi_konsep")
	s.PribadiKreativitas = field.NewInt32(table, "pribadi_kreativitas")
	s.PribadiMimpin = field.NewInt32(table, "pribadi_mimpin")
	s.PribadiEntrepreneur = field.NewInt32(table, "pribadi_entrepreneur")
	s.PribadiStress = field.NewInt32(table, "pribadi_stress")
	s.PribadiEmosi = field.NewInt32(table, "pribadi_emosi")
	s.PribadiSosial = field.NewInt32(table, "pribadi_sosial")
	s.PribadiEmpati = field.NewInt32(table, "pribadi_empati")
	s.RekomAkhir = field.NewString(table, "rekom_akhir")
	s.SelesaiSkoring = field.NewInt32(table, "selesai_skoring")
	s.MinatIpa1 = field.NewInt16(table, "minat_ipa1")
	s.MinatIpa2 = field.NewInt16(table, "minat_ipa2")
	s.MinatIpa3 = field.NewInt16(table, "minat_ipa3")
	s.MinatIpa4 = field.NewInt16(table, "minat_ipa4")
	s.MinatIpa5 = field.NewInt16(table, "minat_ipa5")
	s.MinatIps1 = field.NewInt16(table, "minat_ips1")
	s.MinatIps2 = field.NewInt16(table, "minat_ips2")
	s.MinatIps3 = field.NewInt16(table, "minat_ips3")
	s.MinatIps4 = field.NewInt16(table, "minat_ips4")
	s.MinatIps5 = field.NewInt16(table, "minat_ips5")
	s.GpA = field.NewInt32(table, "gp_a")
	s.GpB = field.NewInt32(table, "gp_b")
	s.GpC = field.NewInt32(table, "gp_c")
	s.GpD = field.NewInt32(table, "gp_d")
	s.GpE = field.NewInt32(table, "gp_e")
	s.GpF = field.NewInt32(table, "gp_f")
	s.GpG = field.NewInt32(table, "gp_g")
	s.GpH = field.NewInt32(table, "gp_h")
	s.GpI = field.NewInt32(table, "gp_i")
	s.GpJ = field.NewInt32(table, "gp_j")
	s.GpK = field.NewInt32(table, "gp_k")
	s.GpL = field.NewInt32(table, "gp_l")
	s.RangkingGp1 = field.NewString(table, "rangking_gp1")
	s.RangkingGp2 = field.NewString(table, "rangking_gp2")
	s.RangkingGp3 = field.NewString(table, "rangking_gp3")
	s.Km1 = field.NewString(table, "km_1")
	s.Km2 = field.NewString(table, "km_2")
	s.Km3 = field.NewString(table, "km_3")
	s.Km4 = field.NewString(table, "km_4")
	s.Km5 = field.NewString(table, "km_5")
	s.Minat6 = field.NewString(table, "minat_6")
	s.Minat7 = field.NewString(table, "minat_7")
	s.Minat8 = field.NewString(table, "minat_8")
	s.Minat9 = field.NewString(table, "minat_9")
	s.Minat10 = field.NewString(table, "minat_10")

	s.fillFieldMap()

	return s
}

func (s *skoringMinatSmkV2) WithContext(ctx context.Context) *skoringMinatSmkV2Do {
	return s.skoringMinatSmkV2Do.WithContext(ctx)
}

func (s skoringMinatSmkV2) TableName() string { return s.skoringMinatSmkV2Do.TableName() }

func (s skoringMinatSmkV2) Alias() string { return s.skoringMinatSmkV2Do.Alias() }

func (s skoringMinatSmkV2) Columns(cols ...field.Expr) gen.Columns {
	return s.skoringMinatSmkV2Do.Columns(cols...)
}

func (s *skoringMinatSmkV2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skoringMinatSmkV2) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 66)
	s.fieldMap["id"] = s.ID
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tpa_iu"] = s.TpaIu
	s.fieldMap["tpa_pv"] = s.TpaPv
	s.fieldMap["tpa_pk"] = s.TpaPk
	s.fieldMap["tpa_pa"] = s.TpaPa
	s.fieldMap["tpa_ps"] = s.TpaPs
	s.fieldMap["tpa_pm"] = s.TpaPm
	s.fieldMap["tpa_kt"] = s.TpaKt
	s.fieldMap["tpa_iq"] = s.TpaIq
	s.fieldMap["skor_iq"] = s.SkorIq
	s.fieldMap["minat_1"] = s.Minat1
	s.fieldMap["minat_2"] = s.Minat2
	s.fieldMap["minat_3"] = s.Minat3
	s.fieldMap["minat_4"] = s.Minat4
	s.fieldMap["minat_5"] = s.Minat5
	s.fieldMap["pribadi_motivasi"] = s.PribadiMotivasi
	s.fieldMap["pribadi_juang"] = s.PribadiJuang
	s.fieldMap["pribadi_yakin"] = s.PribadiYakin
	s.fieldMap["pribadi_percaya"] = s.PribadiPercaya
	s.fieldMap["pribadi_konsep"] = s.PribadiKonsep
	s.fieldMap["pribadi_kreativitas"] = s.PribadiKreativitas
	s.fieldMap["pribadi_mimpin"] = s.PribadiMimpin
	s.fieldMap["pribadi_entrepreneur"] = s.PribadiEntrepreneur
	s.fieldMap["pribadi_stress"] = s.PribadiStress
	s.fieldMap["pribadi_emosi"] = s.PribadiEmosi
	s.fieldMap["pribadi_sosial"] = s.PribadiSosial
	s.fieldMap["pribadi_empati"] = s.PribadiEmpati
	s.fieldMap["rekom_akhir"] = s.RekomAkhir
	s.fieldMap["selesai_skoring"] = s.SelesaiSkoring
	s.fieldMap["minat_ipa1"] = s.MinatIpa1
	s.fieldMap["minat_ipa2"] = s.MinatIpa2
	s.fieldMap["minat_ipa3"] = s.MinatIpa3
	s.fieldMap["minat_ipa4"] = s.MinatIpa4
	s.fieldMap["minat_ipa5"] = s.MinatIpa5
	s.fieldMap["minat_ips1"] = s.MinatIps1
	s.fieldMap["minat_ips2"] = s.MinatIps2
	s.fieldMap["minat_ips3"] = s.MinatIps3
	s.fieldMap["minat_ips4"] = s.MinatIps4
	s.fieldMap["minat_ips5"] = s.MinatIps5
	s.fieldMap["gp_a"] = s.GpA
	s.fieldMap["gp_b"] = s.GpB
	s.fieldMap["gp_c"] = s.GpC
	s.fieldMap["gp_d"] = s.GpD
	s.fieldMap["gp_e"] = s.GpE
	s.fieldMap["gp_f"] = s.GpF
	s.fieldMap["gp_g"] = s.GpG
	s.fieldMap["gp_h"] = s.GpH
	s.fieldMap["gp_i"] = s.GpI
	s.fieldMap["gp_j"] = s.GpJ
	s.fieldMap["gp_k"] = s.GpK
	s.fieldMap["gp_l"] = s.GpL
	s.fieldMap["rangking_gp1"] = s.RangkingGp1
	s.fieldMap["rangking_gp2"] = s.RangkingGp2
	s.fieldMap["rangking_gp3"] = s.RangkingGp3
	s.fieldMap["km_1"] = s.Km1
	s.fieldMap["km_2"] = s.Km2
	s.fieldMap["km_3"] = s.Km3
	s.fieldMap["km_4"] = s.Km4
	s.fieldMap["km_5"] = s.Km5
	s.fieldMap["minat_6"] = s.Minat6
	s.fieldMap["minat_7"] = s.Minat7
	s.fieldMap["minat_8"] = s.Minat8
	s.fieldMap["minat_9"] = s.Minat9
	s.fieldMap["minat_10"] = s.Minat10
}

func (s skoringMinatSmkV2) clone(db *gorm.DB) skoringMinatSmkV2 {
	s.skoringMinatSmkV2Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skoringMinatSmkV2) replaceDB(db *gorm.DB) skoringMinatSmkV2 {
	s.skoringMinatSmkV2Do.ReplaceDB(db)
	return s
}

type skoringMinatSmkV2Do struct{ gen.DO }

func (s skoringMinatSmkV2Do) Debug() *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Debug())
}

func (s skoringMinatSmkV2Do) WithContext(ctx context.Context) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skoringMinatSmkV2Do) ReadDB() *skoringMinatSmkV2Do {
	return s.Clauses(dbresolver.Read)
}

func (s skoringMinatSmkV2Do) WriteDB() *skoringMinatSmkV2Do {
	return s.Clauses(dbresolver.Write)
}

func (s skoringMinatSmkV2Do) Session(config *gorm.Session) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Session(config))
}

func (s skoringMinatSmkV2Do) Clauses(conds ...clause.Expression) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skoringMinatSmkV2Do) Returning(value interface{}, columns ...string) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skoringMinatSmkV2Do) Not(conds ...gen.Condition) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s skoringMinatSmkV2Do) Or(conds ...gen.Condition) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s skoringMinatSmkV2Do) Select(conds ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s skoringMinatSmkV2Do) Where(conds ...gen.Condition) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s skoringMinatSmkV2Do) Order(conds ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s skoringMinatSmkV2Do) Distinct(cols ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skoringMinatSmkV2Do) Omit(cols ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skoringMinatSmkV2Do) Join(table schema.Tabler, on ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skoringMinatSmkV2Do) LeftJoin(table schema.Tabler, on ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skoringMinatSmkV2Do) RightJoin(table schema.Tabler, on ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skoringMinatSmkV2Do) Group(cols ...field.Expr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s skoringMinatSmkV2Do) Having(conds ...gen.Condition) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s skoringMinatSmkV2Do) Limit(limit int) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s skoringMinatSmkV2Do) Offset(offset int) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s skoringMinatSmkV2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skoringMinatSmkV2Do) Unscoped() *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Unscoped())
}

func (s skoringMinatSmkV2Do) Create(values ...*entity.SkoringMinatSmkV2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skoringMinatSmkV2Do) CreateInBatches(values []*entity.SkoringMinatSmkV2, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skoringMinatSmkV2Do) Save(values ...*entity.SkoringMinatSmkV2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skoringMinatSmkV2Do) First() (*entity.SkoringMinatSmkV2, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatSmkV2), nil
	}
}

func (s skoringMinatSmkV2Do) Take() (*entity.SkoringMinatSmkV2, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatSmkV2), nil
	}
}

func (s skoringMinatSmkV2Do) Last() (*entity.SkoringMinatSmkV2, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatSmkV2), nil
	}
}

func (s skoringMinatSmkV2Do) Find() ([]*entity.SkoringMinatSmkV2, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkoringMinatSmkV2), err
}

func (s skoringMinatSmkV2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkoringMinatSmkV2, err error) {
	buf := make([]*entity.SkoringMinatSmkV2, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skoringMinatSmkV2Do) FindInBatches(result *[]*entity.SkoringMinatSmkV2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skoringMinatSmkV2Do) Attrs(attrs ...field.AssignExpr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skoringMinatSmkV2Do) Assign(attrs ...field.AssignExpr) *skoringMinatSmkV2Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skoringMinatSmkV2Do) Joins(fields ...field.RelationField) *skoringMinatSmkV2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skoringMinatSmkV2Do) Preload(fields ...field.RelationField) *skoringMinatSmkV2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skoringMinatSmkV2Do) FirstOrInit() (*entity.SkoringMinatSmkV2, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatSmkV2), nil
	}
}

func (s skoringMinatSmkV2Do) FirstOrCreate() (*entity.SkoringMinatSmkV2, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatSmkV2), nil
	}
}

func (s skoringMinatSmkV2Do) FindByPage(offset int, limit int) (result []*entity.SkoringMinatSmkV2, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skoringMinatSmkV2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skoringMinatSmkV2Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skoringMinatSmkV2Do) Delete(models ...*entity.SkoringMinatSmkV2) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skoringMinatSmkV2Do) withDO(do gen.Dao) *skoringMinatSmkV2Do {
	s.DO = *do.(*gen.DO)
	return s
}
