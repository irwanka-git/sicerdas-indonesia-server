// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorKepribadianManajerial(db *gorm.DB, opts ...gen.DOOption) skorKepribadianManajerial {
	_skorKepribadianManajerial := skorKepribadianManajerial{}

	_skorKepribadianManajerial.skorKepribadianManajerialDo.UseDB(db, opts...)
	_skorKepribadianManajerial.skorKepribadianManajerialDo.UseModel(&entity.SkorKepribadianManajerial{})

	tableName := _skorKepribadianManajerial.skorKepribadianManajerialDo.TableName()
	_skorKepribadianManajerial.ALL = field.NewAsterisk(tableName)
	_skorKepribadianManajerial.IDUser = field.NewInt32(tableName, "id_user")
	_skorKepribadianManajerial.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorKepribadianManajerial.Visioner = field.NewInt32(tableName, "visioner")
	_skorKepribadianManajerial.KestabilanEmosi = field.NewInt32(tableName, "kestabilan_emosi")
	_skorKepribadianManajerial.Memotivasi = field.NewInt32(tableName, "memotivasi")
	_skorKepribadianManajerial.ManajemenResiko = field.NewInt32(tableName, "manajemen_resiko")
	_skorKepribadianManajerial.PengambilanKeputusan = field.NewInt32(tableName, "pengambilan_keputusan")
	_skorKepribadianManajerial.PenyesuaianDiri = field.NewInt32(tableName, "penyesuaian_diri")
	_skorKepribadianManajerial.ManajemenWaktu = field.NewInt32(tableName, "manajemen_waktu")
	_skorKepribadianManajerial.MotivasiPrestasi = field.NewInt32(tableName, "motivasi_prestasi")
	_skorKepribadianManajerial.Integritas = field.NewInt32(tableName, "integritas")
	_skorKepribadianManajerial.PelayananPublik = field.NewInt32(tableName, "pelayanan_publik")
	_skorKepribadianManajerial.KlasifikasiVisioner = field.NewString(tableName, "klasifikasi_visioner")
	_skorKepribadianManajerial.KlasifikasiKestabilanEmosi = field.NewString(tableName, "klasifikasi_kestabilan_emosi")
	_skorKepribadianManajerial.KlasifikasiMemotivasi = field.NewString(tableName, "klasifikasi_memotivasi")
	_skorKepribadianManajerial.KlasifikasiManajemenResiko = field.NewString(tableName, "klasifikasi_manajemen_resiko")
	_skorKepribadianManajerial.KlasifikasiPengambilanKeputusan = field.NewString(tableName, "klasifikasi_pengambilan_keputusan")
	_skorKepribadianManajerial.KlasifikasiPenyesuaianDiri = field.NewString(tableName, "klasifikasi_penyesuaian_diri")
	_skorKepribadianManajerial.KlasifikasiManajemenWaktu = field.NewString(tableName, "klasifikasi_manajemen_waktu")
	_skorKepribadianManajerial.KlasifikasiMotivasiPrestasi = field.NewString(tableName, "klasifikasi_motivasi_prestasi")
	_skorKepribadianManajerial.KlasifikasiIntegritas = field.NewString(tableName, "klasifikasi_integritas")
	_skorKepribadianManajerial.KlasifikasiPelayananPublik = field.NewString(tableName, "klasifikasi_pelayanan_publik")

	_skorKepribadianManajerial.fillFieldMap()

	return _skorKepribadianManajerial
}

type skorKepribadianManajerial struct {
	skorKepribadianManajerialDo skorKepribadianManajerialDo

	ALL                             field.Asterisk
	IDUser                          field.Int32
	IDQuiz                          field.Int32
	Visioner                        field.Int32
	KestabilanEmosi                 field.Int32
	Memotivasi                      field.Int32
	ManajemenResiko                 field.Int32
	PengambilanKeputusan            field.Int32
	PenyesuaianDiri                 field.Int32
	ManajemenWaktu                  field.Int32
	MotivasiPrestasi                field.Int32
	Integritas                      field.Int32
	PelayananPublik                 field.Int32
	KlasifikasiVisioner             field.String
	KlasifikasiKestabilanEmosi      field.String
	KlasifikasiMemotivasi           field.String
	KlasifikasiManajemenResiko      field.String
	KlasifikasiPengambilanKeputusan field.String
	KlasifikasiPenyesuaianDiri      field.String
	KlasifikasiManajemenWaktu       field.String
	KlasifikasiMotivasiPrestasi     field.String
	KlasifikasiIntegritas           field.String
	KlasifikasiPelayananPublik      field.String

	fieldMap map[string]field.Expr
}

func (s skorKepribadianManajerial) Table(newTableName string) *skorKepribadianManajerial {
	s.skorKepribadianManajerialDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorKepribadianManajerial) As(alias string) *skorKepribadianManajerial {
	s.skorKepribadianManajerialDo.DO = *(s.skorKepribadianManajerialDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorKepribadianManajerial) updateTableName(table string) *skorKepribadianManajerial {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.Visioner = field.NewInt32(table, "visioner")
	s.KestabilanEmosi = field.NewInt32(table, "kestabilan_emosi")
	s.Memotivasi = field.NewInt32(table, "memotivasi")
	s.ManajemenResiko = field.NewInt32(table, "manajemen_resiko")
	s.PengambilanKeputusan = field.NewInt32(table, "pengambilan_keputusan")
	s.PenyesuaianDiri = field.NewInt32(table, "penyesuaian_diri")
	s.ManajemenWaktu = field.NewInt32(table, "manajemen_waktu")
	s.MotivasiPrestasi = field.NewInt32(table, "motivasi_prestasi")
	s.Integritas = field.NewInt32(table, "integritas")
	s.PelayananPublik = field.NewInt32(table, "pelayanan_publik")
	s.KlasifikasiVisioner = field.NewString(table, "klasifikasi_visioner")
	s.KlasifikasiKestabilanEmosi = field.NewString(table, "klasifikasi_kestabilan_emosi")
	s.KlasifikasiMemotivasi = field.NewString(table, "klasifikasi_memotivasi")
	s.KlasifikasiManajemenResiko = field.NewString(table, "klasifikasi_manajemen_resiko")
	s.KlasifikasiPengambilanKeputusan = field.NewString(table, "klasifikasi_pengambilan_keputusan")
	s.KlasifikasiPenyesuaianDiri = field.NewString(table, "klasifikasi_penyesuaian_diri")
	s.KlasifikasiManajemenWaktu = field.NewString(table, "klasifikasi_manajemen_waktu")
	s.KlasifikasiMotivasiPrestasi = field.NewString(table, "klasifikasi_motivasi_prestasi")
	s.KlasifikasiIntegritas = field.NewString(table, "klasifikasi_integritas")
	s.KlasifikasiPelayananPublik = field.NewString(table, "klasifikasi_pelayanan_publik")

	s.fillFieldMap()

	return s
}

func (s *skorKepribadianManajerial) WithContext(ctx context.Context) *skorKepribadianManajerialDo {
	return s.skorKepribadianManajerialDo.WithContext(ctx)
}

func (s skorKepribadianManajerial) TableName() string {
	return s.skorKepribadianManajerialDo.TableName()
}

func (s skorKepribadianManajerial) Alias() string { return s.skorKepribadianManajerialDo.Alias() }

func (s skorKepribadianManajerial) Columns(cols ...field.Expr) gen.Columns {
	return s.skorKepribadianManajerialDo.Columns(cols...)
}

func (s *skorKepribadianManajerial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorKepribadianManajerial) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 22)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["visioner"] = s.Visioner
	s.fieldMap["kestabilan_emosi"] = s.KestabilanEmosi
	s.fieldMap["memotivasi"] = s.Memotivasi
	s.fieldMap["manajemen_resiko"] = s.ManajemenResiko
	s.fieldMap["pengambilan_keputusan"] = s.PengambilanKeputusan
	s.fieldMap["penyesuaian_diri"] = s.PenyesuaianDiri
	s.fieldMap["manajemen_waktu"] = s.ManajemenWaktu
	s.fieldMap["motivasi_prestasi"] = s.MotivasiPrestasi
	s.fieldMap["integritas"] = s.Integritas
	s.fieldMap["pelayanan_publik"] = s.PelayananPublik
	s.fieldMap["klasifikasi_visioner"] = s.KlasifikasiVisioner
	s.fieldMap["klasifikasi_kestabilan_emosi"] = s.KlasifikasiKestabilanEmosi
	s.fieldMap["klasifikasi_memotivasi"] = s.KlasifikasiMemotivasi
	s.fieldMap["klasifikasi_manajemen_resiko"] = s.KlasifikasiManajemenResiko
	s.fieldMap["klasifikasi_pengambilan_keputusan"] = s.KlasifikasiPengambilanKeputusan
	s.fieldMap["klasifikasi_penyesuaian_diri"] = s.KlasifikasiPenyesuaianDiri
	s.fieldMap["klasifikasi_manajemen_waktu"] = s.KlasifikasiManajemenWaktu
	s.fieldMap["klasifikasi_motivasi_prestasi"] = s.KlasifikasiMotivasiPrestasi
	s.fieldMap["klasifikasi_integritas"] = s.KlasifikasiIntegritas
	s.fieldMap["klasifikasi_pelayanan_publik"] = s.KlasifikasiPelayananPublik
}

func (s skorKepribadianManajerial) clone(db *gorm.DB) skorKepribadianManajerial {
	s.skorKepribadianManajerialDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorKepribadianManajerial) replaceDB(db *gorm.DB) skorKepribadianManajerial {
	s.skorKepribadianManajerialDo.ReplaceDB(db)
	return s
}

type skorKepribadianManajerialDo struct{ gen.DO }

func (s skorKepribadianManajerialDo) Debug() *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Debug())
}

func (s skorKepribadianManajerialDo) WithContext(ctx context.Context) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorKepribadianManajerialDo) ReadDB() *skorKepribadianManajerialDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorKepribadianManajerialDo) WriteDB() *skorKepribadianManajerialDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorKepribadianManajerialDo) Session(config *gorm.Session) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorKepribadianManajerialDo) Clauses(conds ...clause.Expression) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorKepribadianManajerialDo) Returning(value interface{}, columns ...string) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorKepribadianManajerialDo) Not(conds ...gen.Condition) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorKepribadianManajerialDo) Or(conds ...gen.Condition) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorKepribadianManajerialDo) Select(conds ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorKepribadianManajerialDo) Where(conds ...gen.Condition) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorKepribadianManajerialDo) Order(conds ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorKepribadianManajerialDo) Distinct(cols ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorKepribadianManajerialDo) Omit(cols ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorKepribadianManajerialDo) Join(table schema.Tabler, on ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorKepribadianManajerialDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorKepribadianManajerialDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorKepribadianManajerialDo) Group(cols ...field.Expr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorKepribadianManajerialDo) Having(conds ...gen.Condition) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorKepribadianManajerialDo) Limit(limit int) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorKepribadianManajerialDo) Offset(offset int) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorKepribadianManajerialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorKepribadianManajerialDo) Unscoped() *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorKepribadianManajerialDo) Create(values ...*entity.SkorKepribadianManajerial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorKepribadianManajerialDo) CreateInBatches(values []*entity.SkorKepribadianManajerial, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorKepribadianManajerialDo) Save(values ...*entity.SkorKepribadianManajerial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorKepribadianManajerialDo) First() (*entity.SkorKepribadianManajerial, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKepribadianManajerial), nil
	}
}

func (s skorKepribadianManajerialDo) Take() (*entity.SkorKepribadianManajerial, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKepribadianManajerial), nil
	}
}

func (s skorKepribadianManajerialDo) Last() (*entity.SkorKepribadianManajerial, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKepribadianManajerial), nil
	}
}

func (s skorKepribadianManajerialDo) Find() ([]*entity.SkorKepribadianManajerial, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorKepribadianManajerial), err
}

func (s skorKepribadianManajerialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorKepribadianManajerial, err error) {
	buf := make([]*entity.SkorKepribadianManajerial, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorKepribadianManajerialDo) FindInBatches(result *[]*entity.SkorKepribadianManajerial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorKepribadianManajerialDo) Attrs(attrs ...field.AssignExpr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorKepribadianManajerialDo) Assign(attrs ...field.AssignExpr) *skorKepribadianManajerialDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorKepribadianManajerialDo) Joins(fields ...field.RelationField) *skorKepribadianManajerialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorKepribadianManajerialDo) Preload(fields ...field.RelationField) *skorKepribadianManajerialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorKepribadianManajerialDo) FirstOrInit() (*entity.SkorKepribadianManajerial, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKepribadianManajerial), nil
	}
}

func (s skorKepribadianManajerialDo) FirstOrCreate() (*entity.SkorKepribadianManajerial, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKepribadianManajerial), nil
	}
}

func (s skorKepribadianManajerialDo) FindByPage(offset int, limit int) (result []*entity.SkorKepribadianManajerial, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorKepribadianManajerialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorKepribadianManajerialDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorKepribadianManajerialDo) Delete(models ...*entity.SkorKepribadianManajerial) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorKepribadianManajerialDo) withDO(do gen.Dao) *skorKepribadianManajerialDo {
	s.DO = *do.(*gen.DO)
	return s
}
