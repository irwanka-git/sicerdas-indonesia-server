// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newQuizSesiTemplate(db *gorm.DB, opts ...gen.DOOption) quizSesiTemplate {
	_quizSesiTemplate := quizSesiTemplate{}

	_quizSesiTemplate.quizSesiTemplateDo.UseDB(db, opts...)
	_quizSesiTemplate.quizSesiTemplateDo.UseModel(&entity.QuizSesiTemplate{})

	tableName := _quizSesiTemplate.quizSesiTemplateDo.TableName()
	_quizSesiTemplate.ALL = field.NewAsterisk(tableName)
	_quizSesiTemplate.IDQuizTemplate = field.NewInt32(tableName, "id_quiz_template")
	_quizSesiTemplate.NamaSesi = field.NewString(tableName, "nama_sesi")
	_quizSesiTemplate.Gambar = field.NewString(tableName, "gambar")
	_quizSesiTemplate.SkoringTabel = field.NewString(tableName, "skoring_tabel")
	_quizSesiTemplate.UUID = field.NewString(tableName, "uuid")
	_quizSesiTemplate.Jenis = field.NewString(tableName, "jenis")

	_quizSesiTemplate.fillFieldMap()

	return _quizSesiTemplate
}

type quizSesiTemplate struct {
	quizSesiTemplateDo quizSesiTemplateDo

	ALL            field.Asterisk
	IDQuizTemplate field.Int32
	NamaSesi       field.String
	Gambar         field.String
	SkoringTabel   field.String
	UUID           field.String
	Jenis          field.String // demo atao quiz

	fieldMap map[string]field.Expr
}

func (q quizSesiTemplate) Table(newTableName string) *quizSesiTemplate {
	q.quizSesiTemplateDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quizSesiTemplate) As(alias string) *quizSesiTemplate {
	q.quizSesiTemplateDo.DO = *(q.quizSesiTemplateDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quizSesiTemplate) updateTableName(table string) *quizSesiTemplate {
	q.ALL = field.NewAsterisk(table)
	q.IDQuizTemplate = field.NewInt32(table, "id_quiz_template")
	q.NamaSesi = field.NewString(table, "nama_sesi")
	q.Gambar = field.NewString(table, "gambar")
	q.SkoringTabel = field.NewString(table, "skoring_tabel")
	q.UUID = field.NewString(table, "uuid")
	q.Jenis = field.NewString(table, "jenis")

	q.fillFieldMap()

	return q
}

func (q *quizSesiTemplate) WithContext(ctx context.Context) *quizSesiTemplateDo {
	return q.quizSesiTemplateDo.WithContext(ctx)
}

func (q quizSesiTemplate) TableName() string { return q.quizSesiTemplateDo.TableName() }

func (q quizSesiTemplate) Alias() string { return q.quizSesiTemplateDo.Alias() }

func (q quizSesiTemplate) Columns(cols ...field.Expr) gen.Columns {
	return q.quizSesiTemplateDo.Columns(cols...)
}

func (q *quizSesiTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quizSesiTemplate) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id_quiz_template"] = q.IDQuizTemplate
	q.fieldMap["nama_sesi"] = q.NamaSesi
	q.fieldMap["gambar"] = q.Gambar
	q.fieldMap["skoring_tabel"] = q.SkoringTabel
	q.fieldMap["uuid"] = q.UUID
	q.fieldMap["jenis"] = q.Jenis
}

func (q quizSesiTemplate) clone(db *gorm.DB) quizSesiTemplate {
	q.quizSesiTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quizSesiTemplate) replaceDB(db *gorm.DB) quizSesiTemplate {
	q.quizSesiTemplateDo.ReplaceDB(db)
	return q
}

type quizSesiTemplateDo struct{ gen.DO }

func (q quizSesiTemplateDo) Debug() *quizSesiTemplateDo {
	return q.withDO(q.DO.Debug())
}

func (q quizSesiTemplateDo) WithContext(ctx context.Context) *quizSesiTemplateDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizSesiTemplateDo) ReadDB() *quizSesiTemplateDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizSesiTemplateDo) WriteDB() *quizSesiTemplateDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizSesiTemplateDo) Session(config *gorm.Session) *quizSesiTemplateDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizSesiTemplateDo) Clauses(conds ...clause.Expression) *quizSesiTemplateDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizSesiTemplateDo) Returning(value interface{}, columns ...string) *quizSesiTemplateDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizSesiTemplateDo) Not(conds ...gen.Condition) *quizSesiTemplateDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizSesiTemplateDo) Or(conds ...gen.Condition) *quizSesiTemplateDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizSesiTemplateDo) Select(conds ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizSesiTemplateDo) Where(conds ...gen.Condition) *quizSesiTemplateDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizSesiTemplateDo) Order(conds ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizSesiTemplateDo) Distinct(cols ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizSesiTemplateDo) Omit(cols ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizSesiTemplateDo) Join(table schema.Tabler, on ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizSesiTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizSesiTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizSesiTemplateDo) Group(cols ...field.Expr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizSesiTemplateDo) Having(conds ...gen.Condition) *quizSesiTemplateDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizSesiTemplateDo) Limit(limit int) *quizSesiTemplateDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizSesiTemplateDo) Offset(offset int) *quizSesiTemplateDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizSesiTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *quizSesiTemplateDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizSesiTemplateDo) Unscoped() *quizSesiTemplateDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizSesiTemplateDo) Create(values ...*entity.QuizSesiTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizSesiTemplateDo) CreateInBatches(values []*entity.QuizSesiTemplate, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizSesiTemplateDo) Save(values ...*entity.QuizSesiTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizSesiTemplateDo) First() (*entity.QuizSesiTemplate, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTemplate), nil
	}
}

func (q quizSesiTemplateDo) Take() (*entity.QuizSesiTemplate, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTemplate), nil
	}
}

func (q quizSesiTemplateDo) Last() (*entity.QuizSesiTemplate, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTemplate), nil
	}
}

func (q quizSesiTemplateDo) Find() ([]*entity.QuizSesiTemplate, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuizSesiTemplate), err
}

func (q quizSesiTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuizSesiTemplate, err error) {
	buf := make([]*entity.QuizSesiTemplate, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizSesiTemplateDo) FindInBatches(result *[]*entity.QuizSesiTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizSesiTemplateDo) Attrs(attrs ...field.AssignExpr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizSesiTemplateDo) Assign(attrs ...field.AssignExpr) *quizSesiTemplateDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizSesiTemplateDo) Joins(fields ...field.RelationField) *quizSesiTemplateDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizSesiTemplateDo) Preload(fields ...field.RelationField) *quizSesiTemplateDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizSesiTemplateDo) FirstOrInit() (*entity.QuizSesiTemplate, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTemplate), nil
	}
}

func (q quizSesiTemplateDo) FirstOrCreate() (*entity.QuizSesiTemplate, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTemplate), nil
	}
}

func (q quizSesiTemplateDo) FindByPage(offset int, limit int) (result []*entity.QuizSesiTemplate, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizSesiTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizSesiTemplateDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizSesiTemplateDo) Delete(models ...*entity.QuizSesiTemplate) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizSesiTemplateDo) withDO(do gen.Dao) *quizSesiTemplateDo {
	q.DO = *do.(*gen.DO)
	return q
}
