// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalTipologiJungEng(db *gorm.DB, opts ...gen.DOOption) soalTipologiJungEng {
	_soalTipologiJungEng := soalTipologiJungEng{}

	_soalTipologiJungEng.soalTipologiJungEngDo.UseDB(db, opts...)
	_soalTipologiJungEng.soalTipologiJungEngDo.UseModel(&entity.SoalTipologiJungEng{})

	tableName := _soalTipologiJungEng.soalTipologiJungEngDo.TableName()
	_soalTipologiJungEng.ALL = field.NewAsterisk(tableName)
	_soalTipologiJungEng.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalTipologiJungEng.Kolom = field.NewString(tableName, "kolom")
	_soalTipologiJungEng.Urutan = field.NewInt32(tableName, "urutan")
	_soalTipologiJungEng.Pernyataan = field.NewString(tableName, "pernyataan")
	_soalTipologiJungEng.PilihanA = field.NewString(tableName, "pilihan_a")
	_soalTipologiJungEng.PilihanB = field.NewString(tableName, "pilihan_b")
	_soalTipologiJungEng.UUID = field.NewString(tableName, "uuid")

	_soalTipologiJungEng.fillFieldMap()

	return _soalTipologiJungEng
}

type soalTipologiJungEng struct {
	soalTipologiJungEngDo soalTipologiJungEngDo

	ALL        field.Asterisk
	IDSoal     field.Int32
	Kolom      field.String
	Urutan     field.Int32
	Pernyataan field.String
	PilihanA   field.String
	PilihanB   field.String
	UUID       field.String

	fieldMap map[string]field.Expr
}

func (s soalTipologiJungEng) Table(newTableName string) *soalTipologiJungEng {
	s.soalTipologiJungEngDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalTipologiJungEng) As(alias string) *soalTipologiJungEng {
	s.soalTipologiJungEngDo.DO = *(s.soalTipologiJungEngDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalTipologiJungEng) updateTableName(table string) *soalTipologiJungEng {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.Kolom = field.NewString(table, "kolom")
	s.Urutan = field.NewInt32(table, "urutan")
	s.Pernyataan = field.NewString(table, "pernyataan")
	s.PilihanA = field.NewString(table, "pilihan_a")
	s.PilihanB = field.NewString(table, "pilihan_b")
	s.UUID = field.NewString(table, "uuid")

	s.fillFieldMap()

	return s
}

func (s *soalTipologiJungEng) WithContext(ctx context.Context) *soalTipologiJungEngDo {
	return s.soalTipologiJungEngDo.WithContext(ctx)
}

func (s soalTipologiJungEng) TableName() string { return s.soalTipologiJungEngDo.TableName() }

func (s soalTipologiJungEng) Alias() string { return s.soalTipologiJungEngDo.Alias() }

func (s soalTipologiJungEng) Columns(cols ...field.Expr) gen.Columns {
	return s.soalTipologiJungEngDo.Columns(cols...)
}

func (s *soalTipologiJungEng) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalTipologiJungEng) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["kolom"] = s.Kolom
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["pernyataan"] = s.Pernyataan
	s.fieldMap["pilihan_a"] = s.PilihanA
	s.fieldMap["pilihan_b"] = s.PilihanB
	s.fieldMap["uuid"] = s.UUID
}

func (s soalTipologiJungEng) clone(db *gorm.DB) soalTipologiJungEng {
	s.soalTipologiJungEngDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalTipologiJungEng) replaceDB(db *gorm.DB) soalTipologiJungEng {
	s.soalTipologiJungEngDo.ReplaceDB(db)
	return s
}

type soalTipologiJungEngDo struct{ gen.DO }

func (s soalTipologiJungEngDo) Debug() *soalTipologiJungEngDo {
	return s.withDO(s.DO.Debug())
}

func (s soalTipologiJungEngDo) WithContext(ctx context.Context) *soalTipologiJungEngDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalTipologiJungEngDo) ReadDB() *soalTipologiJungEngDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalTipologiJungEngDo) WriteDB() *soalTipologiJungEngDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalTipologiJungEngDo) Session(config *gorm.Session) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalTipologiJungEngDo) Clauses(conds ...clause.Expression) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalTipologiJungEngDo) Returning(value interface{}, columns ...string) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalTipologiJungEngDo) Not(conds ...gen.Condition) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalTipologiJungEngDo) Or(conds ...gen.Condition) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalTipologiJungEngDo) Select(conds ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalTipologiJungEngDo) Where(conds ...gen.Condition) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalTipologiJungEngDo) Order(conds ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalTipologiJungEngDo) Distinct(cols ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalTipologiJungEngDo) Omit(cols ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalTipologiJungEngDo) Join(table schema.Tabler, on ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalTipologiJungEngDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalTipologiJungEngDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalTipologiJungEngDo) Group(cols ...field.Expr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalTipologiJungEngDo) Having(conds ...gen.Condition) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalTipologiJungEngDo) Limit(limit int) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalTipologiJungEngDo) Offset(offset int) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalTipologiJungEngDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalTipologiJungEngDo) Unscoped() *soalTipologiJungEngDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalTipologiJungEngDo) Create(values ...*entity.SoalTipologiJungEng) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalTipologiJungEngDo) CreateInBatches(values []*entity.SoalTipologiJungEng, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalTipologiJungEngDo) Save(values ...*entity.SoalTipologiJungEng) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalTipologiJungEngDo) First() (*entity.SoalTipologiJungEng, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalTipologiJungEng), nil
	}
}

func (s soalTipologiJungEngDo) Take() (*entity.SoalTipologiJungEng, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalTipologiJungEng), nil
	}
}

func (s soalTipologiJungEngDo) Last() (*entity.SoalTipologiJungEng, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalTipologiJungEng), nil
	}
}

func (s soalTipologiJungEngDo) Find() ([]*entity.SoalTipologiJungEng, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalTipologiJungEng), err
}

func (s soalTipologiJungEngDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalTipologiJungEng, err error) {
	buf := make([]*entity.SoalTipologiJungEng, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalTipologiJungEngDo) FindInBatches(result *[]*entity.SoalTipologiJungEng, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalTipologiJungEngDo) Attrs(attrs ...field.AssignExpr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalTipologiJungEngDo) Assign(attrs ...field.AssignExpr) *soalTipologiJungEngDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalTipologiJungEngDo) Joins(fields ...field.RelationField) *soalTipologiJungEngDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalTipologiJungEngDo) Preload(fields ...field.RelationField) *soalTipologiJungEngDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalTipologiJungEngDo) FirstOrInit() (*entity.SoalTipologiJungEng, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalTipologiJungEng), nil
	}
}

func (s soalTipologiJungEngDo) FirstOrCreate() (*entity.SoalTipologiJungEng, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalTipologiJungEng), nil
	}
}

func (s soalTipologiJungEngDo) FindByPage(offset int, limit int) (result []*entity.SoalTipologiJungEng, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalTipologiJungEngDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalTipologiJungEngDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalTipologiJungEngDo) Delete(models ...*entity.SoalTipologiJungEng) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalTipologiJungEngDo) withDO(do gen.Dao) *soalTipologiJungEngDo {
	s.DO = *do.(*gen.DO)
	return s
}
