// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newInfoCerda(db *gorm.DB, opts ...gen.DOOption) infoCerda {
	_infoCerda := infoCerda{}

	_infoCerda.infoCerdaDo.UseDB(db, opts...)
	_infoCerda.infoCerdaDo.UseModel(&entity.InfoCerda{})

	tableName := _infoCerda.infoCerdaDo.TableName()
	_infoCerda.ALL = field.NewAsterisk(tableName)
	_infoCerda.IDInfo = field.NewInt32(tableName, "id_info")
	_infoCerda.Judul = field.NewString(tableName, "judul")
	_infoCerda.Isi = field.NewString(tableName, "isi")
	_infoCerda.Gambar = field.NewString(tableName, "gambar")
	_infoCerda.CreatedAt = field.NewTime(tableName, "created_at")
	_infoCerda.UUID = field.NewString(tableName, "uuid")
	_infoCerda.URL = field.NewString(tableName, "url")

	_infoCerda.fillFieldMap()

	return _infoCerda
}

type infoCerda struct {
	infoCerdaDo infoCerdaDo

	ALL       field.Asterisk
	IDInfo    field.Int32
	Judul     field.String
	Isi       field.String
	Gambar    field.String
	CreatedAt field.Time
	UUID      field.String
	URL       field.String

	fieldMap map[string]field.Expr
}

func (i infoCerda) Table(newTableName string) *infoCerda {
	i.infoCerdaDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i infoCerda) As(alias string) *infoCerda {
	i.infoCerdaDo.DO = *(i.infoCerdaDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *infoCerda) updateTableName(table string) *infoCerda {
	i.ALL = field.NewAsterisk(table)
	i.IDInfo = field.NewInt32(table, "id_info")
	i.Judul = field.NewString(table, "judul")
	i.Isi = field.NewString(table, "isi")
	i.Gambar = field.NewString(table, "gambar")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UUID = field.NewString(table, "uuid")
	i.URL = field.NewString(table, "url")

	i.fillFieldMap()

	return i
}

func (i *infoCerda) WithContext(ctx context.Context) *infoCerdaDo {
	return i.infoCerdaDo.WithContext(ctx)
}

func (i infoCerda) TableName() string { return i.infoCerdaDo.TableName() }

func (i infoCerda) Alias() string { return i.infoCerdaDo.Alias() }

func (i infoCerda) Columns(cols ...field.Expr) gen.Columns { return i.infoCerdaDo.Columns(cols...) }

func (i *infoCerda) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *infoCerda) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id_info"] = i.IDInfo
	i.fieldMap["judul"] = i.Judul
	i.fieldMap["isi"] = i.Isi
	i.fieldMap["gambar"] = i.Gambar
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["uuid"] = i.UUID
	i.fieldMap["url"] = i.URL
}

func (i infoCerda) clone(db *gorm.DB) infoCerda {
	i.infoCerdaDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i infoCerda) replaceDB(db *gorm.DB) infoCerda {
	i.infoCerdaDo.ReplaceDB(db)
	return i
}

type infoCerdaDo struct{ gen.DO }

func (i infoCerdaDo) Debug() *infoCerdaDo {
	return i.withDO(i.DO.Debug())
}

func (i infoCerdaDo) WithContext(ctx context.Context) *infoCerdaDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i infoCerdaDo) ReadDB() *infoCerdaDo {
	return i.Clauses(dbresolver.Read)
}

func (i infoCerdaDo) WriteDB() *infoCerdaDo {
	return i.Clauses(dbresolver.Write)
}

func (i infoCerdaDo) Session(config *gorm.Session) *infoCerdaDo {
	return i.withDO(i.DO.Session(config))
}

func (i infoCerdaDo) Clauses(conds ...clause.Expression) *infoCerdaDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i infoCerdaDo) Returning(value interface{}, columns ...string) *infoCerdaDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i infoCerdaDo) Not(conds ...gen.Condition) *infoCerdaDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i infoCerdaDo) Or(conds ...gen.Condition) *infoCerdaDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i infoCerdaDo) Select(conds ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i infoCerdaDo) Where(conds ...gen.Condition) *infoCerdaDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i infoCerdaDo) Order(conds ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i infoCerdaDo) Distinct(cols ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i infoCerdaDo) Omit(cols ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i infoCerdaDo) Join(table schema.Tabler, on ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i infoCerdaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i infoCerdaDo) RightJoin(table schema.Tabler, on ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i infoCerdaDo) Group(cols ...field.Expr) *infoCerdaDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i infoCerdaDo) Having(conds ...gen.Condition) *infoCerdaDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i infoCerdaDo) Limit(limit int) *infoCerdaDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i infoCerdaDo) Offset(offset int) *infoCerdaDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i infoCerdaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *infoCerdaDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i infoCerdaDo) Unscoped() *infoCerdaDo {
	return i.withDO(i.DO.Unscoped())
}

func (i infoCerdaDo) Create(values ...*entity.InfoCerda) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i infoCerdaDo) CreateInBatches(values []*entity.InfoCerda, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i infoCerdaDo) Save(values ...*entity.InfoCerda) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i infoCerdaDo) First() (*entity.InfoCerda, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InfoCerda), nil
	}
}

func (i infoCerdaDo) Take() (*entity.InfoCerda, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InfoCerda), nil
	}
}

func (i infoCerdaDo) Last() (*entity.InfoCerda, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InfoCerda), nil
	}
}

func (i infoCerdaDo) Find() ([]*entity.InfoCerda, error) {
	result, err := i.DO.Find()
	return result.([]*entity.InfoCerda), err
}

func (i infoCerdaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.InfoCerda, err error) {
	buf := make([]*entity.InfoCerda, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i infoCerdaDo) FindInBatches(result *[]*entity.InfoCerda, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i infoCerdaDo) Attrs(attrs ...field.AssignExpr) *infoCerdaDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i infoCerdaDo) Assign(attrs ...field.AssignExpr) *infoCerdaDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i infoCerdaDo) Joins(fields ...field.RelationField) *infoCerdaDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i infoCerdaDo) Preload(fields ...field.RelationField) *infoCerdaDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i infoCerdaDo) FirstOrInit() (*entity.InfoCerda, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InfoCerda), nil
	}
}

func (i infoCerdaDo) FirstOrCreate() (*entity.InfoCerda, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InfoCerda), nil
	}
}

func (i infoCerdaDo) FindByPage(offset int, limit int) (result []*entity.InfoCerda, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i infoCerdaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i infoCerdaDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i infoCerdaDo) Delete(models ...*entity.InfoCerda) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *infoCerdaDo) withDO(do gen.Dao) *infoCerdaDo {
	i.DO = *do.(*gen.DO)
	return i
}
