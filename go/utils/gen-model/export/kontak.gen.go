// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newKontak(db *gorm.DB, opts ...gen.DOOption) kontak {
	_kontak := kontak{}

	_kontak.kontakDo.UseDB(db, opts...)
	_kontak.kontakDo.UseModel(&entity.Kontak{})

	tableName := _kontak.kontakDo.TableName()
	_kontak.ALL = field.NewAsterisk(tableName)
	_kontak.IDKontak = field.NewInt32(tableName, "id_kontak")
	_kontak.Telepon = field.NewString(tableName, "telepon")
	_kontak.Email = field.NewString(tableName, "email")
	_kontak.Website = field.NewString(tableName, "website")
	_kontak.UUID = field.NewString(tableName, "uuid")
	_kontak.WaMe = field.NewString(tableName, "wa_me")

	_kontak.fillFieldMap()

	return _kontak
}

type kontak struct {
	kontakDo kontakDo

	ALL      field.Asterisk
	IDKontak field.Int32
	Telepon  field.String
	Email    field.String
	Website  field.String
	UUID     field.String
	WaMe     field.String

	fieldMap map[string]field.Expr
}

func (k kontak) Table(newTableName string) *kontak {
	k.kontakDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k kontak) As(alias string) *kontak {
	k.kontakDo.DO = *(k.kontakDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *kontak) updateTableName(table string) *kontak {
	k.ALL = field.NewAsterisk(table)
	k.IDKontak = field.NewInt32(table, "id_kontak")
	k.Telepon = field.NewString(table, "telepon")
	k.Email = field.NewString(table, "email")
	k.Website = field.NewString(table, "website")
	k.UUID = field.NewString(table, "uuid")
	k.WaMe = field.NewString(table, "wa_me")

	k.fillFieldMap()

	return k
}

func (k *kontak) WithContext(ctx context.Context) *kontakDo { return k.kontakDo.WithContext(ctx) }

func (k kontak) TableName() string { return k.kontakDo.TableName() }

func (k kontak) Alias() string { return k.kontakDo.Alias() }

func (k kontak) Columns(cols ...field.Expr) gen.Columns { return k.kontakDo.Columns(cols...) }

func (k *kontak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *kontak) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 6)
	k.fieldMap["id_kontak"] = k.IDKontak
	k.fieldMap["telepon"] = k.Telepon
	k.fieldMap["email"] = k.Email
	k.fieldMap["website"] = k.Website
	k.fieldMap["uuid"] = k.UUID
	k.fieldMap["wa_me"] = k.WaMe
}

func (k kontak) clone(db *gorm.DB) kontak {
	k.kontakDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k kontak) replaceDB(db *gorm.DB) kontak {
	k.kontakDo.ReplaceDB(db)
	return k
}

type kontakDo struct{ gen.DO }

func (k kontakDo) Debug() *kontakDo {
	return k.withDO(k.DO.Debug())
}

func (k kontakDo) WithContext(ctx context.Context) *kontakDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k kontakDo) ReadDB() *kontakDo {
	return k.Clauses(dbresolver.Read)
}

func (k kontakDo) WriteDB() *kontakDo {
	return k.Clauses(dbresolver.Write)
}

func (k kontakDo) Session(config *gorm.Session) *kontakDo {
	return k.withDO(k.DO.Session(config))
}

func (k kontakDo) Clauses(conds ...clause.Expression) *kontakDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k kontakDo) Returning(value interface{}, columns ...string) *kontakDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k kontakDo) Not(conds ...gen.Condition) *kontakDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k kontakDo) Or(conds ...gen.Condition) *kontakDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k kontakDo) Select(conds ...field.Expr) *kontakDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k kontakDo) Where(conds ...gen.Condition) *kontakDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k kontakDo) Order(conds ...field.Expr) *kontakDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k kontakDo) Distinct(cols ...field.Expr) *kontakDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k kontakDo) Omit(cols ...field.Expr) *kontakDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k kontakDo) Join(table schema.Tabler, on ...field.Expr) *kontakDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k kontakDo) LeftJoin(table schema.Tabler, on ...field.Expr) *kontakDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k kontakDo) RightJoin(table schema.Tabler, on ...field.Expr) *kontakDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k kontakDo) Group(cols ...field.Expr) *kontakDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k kontakDo) Having(conds ...gen.Condition) *kontakDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k kontakDo) Limit(limit int) *kontakDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k kontakDo) Offset(offset int) *kontakDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k kontakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *kontakDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k kontakDo) Unscoped() *kontakDo {
	return k.withDO(k.DO.Unscoped())
}

func (k kontakDo) Create(values ...*entity.Kontak) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k kontakDo) CreateInBatches(values []*entity.Kontak, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k kontakDo) Save(values ...*entity.Kontak) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k kontakDo) First() (*entity.Kontak, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Kontak), nil
	}
}

func (k kontakDo) Take() (*entity.Kontak, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Kontak), nil
	}
}

func (k kontakDo) Last() (*entity.Kontak, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Kontak), nil
	}
}

func (k kontakDo) Find() ([]*entity.Kontak, error) {
	result, err := k.DO.Find()
	return result.([]*entity.Kontak), err
}

func (k kontakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Kontak, err error) {
	buf := make([]*entity.Kontak, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k kontakDo) FindInBatches(result *[]*entity.Kontak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k kontakDo) Attrs(attrs ...field.AssignExpr) *kontakDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k kontakDo) Assign(attrs ...field.AssignExpr) *kontakDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k kontakDo) Joins(fields ...field.RelationField) *kontakDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k kontakDo) Preload(fields ...field.RelationField) *kontakDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k kontakDo) FirstOrInit() (*entity.Kontak, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Kontak), nil
	}
}

func (k kontakDo) FirstOrCreate() (*entity.Kontak, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Kontak), nil
	}
}

func (k kontakDo) FindByPage(offset int, limit int) (result []*entity.Kontak, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k kontakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k kontakDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k kontakDo) Delete(models ...*entity.Kontak) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *kontakDo) withDO(do gen.Dao) *kontakDo {
	k.DO = *do.(*gen.DO)
	return k
}
