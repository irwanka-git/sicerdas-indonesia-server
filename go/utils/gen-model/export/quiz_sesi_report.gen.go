// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newQuizSesiReport(db *gorm.DB, opts ...gen.DOOption) quizSesiReport {
	_quizSesiReport := quizSesiReport{}

	_quizSesiReport.quizSesiReportDo.UseDB(db, opts...)
	_quizSesiReport.quizSesiReportDo.UseModel(&entity.QuizSesiReport{})

	tableName := _quizSesiReport.quizSesiReportDo.TableName()
	_quizSesiReport.ALL = field.NewAsterisk(tableName)
	_quizSesiReport.IDReport = field.NewInt32(tableName, "id_report")
	_quizSesiReport.NamaReport = field.NewString(tableName, "nama_report")
	_quizSesiReport.TabelReferensi = field.NewString(tableName, "tabel_referensi")
	_quizSesiReport.Blade = field.NewString(tableName, "blade")
	_quizSesiReport.TabelTerkait = field.NewString(tableName, "tabel_terkait")
	_quizSesiReport.Jenis = field.NewInt32(tableName, "jenis")
	_quizSesiReport.Orientasi = field.NewString(tableName, "orientasi")

	_quizSesiReport.fillFieldMap()

	return _quizSesiReport
}

type quizSesiReport struct {
	quizSesiReportDo quizSesiReportDo

	ALL            field.Asterisk
	IDReport       field.Int32
	NamaReport     field.String
	TabelReferensi field.String
	Blade          field.String
	TabelTerkait   field.String
	Jenis          field.Int32 // 1=> utama, 2=> lampiran
	Orientasi      field.String

	fieldMap map[string]field.Expr
}

func (q quizSesiReport) Table(newTableName string) *quizSesiReport {
	q.quizSesiReportDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quizSesiReport) As(alias string) *quizSesiReport {
	q.quizSesiReportDo.DO = *(q.quizSesiReportDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quizSesiReport) updateTableName(table string) *quizSesiReport {
	q.ALL = field.NewAsterisk(table)
	q.IDReport = field.NewInt32(table, "id_report")
	q.NamaReport = field.NewString(table, "nama_report")
	q.TabelReferensi = field.NewString(table, "tabel_referensi")
	q.Blade = field.NewString(table, "blade")
	q.TabelTerkait = field.NewString(table, "tabel_terkait")
	q.Jenis = field.NewInt32(table, "jenis")
	q.Orientasi = field.NewString(table, "orientasi")

	q.fillFieldMap()

	return q
}

func (q *quizSesiReport) WithContext(ctx context.Context) *quizSesiReportDo {
	return q.quizSesiReportDo.WithContext(ctx)
}

func (q quizSesiReport) TableName() string { return q.quizSesiReportDo.TableName() }

func (q quizSesiReport) Alias() string { return q.quizSesiReportDo.Alias() }

func (q quizSesiReport) Columns(cols ...field.Expr) gen.Columns {
	return q.quizSesiReportDo.Columns(cols...)
}

func (q *quizSesiReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quizSesiReport) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 7)
	q.fieldMap["id_report"] = q.IDReport
	q.fieldMap["nama_report"] = q.NamaReport
	q.fieldMap["tabel_referensi"] = q.TabelReferensi
	q.fieldMap["blade"] = q.Blade
	q.fieldMap["tabel_terkait"] = q.TabelTerkait
	q.fieldMap["jenis"] = q.Jenis
	q.fieldMap["orientasi"] = q.Orientasi
}

func (q quizSesiReport) clone(db *gorm.DB) quizSesiReport {
	q.quizSesiReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quizSesiReport) replaceDB(db *gorm.DB) quizSesiReport {
	q.quizSesiReportDo.ReplaceDB(db)
	return q
}

type quizSesiReportDo struct{ gen.DO }

func (q quizSesiReportDo) Debug() *quizSesiReportDo {
	return q.withDO(q.DO.Debug())
}

func (q quizSesiReportDo) WithContext(ctx context.Context) *quizSesiReportDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizSesiReportDo) ReadDB() *quizSesiReportDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizSesiReportDo) WriteDB() *quizSesiReportDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizSesiReportDo) Session(config *gorm.Session) *quizSesiReportDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizSesiReportDo) Clauses(conds ...clause.Expression) *quizSesiReportDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizSesiReportDo) Returning(value interface{}, columns ...string) *quizSesiReportDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizSesiReportDo) Not(conds ...gen.Condition) *quizSesiReportDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizSesiReportDo) Or(conds ...gen.Condition) *quizSesiReportDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizSesiReportDo) Select(conds ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizSesiReportDo) Where(conds ...gen.Condition) *quizSesiReportDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizSesiReportDo) Order(conds ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizSesiReportDo) Distinct(cols ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizSesiReportDo) Omit(cols ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizSesiReportDo) Join(table schema.Tabler, on ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizSesiReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizSesiReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizSesiReportDo) Group(cols ...field.Expr) *quizSesiReportDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizSesiReportDo) Having(conds ...gen.Condition) *quizSesiReportDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizSesiReportDo) Limit(limit int) *quizSesiReportDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizSesiReportDo) Offset(offset int) *quizSesiReportDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizSesiReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *quizSesiReportDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizSesiReportDo) Unscoped() *quizSesiReportDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizSesiReportDo) Create(values ...*entity.QuizSesiReport) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizSesiReportDo) CreateInBatches(values []*entity.QuizSesiReport, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizSesiReportDo) Save(values ...*entity.QuizSesiReport) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizSesiReportDo) First() (*entity.QuizSesiReport, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiReport), nil
	}
}

func (q quizSesiReportDo) Take() (*entity.QuizSesiReport, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiReport), nil
	}
}

func (q quizSesiReportDo) Last() (*entity.QuizSesiReport, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiReport), nil
	}
}

func (q quizSesiReportDo) Find() ([]*entity.QuizSesiReport, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuizSesiReport), err
}

func (q quizSesiReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuizSesiReport, err error) {
	buf := make([]*entity.QuizSesiReport, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizSesiReportDo) FindInBatches(result *[]*entity.QuizSesiReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizSesiReportDo) Attrs(attrs ...field.AssignExpr) *quizSesiReportDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizSesiReportDo) Assign(attrs ...field.AssignExpr) *quizSesiReportDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizSesiReportDo) Joins(fields ...field.RelationField) *quizSesiReportDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizSesiReportDo) Preload(fields ...field.RelationField) *quizSesiReportDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizSesiReportDo) FirstOrInit() (*entity.QuizSesiReport, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiReport), nil
	}
}

func (q quizSesiReportDo) FirstOrCreate() (*entity.QuizSesiReport, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiReport), nil
	}
}

func (q quizSesiReportDo) FindByPage(offset int, limit int) (result []*entity.QuizSesiReport, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizSesiReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizSesiReportDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizSesiReportDo) Delete(models ...*entity.QuizSesiReport) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizSesiReportDo) withDO(do gen.Dao) *quizSesiReportDo {
	q.DO = *do.(*gen.DO)
	return q
}
