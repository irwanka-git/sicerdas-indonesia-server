// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalGayaPekerjaanEng(db *gorm.DB, opts ...gen.DOOption) soalGayaPekerjaanEng {
	_soalGayaPekerjaanEng := soalGayaPekerjaanEng{}

	_soalGayaPekerjaanEng.soalGayaPekerjaanEngDo.UseDB(db, opts...)
	_soalGayaPekerjaanEng.soalGayaPekerjaanEngDo.UseModel(&entity.SoalGayaPekerjaanEng{})

	tableName := _soalGayaPekerjaanEng.soalGayaPekerjaanEngDo.TableName()
	_soalGayaPekerjaanEng.ALL = field.NewAsterisk(tableName)
	_soalGayaPekerjaanEng.Nomor = field.NewInt16(tableName, "nomor")
	_soalGayaPekerjaanEng.Deskripsi = field.NewString(tableName, "deskripsi")
	_soalGayaPekerjaanEng.KomponenA = field.NewString(tableName, "komponen_a")
	_soalGayaPekerjaanEng.KomponenB = field.NewString(tableName, "komponen_b")
	_soalGayaPekerjaanEng.KomponenC = field.NewString(tableName, "komponen_c")
	_soalGayaPekerjaanEng.KomponenD = field.NewString(tableName, "komponen_d")
	_soalGayaPekerjaanEng.KomponenE = field.NewString(tableName, "komponen_e")
	_soalGayaPekerjaanEng.KomponenF = field.NewString(tableName, "komponen_f")
	_soalGayaPekerjaanEng.KomponenG = field.NewString(tableName, "komponen_g")
	_soalGayaPekerjaanEng.KomponenH = field.NewString(tableName, "komponen_h")
	_soalGayaPekerjaanEng.KomponenI = field.NewString(tableName, "komponen_i")
	_soalGayaPekerjaanEng.KomponenJ = field.NewString(tableName, "komponen_j")
	_soalGayaPekerjaanEng.KomponenK = field.NewString(tableName, "komponen_k")
	_soalGayaPekerjaanEng.KomponenL = field.NewString(tableName, "komponen_l")
	_soalGayaPekerjaanEng.UUID = field.NewString(tableName, "uuid")

	_soalGayaPekerjaanEng.fillFieldMap()

	return _soalGayaPekerjaanEng
}

type soalGayaPekerjaanEng struct {
	soalGayaPekerjaanEngDo soalGayaPekerjaanEngDo

	ALL       field.Asterisk
	Nomor     field.Int16
	Deskripsi field.String
	KomponenA field.String
	KomponenB field.String
	KomponenC field.String
	KomponenD field.String
	KomponenE field.String
	KomponenF field.String
	KomponenG field.String
	KomponenH field.String
	KomponenI field.String
	KomponenJ field.String
	KomponenK field.String
	KomponenL field.String
	UUID      field.String

	fieldMap map[string]field.Expr
}

func (s soalGayaPekerjaanEng) Table(newTableName string) *soalGayaPekerjaanEng {
	s.soalGayaPekerjaanEngDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalGayaPekerjaanEng) As(alias string) *soalGayaPekerjaanEng {
	s.soalGayaPekerjaanEngDo.DO = *(s.soalGayaPekerjaanEngDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalGayaPekerjaanEng) updateTableName(table string) *soalGayaPekerjaanEng {
	s.ALL = field.NewAsterisk(table)
	s.Nomor = field.NewInt16(table, "nomor")
	s.Deskripsi = field.NewString(table, "deskripsi")
	s.KomponenA = field.NewString(table, "komponen_a")
	s.KomponenB = field.NewString(table, "komponen_b")
	s.KomponenC = field.NewString(table, "komponen_c")
	s.KomponenD = field.NewString(table, "komponen_d")
	s.KomponenE = field.NewString(table, "komponen_e")
	s.KomponenF = field.NewString(table, "komponen_f")
	s.KomponenG = field.NewString(table, "komponen_g")
	s.KomponenH = field.NewString(table, "komponen_h")
	s.KomponenI = field.NewString(table, "komponen_i")
	s.KomponenJ = field.NewString(table, "komponen_j")
	s.KomponenK = field.NewString(table, "komponen_k")
	s.KomponenL = field.NewString(table, "komponen_l")
	s.UUID = field.NewString(table, "uuid")

	s.fillFieldMap()

	return s
}

func (s *soalGayaPekerjaanEng) WithContext(ctx context.Context) *soalGayaPekerjaanEngDo {
	return s.soalGayaPekerjaanEngDo.WithContext(ctx)
}

func (s soalGayaPekerjaanEng) TableName() string { return s.soalGayaPekerjaanEngDo.TableName() }

func (s soalGayaPekerjaanEng) Alias() string { return s.soalGayaPekerjaanEngDo.Alias() }

func (s soalGayaPekerjaanEng) Columns(cols ...field.Expr) gen.Columns {
	return s.soalGayaPekerjaanEngDo.Columns(cols...)
}

func (s *soalGayaPekerjaanEng) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalGayaPekerjaanEng) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["nomor"] = s.Nomor
	s.fieldMap["deskripsi"] = s.Deskripsi
	s.fieldMap["komponen_a"] = s.KomponenA
	s.fieldMap["komponen_b"] = s.KomponenB
	s.fieldMap["komponen_c"] = s.KomponenC
	s.fieldMap["komponen_d"] = s.KomponenD
	s.fieldMap["komponen_e"] = s.KomponenE
	s.fieldMap["komponen_f"] = s.KomponenF
	s.fieldMap["komponen_g"] = s.KomponenG
	s.fieldMap["komponen_h"] = s.KomponenH
	s.fieldMap["komponen_i"] = s.KomponenI
	s.fieldMap["komponen_j"] = s.KomponenJ
	s.fieldMap["komponen_k"] = s.KomponenK
	s.fieldMap["komponen_l"] = s.KomponenL
	s.fieldMap["uuid"] = s.UUID
}

func (s soalGayaPekerjaanEng) clone(db *gorm.DB) soalGayaPekerjaanEng {
	s.soalGayaPekerjaanEngDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalGayaPekerjaanEng) replaceDB(db *gorm.DB) soalGayaPekerjaanEng {
	s.soalGayaPekerjaanEngDo.ReplaceDB(db)
	return s
}

type soalGayaPekerjaanEngDo struct{ gen.DO }

func (s soalGayaPekerjaanEngDo) Debug() *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Debug())
}

func (s soalGayaPekerjaanEngDo) WithContext(ctx context.Context) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalGayaPekerjaanEngDo) ReadDB() *soalGayaPekerjaanEngDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalGayaPekerjaanEngDo) WriteDB() *soalGayaPekerjaanEngDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalGayaPekerjaanEngDo) Session(config *gorm.Session) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalGayaPekerjaanEngDo) Clauses(conds ...clause.Expression) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalGayaPekerjaanEngDo) Returning(value interface{}, columns ...string) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalGayaPekerjaanEngDo) Not(conds ...gen.Condition) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalGayaPekerjaanEngDo) Or(conds ...gen.Condition) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalGayaPekerjaanEngDo) Select(conds ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalGayaPekerjaanEngDo) Where(conds ...gen.Condition) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalGayaPekerjaanEngDo) Order(conds ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalGayaPekerjaanEngDo) Distinct(cols ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalGayaPekerjaanEngDo) Omit(cols ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalGayaPekerjaanEngDo) Join(table schema.Tabler, on ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalGayaPekerjaanEngDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalGayaPekerjaanEngDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalGayaPekerjaanEngDo) Group(cols ...field.Expr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalGayaPekerjaanEngDo) Having(conds ...gen.Condition) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalGayaPekerjaanEngDo) Limit(limit int) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalGayaPekerjaanEngDo) Offset(offset int) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalGayaPekerjaanEngDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalGayaPekerjaanEngDo) Unscoped() *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalGayaPekerjaanEngDo) Create(values ...*entity.SoalGayaPekerjaanEng) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalGayaPekerjaanEngDo) CreateInBatches(values []*entity.SoalGayaPekerjaanEng, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalGayaPekerjaanEngDo) Save(values ...*entity.SoalGayaPekerjaanEng) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalGayaPekerjaanEngDo) First() (*entity.SoalGayaPekerjaanEng, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaPekerjaanEng), nil
	}
}

func (s soalGayaPekerjaanEngDo) Take() (*entity.SoalGayaPekerjaanEng, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaPekerjaanEng), nil
	}
}

func (s soalGayaPekerjaanEngDo) Last() (*entity.SoalGayaPekerjaanEng, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaPekerjaanEng), nil
	}
}

func (s soalGayaPekerjaanEngDo) Find() ([]*entity.SoalGayaPekerjaanEng, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalGayaPekerjaanEng), err
}

func (s soalGayaPekerjaanEngDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalGayaPekerjaanEng, err error) {
	buf := make([]*entity.SoalGayaPekerjaanEng, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalGayaPekerjaanEngDo) FindInBatches(result *[]*entity.SoalGayaPekerjaanEng, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalGayaPekerjaanEngDo) Attrs(attrs ...field.AssignExpr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalGayaPekerjaanEngDo) Assign(attrs ...field.AssignExpr) *soalGayaPekerjaanEngDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalGayaPekerjaanEngDo) Joins(fields ...field.RelationField) *soalGayaPekerjaanEngDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalGayaPekerjaanEngDo) Preload(fields ...field.RelationField) *soalGayaPekerjaanEngDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalGayaPekerjaanEngDo) FirstOrInit() (*entity.SoalGayaPekerjaanEng, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaPekerjaanEng), nil
	}
}

func (s soalGayaPekerjaanEngDo) FirstOrCreate() (*entity.SoalGayaPekerjaanEng, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalGayaPekerjaanEng), nil
	}
}

func (s soalGayaPekerjaanEngDo) FindByPage(offset int, limit int) (result []*entity.SoalGayaPekerjaanEng, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalGayaPekerjaanEngDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalGayaPekerjaanEngDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalGayaPekerjaanEngDo) Delete(models ...*entity.SoalGayaPekerjaanEng) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalGayaPekerjaanEngDo) withDO(do gen.Dao) *soalGayaPekerjaanEngDo {
	s.DO = *do.(*gen.DO)
	return s
}
