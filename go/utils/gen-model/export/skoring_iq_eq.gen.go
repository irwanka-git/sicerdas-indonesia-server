// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkoringIqEq(db *gorm.DB, opts ...gen.DOOption) skoringIqEq {
	_skoringIqEq := skoringIqEq{}

	_skoringIqEq.skoringIqEqDo.UseDB(db, opts...)
	_skoringIqEq.skoringIqEqDo.UseModel(&entity.SkoringIqEq{})

	tableName := _skoringIqEq.skoringIqEqDo.TableName()
	_skoringIqEq.ALL = field.NewAsterisk(tableName)
	_skoringIqEq.ID = field.NewInt32(tableName, "id")
	_skoringIqEq.IDUser = field.NewInt32(tableName, "id_user")
	_skoringIqEq.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skoringIqEq.TpaIu = field.NewInt32(tableName, "tpa_iu")
	_skoringIqEq.TpaPv = field.NewInt32(tableName, "tpa_pv")
	_skoringIqEq.TpaPk = field.NewInt32(tableName, "tpa_pk")
	_skoringIqEq.TpaPa = field.NewInt32(tableName, "tpa_pa")
	_skoringIqEq.TpaPs = field.NewInt32(tableName, "tpa_ps")
	_skoringIqEq.TpaPm = field.NewInt32(tableName, "tpa_pm")
	_skoringIqEq.TpaKt = field.NewInt32(tableName, "tpa_kt")
	_skoringIqEq.TpaIq = field.NewInt32(tableName, "tpa_iq")
	_skoringIqEq.SkorIq = field.NewFloat32(tableName, "skor_iq")
	_skoringIqEq.PribadiMotivasi = field.NewInt32(tableName, "pribadi_motivasi")
	_skoringIqEq.PribadiJuang = field.NewInt32(tableName, "pribadi_juang")
	_skoringIqEq.PribadiYakin = field.NewInt32(tableName, "pribadi_yakin")
	_skoringIqEq.PribadiPercaya = field.NewInt32(tableName, "pribadi_percaya")
	_skoringIqEq.PribadiKonsep = field.NewInt32(tableName, "pribadi_konsep")
	_skoringIqEq.PribadiKreativitas = field.NewInt32(tableName, "pribadi_kreativitas")
	_skoringIqEq.PribadiMimpin = field.NewInt32(tableName, "pribadi_mimpin")
	_skoringIqEq.PribadiEntrepreneur = field.NewInt32(tableName, "pribadi_entrepreneur")
	_skoringIqEq.PribadiStress = field.NewInt32(tableName, "pribadi_stress")
	_skoringIqEq.PribadiEmosi = field.NewInt32(tableName, "pribadi_emosi")
	_skoringIqEq.PribadiSosial = field.NewInt32(tableName, "pribadi_sosial")
	_skoringIqEq.PribadiEmpati = field.NewInt32(tableName, "pribadi_empati")
	_skoringIqEq.SelesaiSkoring = field.NewInt32(tableName, "selesai_skoring")
	_skoringIqEq.SkorMotivasi = field.NewInt32(tableName, "skor_motivasi")
	_skoringIqEq.SkorDayaJuang = field.NewInt32(tableName, "skor_daya_juang")
	_skoringIqEq.SkorKepemimpinan = field.NewInt32(tableName, "skor_kepemimpinan")
	_skoringIqEq.SkorKreativitas = field.NewInt32(tableName, "skor_kreativitas")
	_skoringIqEq.SkorDayaTahanStress = field.NewInt32(tableName, "skor_daya_tahan_stress")
	_skoringIqEq.SkorKetelitian = field.NewInt32(tableName, "skor_ketelitian")
	_skoringIqEq.SkorKecepatanKerja = field.NewInt32(tableName, "skor_kecepatan_kerja")
	_skoringIqEq.SkorKeyakinanDiri = field.NewInt32(tableName, "skor_keyakinan_diri")
	_skoringIqEq.SkorPercayaDiri = field.NewInt32(tableName, "skor_percaya_diri")
	_skoringIqEq.SkorKonsepDiri = field.NewInt32(tableName, "skor_konsep_diri")
	_skoringIqEq.SkorRegulasiEmosi = field.NewInt32(tableName, "skor_regulasi_emosi")
	_skoringIqEq.SkorKeterampilan = field.NewInt32(tableName, "skor_keterampilan")
	_skoringIqEq.SkorEmpati = field.NewInt32(tableName, "skor_empati")
	_skoringIqEq.SkorMandiri = field.NewInt32(tableName, "skor_mandiri")

	_skoringIqEq.fillFieldMap()

	return _skoringIqEq
}

type skoringIqEq struct {
	skoringIqEqDo skoringIqEqDo

	ALL                 field.Asterisk
	ID                  field.Int32
	IDUser              field.Int32
	IDQuiz              field.Int32
	TpaIu               field.Int32
	TpaPv               field.Int32
	TpaPk               field.Int32
	TpaPa               field.Int32
	TpaPs               field.Int32
	TpaPm               field.Int32
	TpaKt               field.Int32
	TpaIq               field.Int32
	SkorIq              field.Float32
	PribadiMotivasi     field.Int32
	PribadiJuang        field.Int32
	PribadiYakin        field.Int32
	PribadiPercaya      field.Int32
	PribadiKonsep       field.Int32
	PribadiKreativitas  field.Int32
	PribadiMimpin       field.Int32
	PribadiEntrepreneur field.Int32
	PribadiStress       field.Int32
	PribadiEmosi        field.Int32
	PribadiSosial       field.Int32
	PribadiEmpati       field.Int32
	SelesaiSkoring      field.Int32
	SkorMotivasi        field.Int32
	SkorDayaJuang       field.Int32
	SkorKepemimpinan    field.Int32
	SkorKreativitas     field.Int32
	SkorDayaTahanStress field.Int32
	SkorKetelitian      field.Int32
	SkorKecepatanKerja  field.Int32
	SkorKeyakinanDiri   field.Int32
	SkorPercayaDiri     field.Int32
	SkorKonsepDiri      field.Int32
	SkorRegulasiEmosi   field.Int32
	SkorKeterampilan    field.Int32
	SkorEmpati          field.Int32
	SkorMandiri         field.Int32

	fieldMap map[string]field.Expr
}

func (s skoringIqEq) Table(newTableName string) *skoringIqEq {
	s.skoringIqEqDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skoringIqEq) As(alias string) *skoringIqEq {
	s.skoringIqEqDo.DO = *(s.skoringIqEqDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skoringIqEq) updateTableName(table string) *skoringIqEq {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TpaIu = field.NewInt32(table, "tpa_iu")
	s.TpaPv = field.NewInt32(table, "tpa_pv")
	s.TpaPk = field.NewInt32(table, "tpa_pk")
	s.TpaPa = field.NewInt32(table, "tpa_pa")
	s.TpaPs = field.NewInt32(table, "tpa_ps")
	s.TpaPm = field.NewInt32(table, "tpa_pm")
	s.TpaKt = field.NewInt32(table, "tpa_kt")
	s.TpaIq = field.NewInt32(table, "tpa_iq")
	s.SkorIq = field.NewFloat32(table, "skor_iq")
	s.PribadiMotivasi = field.NewInt32(table, "pribadi_motivasi")
	s.PribadiJuang = field.NewInt32(table, "pribadi_juang")
	s.PribadiYakin = field.NewInt32(table, "pribadi_yakin")
	s.PribadiPercaya = field.NewInt32(table, "pribadi_percaya")
	s.PribadiKonsep = field.NewInt32(table, "pribadi_konsep")
	s.PribadiKreativitas = field.NewInt32(table, "pribadi_kreativitas")
	s.PribadiMimpin = field.NewInt32(table, "pribadi_mimpin")
	s.PribadiEntrepreneur = field.NewInt32(table, "pribadi_entrepreneur")
	s.PribadiStress = field.NewInt32(table, "pribadi_stress")
	s.PribadiEmosi = field.NewInt32(table, "pribadi_emosi")
	s.PribadiSosial = field.NewInt32(table, "pribadi_sosial")
	s.PribadiEmpati = field.NewInt32(table, "pribadi_empati")
	s.SelesaiSkoring = field.NewInt32(table, "selesai_skoring")
	s.SkorMotivasi = field.NewInt32(table, "skor_motivasi")
	s.SkorDayaJuang = field.NewInt32(table, "skor_daya_juang")
	s.SkorKepemimpinan = field.NewInt32(table, "skor_kepemimpinan")
	s.SkorKreativitas = field.NewInt32(table, "skor_kreativitas")
	s.SkorDayaTahanStress = field.NewInt32(table, "skor_daya_tahan_stress")
	s.SkorKetelitian = field.NewInt32(table, "skor_ketelitian")
	s.SkorKecepatanKerja = field.NewInt32(table, "skor_kecepatan_kerja")
	s.SkorKeyakinanDiri = field.NewInt32(table, "skor_keyakinan_diri")
	s.SkorPercayaDiri = field.NewInt32(table, "skor_percaya_diri")
	s.SkorKonsepDiri = field.NewInt32(table, "skor_konsep_diri")
	s.SkorRegulasiEmosi = field.NewInt32(table, "skor_regulasi_emosi")
	s.SkorKeterampilan = field.NewInt32(table, "skor_keterampilan")
	s.SkorEmpati = field.NewInt32(table, "skor_empati")
	s.SkorMandiri = field.NewInt32(table, "skor_mandiri")

	s.fillFieldMap()

	return s
}

func (s *skoringIqEq) WithContext(ctx context.Context) *skoringIqEqDo {
	return s.skoringIqEqDo.WithContext(ctx)
}

func (s skoringIqEq) TableName() string { return s.skoringIqEqDo.TableName() }

func (s skoringIqEq) Alias() string { return s.skoringIqEqDo.Alias() }

func (s skoringIqEq) Columns(cols ...field.Expr) gen.Columns { return s.skoringIqEqDo.Columns(cols...) }

func (s *skoringIqEq) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skoringIqEq) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 39)
	s.fieldMap["id"] = s.ID
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tpa_iu"] = s.TpaIu
	s.fieldMap["tpa_pv"] = s.TpaPv
	s.fieldMap["tpa_pk"] = s.TpaPk
	s.fieldMap["tpa_pa"] = s.TpaPa
	s.fieldMap["tpa_ps"] = s.TpaPs
	s.fieldMap["tpa_pm"] = s.TpaPm
	s.fieldMap["tpa_kt"] = s.TpaKt
	s.fieldMap["tpa_iq"] = s.TpaIq
	s.fieldMap["skor_iq"] = s.SkorIq
	s.fieldMap["pribadi_motivasi"] = s.PribadiMotivasi
	s.fieldMap["pribadi_juang"] = s.PribadiJuang
	s.fieldMap["pribadi_yakin"] = s.PribadiYakin
	s.fieldMap["pribadi_percaya"] = s.PribadiPercaya
	s.fieldMap["pribadi_konsep"] = s.PribadiKonsep
	s.fieldMap["pribadi_kreativitas"] = s.PribadiKreativitas
	s.fieldMap["pribadi_mimpin"] = s.PribadiMimpin
	s.fieldMap["pribadi_entrepreneur"] = s.PribadiEntrepreneur
	s.fieldMap["pribadi_stress"] = s.PribadiStress
	s.fieldMap["pribadi_emosi"] = s.PribadiEmosi
	s.fieldMap["pribadi_sosial"] = s.PribadiSosial
	s.fieldMap["pribadi_empati"] = s.PribadiEmpati
	s.fieldMap["selesai_skoring"] = s.SelesaiSkoring
	s.fieldMap["skor_motivasi"] = s.SkorMotivasi
	s.fieldMap["skor_daya_juang"] = s.SkorDayaJuang
	s.fieldMap["skor_kepemimpinan"] = s.SkorKepemimpinan
	s.fieldMap["skor_kreativitas"] = s.SkorKreativitas
	s.fieldMap["skor_daya_tahan_stress"] = s.SkorDayaTahanStress
	s.fieldMap["skor_ketelitian"] = s.SkorKetelitian
	s.fieldMap["skor_kecepatan_kerja"] = s.SkorKecepatanKerja
	s.fieldMap["skor_keyakinan_diri"] = s.SkorKeyakinanDiri
	s.fieldMap["skor_percaya_diri"] = s.SkorPercayaDiri
	s.fieldMap["skor_konsep_diri"] = s.SkorKonsepDiri
	s.fieldMap["skor_regulasi_emosi"] = s.SkorRegulasiEmosi
	s.fieldMap["skor_keterampilan"] = s.SkorKeterampilan
	s.fieldMap["skor_empati"] = s.SkorEmpati
	s.fieldMap["skor_mandiri"] = s.SkorMandiri
}

func (s skoringIqEq) clone(db *gorm.DB) skoringIqEq {
	s.skoringIqEqDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skoringIqEq) replaceDB(db *gorm.DB) skoringIqEq {
	s.skoringIqEqDo.ReplaceDB(db)
	return s
}

type skoringIqEqDo struct{ gen.DO }

func (s skoringIqEqDo) Debug() *skoringIqEqDo {
	return s.withDO(s.DO.Debug())
}

func (s skoringIqEqDo) WithContext(ctx context.Context) *skoringIqEqDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skoringIqEqDo) ReadDB() *skoringIqEqDo {
	return s.Clauses(dbresolver.Read)
}

func (s skoringIqEqDo) WriteDB() *skoringIqEqDo {
	return s.Clauses(dbresolver.Write)
}

func (s skoringIqEqDo) Session(config *gorm.Session) *skoringIqEqDo {
	return s.withDO(s.DO.Session(config))
}

func (s skoringIqEqDo) Clauses(conds ...clause.Expression) *skoringIqEqDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skoringIqEqDo) Returning(value interface{}, columns ...string) *skoringIqEqDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skoringIqEqDo) Not(conds ...gen.Condition) *skoringIqEqDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skoringIqEqDo) Or(conds ...gen.Condition) *skoringIqEqDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skoringIqEqDo) Select(conds ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skoringIqEqDo) Where(conds ...gen.Condition) *skoringIqEqDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skoringIqEqDo) Order(conds ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skoringIqEqDo) Distinct(cols ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skoringIqEqDo) Omit(cols ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skoringIqEqDo) Join(table schema.Tabler, on ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skoringIqEqDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skoringIqEqDo) RightJoin(table schema.Tabler, on ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skoringIqEqDo) Group(cols ...field.Expr) *skoringIqEqDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skoringIqEqDo) Having(conds ...gen.Condition) *skoringIqEqDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skoringIqEqDo) Limit(limit int) *skoringIqEqDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skoringIqEqDo) Offset(offset int) *skoringIqEqDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skoringIqEqDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skoringIqEqDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skoringIqEqDo) Unscoped() *skoringIqEqDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skoringIqEqDo) Create(values ...*entity.SkoringIqEq) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skoringIqEqDo) CreateInBatches(values []*entity.SkoringIqEq, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skoringIqEqDo) Save(values ...*entity.SkoringIqEq) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skoringIqEqDo) First() (*entity.SkoringIqEq, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringIqEq), nil
	}
}

func (s skoringIqEqDo) Take() (*entity.SkoringIqEq, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringIqEq), nil
	}
}

func (s skoringIqEqDo) Last() (*entity.SkoringIqEq, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringIqEq), nil
	}
}

func (s skoringIqEqDo) Find() ([]*entity.SkoringIqEq, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkoringIqEq), err
}

func (s skoringIqEqDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkoringIqEq, err error) {
	buf := make([]*entity.SkoringIqEq, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skoringIqEqDo) FindInBatches(result *[]*entity.SkoringIqEq, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skoringIqEqDo) Attrs(attrs ...field.AssignExpr) *skoringIqEqDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skoringIqEqDo) Assign(attrs ...field.AssignExpr) *skoringIqEqDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skoringIqEqDo) Joins(fields ...field.RelationField) *skoringIqEqDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skoringIqEqDo) Preload(fields ...field.RelationField) *skoringIqEqDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skoringIqEqDo) FirstOrInit() (*entity.SkoringIqEq, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringIqEq), nil
	}
}

func (s skoringIqEqDo) FirstOrCreate() (*entity.SkoringIqEq, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringIqEq), nil
	}
}

func (s skoringIqEqDo) FindByPage(offset int, limit int) (result []*entity.SkoringIqEq, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skoringIqEqDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skoringIqEqDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skoringIqEqDo) Delete(models ...*entity.SkoringIqEq) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skoringIqEqDo) withDO(do gen.Dao) *skoringIqEqDo {
	s.DO = *do.(*gen.DO)
	return s
}
