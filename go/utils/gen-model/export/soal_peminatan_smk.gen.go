// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalPeminatanSmk(db *gorm.DB, opts ...gen.DOOption) soalPeminatanSmk {
	_soalPeminatanSmk := soalPeminatanSmk{}

	_soalPeminatanSmk.soalPeminatanSmkDo.UseDB(db, opts...)
	_soalPeminatanSmk.soalPeminatanSmkDo.UseModel(&entity.SoalPeminatanSmk{})

	tableName := _soalPeminatanSmk.soalPeminatanSmkDo.TableName()
	_soalPeminatanSmk.ALL = field.NewAsterisk(tableName)
	_soalPeminatanSmk.IDKegiatan = field.NewInt32(tableName, "id_kegiatan")
	_soalPeminatanSmk.Nomor = field.NewString(tableName, "nomor")
	_soalPeminatanSmk.Kegiatan = field.NewString(tableName, "kegiatan")
	_soalPeminatanSmk.Gambar = field.NewString(tableName, "gambar")
	_soalPeminatanSmk.Keterangan = field.NewString(tableName, "keterangan")
	_soalPeminatanSmk.Deskripsi = field.NewString(tableName, "deskripsi")
	_soalPeminatanSmk.UUID = field.NewString(tableName, "uuid")
	_soalPeminatanSmk.Paket = field.NewString(tableName, "paket")

	_soalPeminatanSmk.fillFieldMap()

	return _soalPeminatanSmk
}

type soalPeminatanSmk struct {
	soalPeminatanSmkDo soalPeminatanSmkDo

	ALL        field.Asterisk
	IDKegiatan field.Int32
	Nomor      field.String
	Kegiatan   field.String
	Gambar     field.String
	Keterangan field.String
	Deskripsi  field.String
	UUID       field.String
	Paket      field.String

	fieldMap map[string]field.Expr
}

func (s soalPeminatanSmk) Table(newTableName string) *soalPeminatanSmk {
	s.soalPeminatanSmkDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalPeminatanSmk) As(alias string) *soalPeminatanSmk {
	s.soalPeminatanSmkDo.DO = *(s.soalPeminatanSmkDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalPeminatanSmk) updateTableName(table string) *soalPeminatanSmk {
	s.ALL = field.NewAsterisk(table)
	s.IDKegiatan = field.NewInt32(table, "id_kegiatan")
	s.Nomor = field.NewString(table, "nomor")
	s.Kegiatan = field.NewString(table, "kegiatan")
	s.Gambar = field.NewString(table, "gambar")
	s.Keterangan = field.NewString(table, "keterangan")
	s.Deskripsi = field.NewString(table, "deskripsi")
	s.UUID = field.NewString(table, "uuid")
	s.Paket = field.NewString(table, "paket")

	s.fillFieldMap()

	return s
}

func (s *soalPeminatanSmk) WithContext(ctx context.Context) *soalPeminatanSmkDo {
	return s.soalPeminatanSmkDo.WithContext(ctx)
}

func (s soalPeminatanSmk) TableName() string { return s.soalPeminatanSmkDo.TableName() }

func (s soalPeminatanSmk) Alias() string { return s.soalPeminatanSmkDo.Alias() }

func (s soalPeminatanSmk) Columns(cols ...field.Expr) gen.Columns {
	return s.soalPeminatanSmkDo.Columns(cols...)
}

func (s *soalPeminatanSmk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalPeminatanSmk) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id_kegiatan"] = s.IDKegiatan
	s.fieldMap["nomor"] = s.Nomor
	s.fieldMap["kegiatan"] = s.Kegiatan
	s.fieldMap["gambar"] = s.Gambar
	s.fieldMap["keterangan"] = s.Keterangan
	s.fieldMap["deskripsi"] = s.Deskripsi
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["paket"] = s.Paket
}

func (s soalPeminatanSmk) clone(db *gorm.DB) soalPeminatanSmk {
	s.soalPeminatanSmkDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalPeminatanSmk) replaceDB(db *gorm.DB) soalPeminatanSmk {
	s.soalPeminatanSmkDo.ReplaceDB(db)
	return s
}

type soalPeminatanSmkDo struct{ gen.DO }

func (s soalPeminatanSmkDo) Debug() *soalPeminatanSmkDo {
	return s.withDO(s.DO.Debug())
}

func (s soalPeminatanSmkDo) WithContext(ctx context.Context) *soalPeminatanSmkDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalPeminatanSmkDo) ReadDB() *soalPeminatanSmkDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalPeminatanSmkDo) WriteDB() *soalPeminatanSmkDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalPeminatanSmkDo) Session(config *gorm.Session) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalPeminatanSmkDo) Clauses(conds ...clause.Expression) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalPeminatanSmkDo) Returning(value interface{}, columns ...string) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalPeminatanSmkDo) Not(conds ...gen.Condition) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalPeminatanSmkDo) Or(conds ...gen.Condition) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalPeminatanSmkDo) Select(conds ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalPeminatanSmkDo) Where(conds ...gen.Condition) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalPeminatanSmkDo) Order(conds ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalPeminatanSmkDo) Distinct(cols ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalPeminatanSmkDo) Omit(cols ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalPeminatanSmkDo) Join(table schema.Tabler, on ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalPeminatanSmkDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalPeminatanSmkDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalPeminatanSmkDo) Group(cols ...field.Expr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalPeminatanSmkDo) Having(conds ...gen.Condition) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalPeminatanSmkDo) Limit(limit int) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalPeminatanSmkDo) Offset(offset int) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalPeminatanSmkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalPeminatanSmkDo) Unscoped() *soalPeminatanSmkDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalPeminatanSmkDo) Create(values ...*entity.SoalPeminatanSmk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalPeminatanSmkDo) CreateInBatches(values []*entity.SoalPeminatanSmk, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalPeminatanSmkDo) Save(values ...*entity.SoalPeminatanSmk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalPeminatanSmkDo) First() (*entity.SoalPeminatanSmk, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalPeminatanSmk), nil
	}
}

func (s soalPeminatanSmkDo) Take() (*entity.SoalPeminatanSmk, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalPeminatanSmk), nil
	}
}

func (s soalPeminatanSmkDo) Last() (*entity.SoalPeminatanSmk, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalPeminatanSmk), nil
	}
}

func (s soalPeminatanSmkDo) Find() ([]*entity.SoalPeminatanSmk, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalPeminatanSmk), err
}

func (s soalPeminatanSmkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalPeminatanSmk, err error) {
	buf := make([]*entity.SoalPeminatanSmk, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalPeminatanSmkDo) FindInBatches(result *[]*entity.SoalPeminatanSmk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalPeminatanSmkDo) Attrs(attrs ...field.AssignExpr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalPeminatanSmkDo) Assign(attrs ...field.AssignExpr) *soalPeminatanSmkDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalPeminatanSmkDo) Joins(fields ...field.RelationField) *soalPeminatanSmkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalPeminatanSmkDo) Preload(fields ...field.RelationField) *soalPeminatanSmkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalPeminatanSmkDo) FirstOrInit() (*entity.SoalPeminatanSmk, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalPeminatanSmk), nil
	}
}

func (s soalPeminatanSmkDo) FirstOrCreate() (*entity.SoalPeminatanSmk, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalPeminatanSmk), nil
	}
}

func (s soalPeminatanSmkDo) FindByPage(offset int, limit int) (result []*entity.SoalPeminatanSmk, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalPeminatanSmkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalPeminatanSmkDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalPeminatanSmkDo) Delete(models ...*entity.SoalPeminatanSmk) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalPeminatanSmkDo) withDO(do gen.Dao) *soalPeminatanSmkDo {
	s.DO = *do.(*gen.DO)
	return s
}
