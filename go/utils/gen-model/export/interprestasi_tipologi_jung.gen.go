// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newInterprestasiTipologiJung(db *gorm.DB, opts ...gen.DOOption) interprestasiTipologiJung {
	_interprestasiTipologiJung := interprestasiTipologiJung{}

	_interprestasiTipologiJung.interprestasiTipologiJungDo.UseDB(db, opts...)
	_interprestasiTipologiJung.interprestasiTipologiJungDo.UseModel(&entity.InterprestasiTipologiJung{})

	tableName := _interprestasiTipologiJung.interprestasiTipologiJungDo.TableName()
	_interprestasiTipologiJung.ALL = field.NewAsterisk(tableName)
	_interprestasiTipologiJung.IDInterprestasi = field.NewInt32(tableName, "id_interprestasi")
	_interprestasiTipologiJung.Urutan = field.NewInt32(tableName, "urutan")
	_interprestasiTipologiJung.Kode = field.NewString(tableName, "kode")
	_interprestasiTipologiJung.Nama = field.NewString(tableName, "nama")
	_interprestasiTipologiJung.Keterangan = field.NewString(tableName, "keterangan")
	_interprestasiTipologiJung.Deskripsi = field.NewString(tableName, "deskripsi")
	_interprestasiTipologiJung.UUID = field.NewString(tableName, "uuid")

	_interprestasiTipologiJung.fillFieldMap()

	return _interprestasiTipologiJung
}

type interprestasiTipologiJung struct {
	interprestasiTipologiJungDo interprestasiTipologiJungDo

	ALL             field.Asterisk
	IDInterprestasi field.Int32
	Urutan          field.Int32
	Kode            field.String
	Nama            field.String
	Keterangan      field.String
	Deskripsi       field.String
	UUID            field.String

	fieldMap map[string]field.Expr
}

func (i interprestasiTipologiJung) Table(newTableName string) *interprestasiTipologiJung {
	i.interprestasiTipologiJungDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i interprestasiTipologiJung) As(alias string) *interprestasiTipologiJung {
	i.interprestasiTipologiJungDo.DO = *(i.interprestasiTipologiJungDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *interprestasiTipologiJung) updateTableName(table string) *interprestasiTipologiJung {
	i.ALL = field.NewAsterisk(table)
	i.IDInterprestasi = field.NewInt32(table, "id_interprestasi")
	i.Urutan = field.NewInt32(table, "urutan")
	i.Kode = field.NewString(table, "kode")
	i.Nama = field.NewString(table, "nama")
	i.Keterangan = field.NewString(table, "keterangan")
	i.Deskripsi = field.NewString(table, "deskripsi")
	i.UUID = field.NewString(table, "uuid")

	i.fillFieldMap()

	return i
}

func (i *interprestasiTipologiJung) WithContext(ctx context.Context) *interprestasiTipologiJungDo {
	return i.interprestasiTipologiJungDo.WithContext(ctx)
}

func (i interprestasiTipologiJung) TableName() string {
	return i.interprestasiTipologiJungDo.TableName()
}

func (i interprestasiTipologiJung) Alias() string { return i.interprestasiTipologiJungDo.Alias() }

func (i interprestasiTipologiJung) Columns(cols ...field.Expr) gen.Columns {
	return i.interprestasiTipologiJungDo.Columns(cols...)
}

func (i *interprestasiTipologiJung) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *interprestasiTipologiJung) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id_interprestasi"] = i.IDInterprestasi
	i.fieldMap["urutan"] = i.Urutan
	i.fieldMap["kode"] = i.Kode
	i.fieldMap["nama"] = i.Nama
	i.fieldMap["keterangan"] = i.Keterangan
	i.fieldMap["deskripsi"] = i.Deskripsi
	i.fieldMap["uuid"] = i.UUID
}

func (i interprestasiTipologiJung) clone(db *gorm.DB) interprestasiTipologiJung {
	i.interprestasiTipologiJungDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i interprestasiTipologiJung) replaceDB(db *gorm.DB) interprestasiTipologiJung {
	i.interprestasiTipologiJungDo.ReplaceDB(db)
	return i
}

type interprestasiTipologiJungDo struct{ gen.DO }

func (i interprestasiTipologiJungDo) Debug() *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Debug())
}

func (i interprestasiTipologiJungDo) WithContext(ctx context.Context) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i interprestasiTipologiJungDo) ReadDB() *interprestasiTipologiJungDo {
	return i.Clauses(dbresolver.Read)
}

func (i interprestasiTipologiJungDo) WriteDB() *interprestasiTipologiJungDo {
	return i.Clauses(dbresolver.Write)
}

func (i interprestasiTipologiJungDo) Session(config *gorm.Session) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Session(config))
}

func (i interprestasiTipologiJungDo) Clauses(conds ...clause.Expression) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i interprestasiTipologiJungDo) Returning(value interface{}, columns ...string) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i interprestasiTipologiJungDo) Not(conds ...gen.Condition) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i interprestasiTipologiJungDo) Or(conds ...gen.Condition) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i interprestasiTipologiJungDo) Select(conds ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i interprestasiTipologiJungDo) Where(conds ...gen.Condition) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i interprestasiTipologiJungDo) Order(conds ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i interprestasiTipologiJungDo) Distinct(cols ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i interprestasiTipologiJungDo) Omit(cols ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i interprestasiTipologiJungDo) Join(table schema.Tabler, on ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i interprestasiTipologiJungDo) LeftJoin(table schema.Tabler, on ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i interprestasiTipologiJungDo) RightJoin(table schema.Tabler, on ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i interprestasiTipologiJungDo) Group(cols ...field.Expr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i interprestasiTipologiJungDo) Having(conds ...gen.Condition) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i interprestasiTipologiJungDo) Limit(limit int) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i interprestasiTipologiJungDo) Offset(offset int) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i interprestasiTipologiJungDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i interprestasiTipologiJungDo) Unscoped() *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Unscoped())
}

func (i interprestasiTipologiJungDo) Create(values ...*entity.InterprestasiTipologiJung) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i interprestasiTipologiJungDo) CreateInBatches(values []*entity.InterprestasiTipologiJung, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i interprestasiTipologiJungDo) Save(values ...*entity.InterprestasiTipologiJung) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i interprestasiTipologiJungDo) First() (*entity.InterprestasiTipologiJung, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJung), nil
	}
}

func (i interprestasiTipologiJungDo) Take() (*entity.InterprestasiTipologiJung, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJung), nil
	}
}

func (i interprestasiTipologiJungDo) Last() (*entity.InterprestasiTipologiJung, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJung), nil
	}
}

func (i interprestasiTipologiJungDo) Find() ([]*entity.InterprestasiTipologiJung, error) {
	result, err := i.DO.Find()
	return result.([]*entity.InterprestasiTipologiJung), err
}

func (i interprestasiTipologiJungDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.InterprestasiTipologiJung, err error) {
	buf := make([]*entity.InterprestasiTipologiJung, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i interprestasiTipologiJungDo) FindInBatches(result *[]*entity.InterprestasiTipologiJung, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i interprestasiTipologiJungDo) Attrs(attrs ...field.AssignExpr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i interprestasiTipologiJungDo) Assign(attrs ...field.AssignExpr) *interprestasiTipologiJungDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i interprestasiTipologiJungDo) Joins(fields ...field.RelationField) *interprestasiTipologiJungDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i interprestasiTipologiJungDo) Preload(fields ...field.RelationField) *interprestasiTipologiJungDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i interprestasiTipologiJungDo) FirstOrInit() (*entity.InterprestasiTipologiJung, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJung), nil
	}
}

func (i interprestasiTipologiJungDo) FirstOrCreate() (*entity.InterprestasiTipologiJung, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.InterprestasiTipologiJung), nil
	}
}

func (i interprestasiTipologiJungDo) FindByPage(offset int, limit int) (result []*entity.InterprestasiTipologiJung, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i interprestasiTipologiJungDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i interprestasiTipologiJungDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i interprestasiTipologiJungDo) Delete(models ...*entity.InterprestasiTipologiJung) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *interprestasiTipologiJungDo) withDO(do gen.Dao) *interprestasiTipologiJungDo {
	i.DO = *do.(*gen.DO)
	return i
}
