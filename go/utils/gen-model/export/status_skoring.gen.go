// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newStatusSkoring(db *gorm.DB, opts ...gen.DOOption) statusSkoring {
	_statusSkoring := statusSkoring{}

	_statusSkoring.statusSkoringDo.UseDB(db, opts...)
	_statusSkoring.statusSkoringDo.UseModel(&entity.StatusSkoring{})

	tableName := _statusSkoring.statusSkoringDo.TableName()
	_statusSkoring.ALL = field.NewAsterisk(tableName)
	_statusSkoring.ID = field.NewInt32(tableName, "id")
	_statusSkoring.Status = field.NewInt16(tableName, "status")
	_statusSkoring.Mulai = field.NewString(tableName, "mulai")
	_statusSkoring.Selesai = field.NewString(tableName, "selesai")
	_statusSkoring.Jumlah = field.NewInt32(tableName, "jumlah")

	_statusSkoring.fillFieldMap()

	return _statusSkoring
}

type statusSkoring struct {
	statusSkoringDo statusSkoringDo

	ALL     field.Asterisk
	ID      field.Int32
	Status  field.Int16
	Mulai   field.String
	Selesai field.String
	Jumlah  field.Int32

	fieldMap map[string]field.Expr
}

func (s statusSkoring) Table(newTableName string) *statusSkoring {
	s.statusSkoringDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s statusSkoring) As(alias string) *statusSkoring {
	s.statusSkoringDo.DO = *(s.statusSkoringDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *statusSkoring) updateTableName(table string) *statusSkoring {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Status = field.NewInt16(table, "status")
	s.Mulai = field.NewString(table, "mulai")
	s.Selesai = field.NewString(table, "selesai")
	s.Jumlah = field.NewInt32(table, "jumlah")

	s.fillFieldMap()

	return s
}

func (s *statusSkoring) WithContext(ctx context.Context) *statusSkoringDo {
	return s.statusSkoringDo.WithContext(ctx)
}

func (s statusSkoring) TableName() string { return s.statusSkoringDo.TableName() }

func (s statusSkoring) Alias() string { return s.statusSkoringDo.Alias() }

func (s statusSkoring) Columns(cols ...field.Expr) gen.Columns {
	return s.statusSkoringDo.Columns(cols...)
}

func (s *statusSkoring) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *statusSkoring) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["status"] = s.Status
	s.fieldMap["mulai"] = s.Mulai
	s.fieldMap["selesai"] = s.Selesai
	s.fieldMap["jumlah"] = s.Jumlah
}

func (s statusSkoring) clone(db *gorm.DB) statusSkoring {
	s.statusSkoringDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s statusSkoring) replaceDB(db *gorm.DB) statusSkoring {
	s.statusSkoringDo.ReplaceDB(db)
	return s
}

type statusSkoringDo struct{ gen.DO }

func (s statusSkoringDo) Debug() *statusSkoringDo {
	return s.withDO(s.DO.Debug())
}

func (s statusSkoringDo) WithContext(ctx context.Context) *statusSkoringDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s statusSkoringDo) ReadDB() *statusSkoringDo {
	return s.Clauses(dbresolver.Read)
}

func (s statusSkoringDo) WriteDB() *statusSkoringDo {
	return s.Clauses(dbresolver.Write)
}

func (s statusSkoringDo) Session(config *gorm.Session) *statusSkoringDo {
	return s.withDO(s.DO.Session(config))
}

func (s statusSkoringDo) Clauses(conds ...clause.Expression) *statusSkoringDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s statusSkoringDo) Returning(value interface{}, columns ...string) *statusSkoringDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s statusSkoringDo) Not(conds ...gen.Condition) *statusSkoringDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s statusSkoringDo) Or(conds ...gen.Condition) *statusSkoringDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s statusSkoringDo) Select(conds ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s statusSkoringDo) Where(conds ...gen.Condition) *statusSkoringDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s statusSkoringDo) Order(conds ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s statusSkoringDo) Distinct(cols ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s statusSkoringDo) Omit(cols ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s statusSkoringDo) Join(table schema.Tabler, on ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s statusSkoringDo) LeftJoin(table schema.Tabler, on ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s statusSkoringDo) RightJoin(table schema.Tabler, on ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s statusSkoringDo) Group(cols ...field.Expr) *statusSkoringDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s statusSkoringDo) Having(conds ...gen.Condition) *statusSkoringDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s statusSkoringDo) Limit(limit int) *statusSkoringDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s statusSkoringDo) Offset(offset int) *statusSkoringDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s statusSkoringDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *statusSkoringDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s statusSkoringDo) Unscoped() *statusSkoringDo {
	return s.withDO(s.DO.Unscoped())
}

func (s statusSkoringDo) Create(values ...*entity.StatusSkoring) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s statusSkoringDo) CreateInBatches(values []*entity.StatusSkoring, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s statusSkoringDo) Save(values ...*entity.StatusSkoring) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s statusSkoringDo) First() (*entity.StatusSkoring, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusSkoring), nil
	}
}

func (s statusSkoringDo) Take() (*entity.StatusSkoring, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusSkoring), nil
	}
}

func (s statusSkoringDo) Last() (*entity.StatusSkoring, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusSkoring), nil
	}
}

func (s statusSkoringDo) Find() ([]*entity.StatusSkoring, error) {
	result, err := s.DO.Find()
	return result.([]*entity.StatusSkoring), err
}

func (s statusSkoringDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.StatusSkoring, err error) {
	buf := make([]*entity.StatusSkoring, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s statusSkoringDo) FindInBatches(result *[]*entity.StatusSkoring, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s statusSkoringDo) Attrs(attrs ...field.AssignExpr) *statusSkoringDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s statusSkoringDo) Assign(attrs ...field.AssignExpr) *statusSkoringDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s statusSkoringDo) Joins(fields ...field.RelationField) *statusSkoringDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s statusSkoringDo) Preload(fields ...field.RelationField) *statusSkoringDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s statusSkoringDo) FirstOrInit() (*entity.StatusSkoring, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusSkoring), nil
	}
}

func (s statusSkoringDo) FirstOrCreate() (*entity.StatusSkoring, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusSkoring), nil
	}
}

func (s statusSkoringDo) FindByPage(offset int, limit int) (result []*entity.StatusSkoring, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s statusSkoringDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s statusSkoringDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s statusSkoringDo) Delete(models ...*entity.StatusSkoring) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *statusSkoringDo) withDO(do gen.Dao) *statusSkoringDo {
	s.DO = *do.(*gen.DO)
	return s
}
