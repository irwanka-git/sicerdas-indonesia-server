// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalMinatKuliahSosial(db *gorm.DB, opts ...gen.DOOption) soalMinatKuliahSosial {
	_soalMinatKuliahSosial := soalMinatKuliahSosial{}

	_soalMinatKuliahSosial.soalMinatKuliahSosialDo.UseDB(db, opts...)
	_soalMinatKuliahSosial.soalMinatKuliahSosialDo.UseModel(&entity.SoalMinatKuliahSosial{})

	tableName := _soalMinatKuliahSosial.soalMinatKuliahSosialDo.TableName()
	_soalMinatKuliahSosial.ALL = field.NewAsterisk(tableName)
	_soalMinatKuliahSosial.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalMinatKuliahSosial.Urutan = field.NewInt32(tableName, "urutan")
	_soalMinatKuliahSosial.Indikator = field.NewString(tableName, "indikator")
	_soalMinatKuliahSosial.Minat = field.NewString(tableName, "minat")
	_soalMinatKuliahSosial.DeskripsiMinat = field.NewString(tableName, "deskripsi_minat")
	_soalMinatKuliahSosial.Jurusan = field.NewString(tableName, "jurusan")
	_soalMinatKuliahSosial.DeskripsiJurusan = field.NewString(tableName, "deskripsi_jurusan")
	_soalMinatKuliahSosial.Matakuliah = field.NewString(tableName, "matakuliah")
	_soalMinatKuliahSosial.PeluangKarier = field.NewString(tableName, "peluang_karier")
	_soalMinatKuliahSosial.TersediaDi = field.NewString(tableName, "tersedia_di")
	_soalMinatKuliahSosial.UUID = field.NewString(tableName, "uuid")
	_soalMinatKuliahSosial.IDKelompok = field.NewInt16(tableName, "id_kelompok")
	_soalMinatKuliahSosial.IDKelas = field.NewInt16(tableName, "id_kelas")
	_soalMinatKuliahSosial.Gambar = field.NewString(tableName, "gambar")

	_soalMinatKuliahSosial.fillFieldMap()

	return _soalMinatKuliahSosial
}

type soalMinatKuliahSosial struct {
	soalMinatKuliahSosialDo soalMinatKuliahSosialDo

	ALL              field.Asterisk
	IDSoal           field.Int32
	Urutan           field.Int32
	Indikator        field.String
	Minat            field.String
	DeskripsiMinat   field.String
	Jurusan          field.String
	DeskripsiJurusan field.String
	Matakuliah       field.String
	PeluangKarier    field.String
	TersediaDi       field.String
	UUID             field.String
	IDKelompok       field.Int16 // MINAT PSIKOTES LENGKAP
	IDKelas          field.Int16 // MINAT SMA V2
	Gambar           field.String

	fieldMap map[string]field.Expr
}

func (s soalMinatKuliahSosial) Table(newTableName string) *soalMinatKuliahSosial {
	s.soalMinatKuliahSosialDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalMinatKuliahSosial) As(alias string) *soalMinatKuliahSosial {
	s.soalMinatKuliahSosialDo.DO = *(s.soalMinatKuliahSosialDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalMinatKuliahSosial) updateTableName(table string) *soalMinatKuliahSosial {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.Urutan = field.NewInt32(table, "urutan")
	s.Indikator = field.NewString(table, "indikator")
	s.Minat = field.NewString(table, "minat")
	s.DeskripsiMinat = field.NewString(table, "deskripsi_minat")
	s.Jurusan = field.NewString(table, "jurusan")
	s.DeskripsiJurusan = field.NewString(table, "deskripsi_jurusan")
	s.Matakuliah = field.NewString(table, "matakuliah")
	s.PeluangKarier = field.NewString(table, "peluang_karier")
	s.TersediaDi = field.NewString(table, "tersedia_di")
	s.UUID = field.NewString(table, "uuid")
	s.IDKelompok = field.NewInt16(table, "id_kelompok")
	s.IDKelas = field.NewInt16(table, "id_kelas")
	s.Gambar = field.NewString(table, "gambar")

	s.fillFieldMap()

	return s
}

func (s *soalMinatKuliahSosial) WithContext(ctx context.Context) *soalMinatKuliahSosialDo {
	return s.soalMinatKuliahSosialDo.WithContext(ctx)
}

func (s soalMinatKuliahSosial) TableName() string { return s.soalMinatKuliahSosialDo.TableName() }

func (s soalMinatKuliahSosial) Alias() string { return s.soalMinatKuliahSosialDo.Alias() }

func (s soalMinatKuliahSosial) Columns(cols ...field.Expr) gen.Columns {
	return s.soalMinatKuliahSosialDo.Columns(cols...)
}

func (s *soalMinatKuliahSosial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalMinatKuliahSosial) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["indikator"] = s.Indikator
	s.fieldMap["minat"] = s.Minat
	s.fieldMap["deskripsi_minat"] = s.DeskripsiMinat
	s.fieldMap["jurusan"] = s.Jurusan
	s.fieldMap["deskripsi_jurusan"] = s.DeskripsiJurusan
	s.fieldMap["matakuliah"] = s.Matakuliah
	s.fieldMap["peluang_karier"] = s.PeluangKarier
	s.fieldMap["tersedia_di"] = s.TersediaDi
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["id_kelompok"] = s.IDKelompok
	s.fieldMap["id_kelas"] = s.IDKelas
	s.fieldMap["gambar"] = s.Gambar
}

func (s soalMinatKuliahSosial) clone(db *gorm.DB) soalMinatKuliahSosial {
	s.soalMinatKuliahSosialDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalMinatKuliahSosial) replaceDB(db *gorm.DB) soalMinatKuliahSosial {
	s.soalMinatKuliahSosialDo.ReplaceDB(db)
	return s
}

type soalMinatKuliahSosialDo struct{ gen.DO }

func (s soalMinatKuliahSosialDo) Debug() *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Debug())
}

func (s soalMinatKuliahSosialDo) WithContext(ctx context.Context) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalMinatKuliahSosialDo) ReadDB() *soalMinatKuliahSosialDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalMinatKuliahSosialDo) WriteDB() *soalMinatKuliahSosialDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalMinatKuliahSosialDo) Session(config *gorm.Session) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalMinatKuliahSosialDo) Clauses(conds ...clause.Expression) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalMinatKuliahSosialDo) Returning(value interface{}, columns ...string) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalMinatKuliahSosialDo) Not(conds ...gen.Condition) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalMinatKuliahSosialDo) Or(conds ...gen.Condition) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalMinatKuliahSosialDo) Select(conds ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalMinatKuliahSosialDo) Where(conds ...gen.Condition) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalMinatKuliahSosialDo) Order(conds ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalMinatKuliahSosialDo) Distinct(cols ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalMinatKuliahSosialDo) Omit(cols ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalMinatKuliahSosialDo) Join(table schema.Tabler, on ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalMinatKuliahSosialDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalMinatKuliahSosialDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalMinatKuliahSosialDo) Group(cols ...field.Expr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalMinatKuliahSosialDo) Having(conds ...gen.Condition) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalMinatKuliahSosialDo) Limit(limit int) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalMinatKuliahSosialDo) Offset(offset int) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalMinatKuliahSosialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalMinatKuliahSosialDo) Unscoped() *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalMinatKuliahSosialDo) Create(values ...*entity.SoalMinatKuliahSosial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalMinatKuliahSosialDo) CreateInBatches(values []*entity.SoalMinatKuliahSosial, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalMinatKuliahSosialDo) Save(values ...*entity.SoalMinatKuliahSosial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalMinatKuliahSosialDo) First() (*entity.SoalMinatKuliahSosial, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahSosial), nil
	}
}

func (s soalMinatKuliahSosialDo) Take() (*entity.SoalMinatKuliahSosial, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahSosial), nil
	}
}

func (s soalMinatKuliahSosialDo) Last() (*entity.SoalMinatKuliahSosial, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahSosial), nil
	}
}

func (s soalMinatKuliahSosialDo) Find() ([]*entity.SoalMinatKuliahSosial, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalMinatKuliahSosial), err
}

func (s soalMinatKuliahSosialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalMinatKuliahSosial, err error) {
	buf := make([]*entity.SoalMinatKuliahSosial, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalMinatKuliahSosialDo) FindInBatches(result *[]*entity.SoalMinatKuliahSosial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalMinatKuliahSosialDo) Attrs(attrs ...field.AssignExpr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalMinatKuliahSosialDo) Assign(attrs ...field.AssignExpr) *soalMinatKuliahSosialDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalMinatKuliahSosialDo) Joins(fields ...field.RelationField) *soalMinatKuliahSosialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalMinatKuliahSosialDo) Preload(fields ...field.RelationField) *soalMinatKuliahSosialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalMinatKuliahSosialDo) FirstOrInit() (*entity.SoalMinatKuliahSosial, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahSosial), nil
	}
}

func (s soalMinatKuliahSosialDo) FirstOrCreate() (*entity.SoalMinatKuliahSosial, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalMinatKuliahSosial), nil
	}
}

func (s soalMinatKuliahSosialDo) FindByPage(offset int, limit int) (result []*entity.SoalMinatKuliahSosial, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalMinatKuliahSosialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalMinatKuliahSosialDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalMinatKuliahSosialDo) Delete(models ...*entity.SoalMinatKuliahSosial) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalMinatKuliahSosialDo) withDO(do gen.Dao) *soalMinatKuliahSosialDo {
	s.DO = *do.(*gen.DO)
	return s
}
