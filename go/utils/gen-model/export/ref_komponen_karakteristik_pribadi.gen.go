// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefKomponenKarakteristikPribadi(db *gorm.DB, opts ...gen.DOOption) refKomponenKarakteristikPribadi {
	_refKomponenKarakteristikPribadi := refKomponenKarakteristikPribadi{}

	_refKomponenKarakteristikPribadi.refKomponenKarakteristikPribadiDo.UseDB(db, opts...)
	_refKomponenKarakteristikPribadi.refKomponenKarakteristikPribadiDo.UseModel(&entity.RefKomponenKarakteristikPribadi{})

	tableName := _refKomponenKarakteristikPribadi.refKomponenKarakteristikPribadiDo.TableName()
	_refKomponenKarakteristikPribadi.ALL = field.NewAsterisk(tableName)
	_refKomponenKarakteristikPribadi.IDKomponen = field.NewInt32(tableName, "id_komponen")
	_refKomponenKarakteristikPribadi.NamaKomponen = field.NewString(tableName, "nama_komponen")
	_refKomponenKarakteristikPribadi.Keterangan = field.NewString(tableName, "keterangan")
	_refKomponenKarakteristikPribadi.FieldSkoring = field.NewString(tableName, "field_skoring")
	_refKomponenKarakteristikPribadi.UUID = field.NewString(tableName, "uuid")
	_refKomponenKarakteristikPribadi.Icon = field.NewString(tableName, "icon")

	_refKomponenKarakteristikPribadi.fillFieldMap()

	return _refKomponenKarakteristikPribadi
}

type refKomponenKarakteristikPribadi struct {
	refKomponenKarakteristikPribadiDo refKomponenKarakteristikPribadiDo

	ALL          field.Asterisk
	IDKomponen   field.Int32
	NamaKomponen field.String
	Keterangan   field.String
	FieldSkoring field.String
	UUID         field.String
	Icon         field.String

	fieldMap map[string]field.Expr
}

func (r refKomponenKarakteristikPribadi) Table(newTableName string) *refKomponenKarakteristikPribadi {
	r.refKomponenKarakteristikPribadiDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refKomponenKarakteristikPribadi) As(alias string) *refKomponenKarakteristikPribadi {
	r.refKomponenKarakteristikPribadiDo.DO = *(r.refKomponenKarakteristikPribadiDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refKomponenKarakteristikPribadi) updateTableName(table string) *refKomponenKarakteristikPribadi {
	r.ALL = field.NewAsterisk(table)
	r.IDKomponen = field.NewInt32(table, "id_komponen")
	r.NamaKomponen = field.NewString(table, "nama_komponen")
	r.Keterangan = field.NewString(table, "keterangan")
	r.FieldSkoring = field.NewString(table, "field_skoring")
	r.UUID = field.NewString(table, "uuid")
	r.Icon = field.NewString(table, "icon")

	r.fillFieldMap()

	return r
}

func (r *refKomponenKarakteristikPribadi) WithContext(ctx context.Context) *refKomponenKarakteristikPribadiDo {
	return r.refKomponenKarakteristikPribadiDo.WithContext(ctx)
}

func (r refKomponenKarakteristikPribadi) TableName() string {
	return r.refKomponenKarakteristikPribadiDo.TableName()
}

func (r refKomponenKarakteristikPribadi) Alias() string {
	return r.refKomponenKarakteristikPribadiDo.Alias()
}

func (r refKomponenKarakteristikPribadi) Columns(cols ...field.Expr) gen.Columns {
	return r.refKomponenKarakteristikPribadiDo.Columns(cols...)
}

func (r *refKomponenKarakteristikPribadi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refKomponenKarakteristikPribadi) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id_komponen"] = r.IDKomponen
	r.fieldMap["nama_komponen"] = r.NamaKomponen
	r.fieldMap["keterangan"] = r.Keterangan
	r.fieldMap["field_skoring"] = r.FieldSkoring
	r.fieldMap["uuid"] = r.UUID
	r.fieldMap["icon"] = r.Icon
}

func (r refKomponenKarakteristikPribadi) clone(db *gorm.DB) refKomponenKarakteristikPribadi {
	r.refKomponenKarakteristikPribadiDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refKomponenKarakteristikPribadi) replaceDB(db *gorm.DB) refKomponenKarakteristikPribadi {
	r.refKomponenKarakteristikPribadiDo.ReplaceDB(db)
	return r
}

type refKomponenKarakteristikPribadiDo struct{ gen.DO }

func (r refKomponenKarakteristikPribadiDo) Debug() *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Debug())
}

func (r refKomponenKarakteristikPribadiDo) WithContext(ctx context.Context) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refKomponenKarakteristikPribadiDo) ReadDB() *refKomponenKarakteristikPribadiDo {
	return r.Clauses(dbresolver.Read)
}

func (r refKomponenKarakteristikPribadiDo) WriteDB() *refKomponenKarakteristikPribadiDo {
	return r.Clauses(dbresolver.Write)
}

func (r refKomponenKarakteristikPribadiDo) Session(config *gorm.Session) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Session(config))
}

func (r refKomponenKarakteristikPribadiDo) Clauses(conds ...clause.Expression) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refKomponenKarakteristikPribadiDo) Returning(value interface{}, columns ...string) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refKomponenKarakteristikPribadiDo) Not(conds ...gen.Condition) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refKomponenKarakteristikPribadiDo) Or(conds ...gen.Condition) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refKomponenKarakteristikPribadiDo) Select(conds ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refKomponenKarakteristikPribadiDo) Where(conds ...gen.Condition) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refKomponenKarakteristikPribadiDo) Order(conds ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refKomponenKarakteristikPribadiDo) Distinct(cols ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refKomponenKarakteristikPribadiDo) Omit(cols ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refKomponenKarakteristikPribadiDo) Join(table schema.Tabler, on ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refKomponenKarakteristikPribadiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refKomponenKarakteristikPribadiDo) RightJoin(table schema.Tabler, on ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refKomponenKarakteristikPribadiDo) Group(cols ...field.Expr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refKomponenKarakteristikPribadiDo) Having(conds ...gen.Condition) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refKomponenKarakteristikPribadiDo) Limit(limit int) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refKomponenKarakteristikPribadiDo) Offset(offset int) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refKomponenKarakteristikPribadiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refKomponenKarakteristikPribadiDo) Unscoped() *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refKomponenKarakteristikPribadiDo) Create(values ...*entity.RefKomponenKarakteristikPribadi) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refKomponenKarakteristikPribadiDo) CreateInBatches(values []*entity.RefKomponenKarakteristikPribadi, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refKomponenKarakteristikPribadiDo) Save(values ...*entity.RefKomponenKarakteristikPribadi) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refKomponenKarakteristikPribadiDo) First() (*entity.RefKomponenKarakteristikPribadi, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenKarakteristikPribadi), nil
	}
}

func (r refKomponenKarakteristikPribadiDo) Take() (*entity.RefKomponenKarakteristikPribadi, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenKarakteristikPribadi), nil
	}
}

func (r refKomponenKarakteristikPribadiDo) Last() (*entity.RefKomponenKarakteristikPribadi, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenKarakteristikPribadi), nil
	}
}

func (r refKomponenKarakteristikPribadiDo) Find() ([]*entity.RefKomponenKarakteristikPribadi, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefKomponenKarakteristikPribadi), err
}

func (r refKomponenKarakteristikPribadiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefKomponenKarakteristikPribadi, err error) {
	buf := make([]*entity.RefKomponenKarakteristikPribadi, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refKomponenKarakteristikPribadiDo) FindInBatches(result *[]*entity.RefKomponenKarakteristikPribadi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refKomponenKarakteristikPribadiDo) Attrs(attrs ...field.AssignExpr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refKomponenKarakteristikPribadiDo) Assign(attrs ...field.AssignExpr) *refKomponenKarakteristikPribadiDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refKomponenKarakteristikPribadiDo) Joins(fields ...field.RelationField) *refKomponenKarakteristikPribadiDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refKomponenKarakteristikPribadiDo) Preload(fields ...field.RelationField) *refKomponenKarakteristikPribadiDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refKomponenKarakteristikPribadiDo) FirstOrInit() (*entity.RefKomponenKarakteristikPribadi, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenKarakteristikPribadi), nil
	}
}

func (r refKomponenKarakteristikPribadiDo) FirstOrCreate() (*entity.RefKomponenKarakteristikPribadi, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenKarakteristikPribadi), nil
	}
}

func (r refKomponenKarakteristikPribadiDo) FindByPage(offset int, limit int) (result []*entity.RefKomponenKarakteristikPribadi, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refKomponenKarakteristikPribadiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refKomponenKarakteristikPribadiDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refKomponenKarakteristikPribadiDo) Delete(models ...*entity.RefKomponenKarakteristikPribadi) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refKomponenKarakteristikPribadiDo) withDO(do gen.Dao) *refKomponenKarakteristikPribadiDo {
	r.DO = *do.(*gen.DO)
	return r
}
