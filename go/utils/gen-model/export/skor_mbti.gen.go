// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorMbti(db *gorm.DB, opts ...gen.DOOption) skorMbti {
	_skorMbti := skorMbti{}

	_skorMbti.skorMbtiDo.UseDB(db, opts...)
	_skorMbti.skorMbtiDo.UseModel(&entity.SkorMbti{})

	tableName := _skorMbti.skorMbtiDo.TableName()
	_skorMbti.ALL = field.NewAsterisk(tableName)
	_skorMbti.IDUser = field.NewInt32(tableName, "id_user")
	_skorMbti.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorMbti.TipojungE = field.NewInt32(tableName, "tipojung_e")
	_skorMbti.TipojungI = field.NewInt32(tableName, "tipojung_i")
	_skorMbti.TipojungS = field.NewInt32(tableName, "tipojung_s")
	_skorMbti.TipojungN = field.NewInt32(tableName, "tipojung_n")
	_skorMbti.TipojungT = field.NewInt32(tableName, "tipojung_t")
	_skorMbti.TipojungF = field.NewInt32(tableName, "tipojung_f")
	_skorMbti.TipojungJ = field.NewInt32(tableName, "tipojung_j")
	_skorMbti.TipojungP = field.NewInt32(tableName, "tipojung_p")
	_skorMbti.TipojungKode = field.NewString(tableName, "tipojung_kode")

	_skorMbti.fillFieldMap()

	return _skorMbti
}

type skorMbti struct {
	skorMbtiDo skorMbtiDo

	ALL          field.Asterisk
	IDUser       field.Int32
	IDQuiz       field.Int32
	TipojungE    field.Int32
	TipojungI    field.Int32
	TipojungS    field.Int32
	TipojungN    field.Int32
	TipojungT    field.Int32
	TipojungF    field.Int32
	TipojungJ    field.Int32
	TipojungP    field.Int32
	TipojungKode field.String

	fieldMap map[string]field.Expr
}

func (s skorMbti) Table(newTableName string) *skorMbti {
	s.skorMbtiDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorMbti) As(alias string) *skorMbti {
	s.skorMbtiDo.DO = *(s.skorMbtiDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorMbti) updateTableName(table string) *skorMbti {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TipojungE = field.NewInt32(table, "tipojung_e")
	s.TipojungI = field.NewInt32(table, "tipojung_i")
	s.TipojungS = field.NewInt32(table, "tipojung_s")
	s.TipojungN = field.NewInt32(table, "tipojung_n")
	s.TipojungT = field.NewInt32(table, "tipojung_t")
	s.TipojungF = field.NewInt32(table, "tipojung_f")
	s.TipojungJ = field.NewInt32(table, "tipojung_j")
	s.TipojungP = field.NewInt32(table, "tipojung_p")
	s.TipojungKode = field.NewString(table, "tipojung_kode")

	s.fillFieldMap()

	return s
}

func (s *skorMbti) WithContext(ctx context.Context) *skorMbtiDo { return s.skorMbtiDo.WithContext(ctx) }

func (s skorMbti) TableName() string { return s.skorMbtiDo.TableName() }

func (s skorMbti) Alias() string { return s.skorMbtiDo.Alias() }

func (s skorMbti) Columns(cols ...field.Expr) gen.Columns { return s.skorMbtiDo.Columns(cols...) }

func (s *skorMbti) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorMbti) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tipojung_e"] = s.TipojungE
	s.fieldMap["tipojung_i"] = s.TipojungI
	s.fieldMap["tipojung_s"] = s.TipojungS
	s.fieldMap["tipojung_n"] = s.TipojungN
	s.fieldMap["tipojung_t"] = s.TipojungT
	s.fieldMap["tipojung_f"] = s.TipojungF
	s.fieldMap["tipojung_j"] = s.TipojungJ
	s.fieldMap["tipojung_p"] = s.TipojungP
	s.fieldMap["tipojung_kode"] = s.TipojungKode
}

func (s skorMbti) clone(db *gorm.DB) skorMbti {
	s.skorMbtiDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorMbti) replaceDB(db *gorm.DB) skorMbti {
	s.skorMbtiDo.ReplaceDB(db)
	return s
}

type skorMbtiDo struct{ gen.DO }

func (s skorMbtiDo) Debug() *skorMbtiDo {
	return s.withDO(s.DO.Debug())
}

func (s skorMbtiDo) WithContext(ctx context.Context) *skorMbtiDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorMbtiDo) ReadDB() *skorMbtiDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorMbtiDo) WriteDB() *skorMbtiDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorMbtiDo) Session(config *gorm.Session) *skorMbtiDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorMbtiDo) Clauses(conds ...clause.Expression) *skorMbtiDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorMbtiDo) Returning(value interface{}, columns ...string) *skorMbtiDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorMbtiDo) Not(conds ...gen.Condition) *skorMbtiDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorMbtiDo) Or(conds ...gen.Condition) *skorMbtiDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorMbtiDo) Select(conds ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorMbtiDo) Where(conds ...gen.Condition) *skorMbtiDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorMbtiDo) Order(conds ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorMbtiDo) Distinct(cols ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorMbtiDo) Omit(cols ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorMbtiDo) Join(table schema.Tabler, on ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorMbtiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorMbtiDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorMbtiDo) Group(cols ...field.Expr) *skorMbtiDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorMbtiDo) Having(conds ...gen.Condition) *skorMbtiDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorMbtiDo) Limit(limit int) *skorMbtiDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorMbtiDo) Offset(offset int) *skorMbtiDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorMbtiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorMbtiDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorMbtiDo) Unscoped() *skorMbtiDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorMbtiDo) Create(values ...*entity.SkorMbti) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorMbtiDo) CreateInBatches(values []*entity.SkorMbti, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorMbtiDo) Save(values ...*entity.SkorMbti) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorMbtiDo) First() (*entity.SkorMbti, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMbti), nil
	}
}

func (s skorMbtiDo) Take() (*entity.SkorMbti, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMbti), nil
	}
}

func (s skorMbtiDo) Last() (*entity.SkorMbti, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMbti), nil
	}
}

func (s skorMbtiDo) Find() ([]*entity.SkorMbti, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorMbti), err
}

func (s skorMbtiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorMbti, err error) {
	buf := make([]*entity.SkorMbti, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorMbtiDo) FindInBatches(result *[]*entity.SkorMbti, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorMbtiDo) Attrs(attrs ...field.AssignExpr) *skorMbtiDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorMbtiDo) Assign(attrs ...field.AssignExpr) *skorMbtiDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorMbtiDo) Joins(fields ...field.RelationField) *skorMbtiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorMbtiDo) Preload(fields ...field.RelationField) *skorMbtiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorMbtiDo) FirstOrInit() (*entity.SkorMbti, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMbti), nil
	}
}

func (s skorMbtiDo) FirstOrCreate() (*entity.SkorMbti, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMbti), nil
	}
}

func (s skorMbtiDo) FindByPage(offset int, limit int) (result []*entity.SkorMbti, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorMbtiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorMbtiDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorMbtiDo) Delete(models ...*entity.SkorMbti) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorMbtiDo) withDO(do gen.Dao) *skorMbtiDo {
	s.DO = *do.(*gen.DO)
	return s
}
