// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorPeminatanSmk(db *gorm.DB, opts ...gen.DOOption) skorPeminatanSmk {
	_skorPeminatanSmk := skorPeminatanSmk{}

	_skorPeminatanSmk.skorPeminatanSmkDo.UseDB(db, opts...)
	_skorPeminatanSmk.skorPeminatanSmkDo.UseModel(&entity.SkorPeminatanSmk{})

	tableName := _skorPeminatanSmk.skorPeminatanSmkDo.TableName()
	_skorPeminatanSmk.ALL = field.NewAsterisk(tableName)
	_skorPeminatanSmk.IDUser = field.NewInt32(tableName, "id_user")
	_skorPeminatanSmk.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorPeminatanSmk.Minat1 = field.NewString(tableName, "minat_1")
	_skorPeminatanSmk.Minat2 = field.NewString(tableName, "minat_2")
	_skorPeminatanSmk.Minat3 = field.NewString(tableName, "minat_3")
	_skorPeminatanSmk.Minat4 = field.NewString(tableName, "minat_4")
	_skorPeminatanSmk.Minat5 = field.NewString(tableName, "minat_5")
	_skorPeminatanSmk.Minat6 = field.NewString(tableName, "minat_6")
	_skorPeminatanSmk.Minat7 = field.NewString(tableName, "minat_7")
	_skorPeminatanSmk.Minat8 = field.NewString(tableName, "minat_8")
	_skorPeminatanSmk.Minat9 = field.NewString(tableName, "minat_9")
	_skorPeminatanSmk.Minat10 = field.NewString(tableName, "minat_10")
	_skorPeminatanSmk.Minat11 = field.NewString(tableName, "minat_11")
	_skorPeminatanSmk.Minat12 = field.NewString(tableName, "minat_12")
	_skorPeminatanSmk.Minat13 = field.NewString(tableName, "minat_13")
	_skorPeminatanSmk.Minat14 = field.NewString(tableName, "minat_14")
	_skorPeminatanSmk.Minat15 = field.NewString(tableName, "minat_15")

	_skorPeminatanSmk.fillFieldMap()

	return _skorPeminatanSmk
}

type skorPeminatanSmk struct {
	skorPeminatanSmkDo skorPeminatanSmkDo

	ALL     field.Asterisk
	IDUser  field.Int32
	IDQuiz  field.Int32
	Minat1  field.String
	Minat2  field.String
	Minat3  field.String
	Minat4  field.String
	Minat5  field.String
	Minat6  field.String
	Minat7  field.String
	Minat8  field.String
	Minat9  field.String
	Minat10 field.String
	Minat11 field.String
	Minat12 field.String
	Minat13 field.String
	Minat14 field.String
	Minat15 field.String

	fieldMap map[string]field.Expr
}

func (s skorPeminatanSmk) Table(newTableName string) *skorPeminatanSmk {
	s.skorPeminatanSmkDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorPeminatanSmk) As(alias string) *skorPeminatanSmk {
	s.skorPeminatanSmkDo.DO = *(s.skorPeminatanSmkDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorPeminatanSmk) updateTableName(table string) *skorPeminatanSmk {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.Minat1 = field.NewString(table, "minat_1")
	s.Minat2 = field.NewString(table, "minat_2")
	s.Minat3 = field.NewString(table, "minat_3")
	s.Minat4 = field.NewString(table, "minat_4")
	s.Minat5 = field.NewString(table, "minat_5")
	s.Minat6 = field.NewString(table, "minat_6")
	s.Minat7 = field.NewString(table, "minat_7")
	s.Minat8 = field.NewString(table, "minat_8")
	s.Minat9 = field.NewString(table, "minat_9")
	s.Minat10 = field.NewString(table, "minat_10")
	s.Minat11 = field.NewString(table, "minat_11")
	s.Minat12 = field.NewString(table, "minat_12")
	s.Minat13 = field.NewString(table, "minat_13")
	s.Minat14 = field.NewString(table, "minat_14")
	s.Minat15 = field.NewString(table, "minat_15")

	s.fillFieldMap()

	return s
}

func (s *skorPeminatanSmk) WithContext(ctx context.Context) *skorPeminatanSmkDo {
	return s.skorPeminatanSmkDo.WithContext(ctx)
}

func (s skorPeminatanSmk) TableName() string { return s.skorPeminatanSmkDo.TableName() }

func (s skorPeminatanSmk) Alias() string { return s.skorPeminatanSmkDo.Alias() }

func (s skorPeminatanSmk) Columns(cols ...field.Expr) gen.Columns {
	return s.skorPeminatanSmkDo.Columns(cols...)
}

func (s *skorPeminatanSmk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorPeminatanSmk) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["minat_1"] = s.Minat1
	s.fieldMap["minat_2"] = s.Minat2
	s.fieldMap["minat_3"] = s.Minat3
	s.fieldMap["minat_4"] = s.Minat4
	s.fieldMap["minat_5"] = s.Minat5
	s.fieldMap["minat_6"] = s.Minat6
	s.fieldMap["minat_7"] = s.Minat7
	s.fieldMap["minat_8"] = s.Minat8
	s.fieldMap["minat_9"] = s.Minat9
	s.fieldMap["minat_10"] = s.Minat10
	s.fieldMap["minat_11"] = s.Minat11
	s.fieldMap["minat_12"] = s.Minat12
	s.fieldMap["minat_13"] = s.Minat13
	s.fieldMap["minat_14"] = s.Minat14
	s.fieldMap["minat_15"] = s.Minat15
}

func (s skorPeminatanSmk) clone(db *gorm.DB) skorPeminatanSmk {
	s.skorPeminatanSmkDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorPeminatanSmk) replaceDB(db *gorm.DB) skorPeminatanSmk {
	s.skorPeminatanSmkDo.ReplaceDB(db)
	return s
}

type skorPeminatanSmkDo struct{ gen.DO }

func (s skorPeminatanSmkDo) Debug() *skorPeminatanSmkDo {
	return s.withDO(s.DO.Debug())
}

func (s skorPeminatanSmkDo) WithContext(ctx context.Context) *skorPeminatanSmkDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorPeminatanSmkDo) ReadDB() *skorPeminatanSmkDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorPeminatanSmkDo) WriteDB() *skorPeminatanSmkDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorPeminatanSmkDo) Session(config *gorm.Session) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorPeminatanSmkDo) Clauses(conds ...clause.Expression) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorPeminatanSmkDo) Returning(value interface{}, columns ...string) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorPeminatanSmkDo) Not(conds ...gen.Condition) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorPeminatanSmkDo) Or(conds ...gen.Condition) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorPeminatanSmkDo) Select(conds ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorPeminatanSmkDo) Where(conds ...gen.Condition) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorPeminatanSmkDo) Order(conds ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorPeminatanSmkDo) Distinct(cols ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorPeminatanSmkDo) Omit(cols ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorPeminatanSmkDo) Join(table schema.Tabler, on ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorPeminatanSmkDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorPeminatanSmkDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorPeminatanSmkDo) Group(cols ...field.Expr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorPeminatanSmkDo) Having(conds ...gen.Condition) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorPeminatanSmkDo) Limit(limit int) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorPeminatanSmkDo) Offset(offset int) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorPeminatanSmkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorPeminatanSmkDo) Unscoped() *skorPeminatanSmkDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorPeminatanSmkDo) Create(values ...*entity.SkorPeminatanSmk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorPeminatanSmkDo) CreateInBatches(values []*entity.SkorPeminatanSmk, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorPeminatanSmkDo) Save(values ...*entity.SkorPeminatanSmk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorPeminatanSmkDo) First() (*entity.SkorPeminatanSmk, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSmk), nil
	}
}

func (s skorPeminatanSmkDo) Take() (*entity.SkorPeminatanSmk, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSmk), nil
	}
}

func (s skorPeminatanSmkDo) Last() (*entity.SkorPeminatanSmk, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSmk), nil
	}
}

func (s skorPeminatanSmkDo) Find() ([]*entity.SkorPeminatanSmk, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorPeminatanSmk), err
}

func (s skorPeminatanSmkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorPeminatanSmk, err error) {
	buf := make([]*entity.SkorPeminatanSmk, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorPeminatanSmkDo) FindInBatches(result *[]*entity.SkorPeminatanSmk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorPeminatanSmkDo) Attrs(attrs ...field.AssignExpr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorPeminatanSmkDo) Assign(attrs ...field.AssignExpr) *skorPeminatanSmkDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorPeminatanSmkDo) Joins(fields ...field.RelationField) *skorPeminatanSmkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorPeminatanSmkDo) Preload(fields ...field.RelationField) *skorPeminatanSmkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorPeminatanSmkDo) FirstOrInit() (*entity.SkorPeminatanSmk, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSmk), nil
	}
}

func (s skorPeminatanSmkDo) FirstOrCreate() (*entity.SkorPeminatanSmk, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSmk), nil
	}
}

func (s skorPeminatanSmkDo) FindByPage(offset int, limit int) (result []*entity.SkorPeminatanSmk, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorPeminatanSmkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorPeminatanSmkDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorPeminatanSmkDo) Delete(models ...*entity.SkorPeminatanSmk) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorPeminatanSmkDo) withDO(do gen.Dao) *skorPeminatanSmkDo {
	s.DO = *do.(*gen.DO)
	return s
}
