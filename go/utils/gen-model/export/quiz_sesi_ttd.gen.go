// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newQuizSesiTtd(db *gorm.DB, opts ...gen.DOOption) quizSesiTtd {
	_quizSesiTtd := quizSesiTtd{}

	_quizSesiTtd.quizSesiTtdDo.UseDB(db, opts...)
	_quizSesiTtd.quizSesiTtdDo.UseModel(&entity.QuizSesiTtd{})

	tableName := _quizSesiTtd.quizSesiTtdDo.TableName()
	_quizSesiTtd.ALL = field.NewAsterisk(tableName)
	_quizSesiTtd.IDQuizSesiTtd = field.NewInt64(tableName, "id_quiz_sesi_ttd")
	_quizSesiTtd.IDQuiz = field.NewInt64(tableName, "id_quiz")
	_quizSesiTtd.Ttd = field.NewString(tableName, "ttd")

	_quizSesiTtd.fillFieldMap()

	return _quizSesiTtd
}

type quizSesiTtd struct {
	quizSesiTtdDo quizSesiTtdDo

	ALL           field.Asterisk
	IDQuizSesiTtd field.Int64
	IDQuiz        field.Int64
	Ttd           field.String

	fieldMap map[string]field.Expr
}

func (q quizSesiTtd) Table(newTableName string) *quizSesiTtd {
	q.quizSesiTtdDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quizSesiTtd) As(alias string) *quizSesiTtd {
	q.quizSesiTtdDo.DO = *(q.quizSesiTtdDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quizSesiTtd) updateTableName(table string) *quizSesiTtd {
	q.ALL = field.NewAsterisk(table)
	q.IDQuizSesiTtd = field.NewInt64(table, "id_quiz_sesi_ttd")
	q.IDQuiz = field.NewInt64(table, "id_quiz")
	q.Ttd = field.NewString(table, "ttd")

	q.fillFieldMap()

	return q
}

func (q *quizSesiTtd) WithContext(ctx context.Context) *quizSesiTtdDo {
	return q.quizSesiTtdDo.WithContext(ctx)
}

func (q quizSesiTtd) TableName() string { return q.quizSesiTtdDo.TableName() }

func (q quizSesiTtd) Alias() string { return q.quizSesiTtdDo.Alias() }

func (q quizSesiTtd) Columns(cols ...field.Expr) gen.Columns { return q.quizSesiTtdDo.Columns(cols...) }

func (q *quizSesiTtd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quizSesiTtd) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["id_quiz_sesi_ttd"] = q.IDQuizSesiTtd
	q.fieldMap["id_quiz"] = q.IDQuiz
	q.fieldMap["ttd"] = q.Ttd
}

func (q quizSesiTtd) clone(db *gorm.DB) quizSesiTtd {
	q.quizSesiTtdDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quizSesiTtd) replaceDB(db *gorm.DB) quizSesiTtd {
	q.quizSesiTtdDo.ReplaceDB(db)
	return q
}

type quizSesiTtdDo struct{ gen.DO }

func (q quizSesiTtdDo) Debug() *quizSesiTtdDo {
	return q.withDO(q.DO.Debug())
}

func (q quizSesiTtdDo) WithContext(ctx context.Context) *quizSesiTtdDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizSesiTtdDo) ReadDB() *quizSesiTtdDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizSesiTtdDo) WriteDB() *quizSesiTtdDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizSesiTtdDo) Session(config *gorm.Session) *quizSesiTtdDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizSesiTtdDo) Clauses(conds ...clause.Expression) *quizSesiTtdDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizSesiTtdDo) Returning(value interface{}, columns ...string) *quizSesiTtdDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizSesiTtdDo) Not(conds ...gen.Condition) *quizSesiTtdDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizSesiTtdDo) Or(conds ...gen.Condition) *quizSesiTtdDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizSesiTtdDo) Select(conds ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizSesiTtdDo) Where(conds ...gen.Condition) *quizSesiTtdDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizSesiTtdDo) Order(conds ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizSesiTtdDo) Distinct(cols ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizSesiTtdDo) Omit(cols ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizSesiTtdDo) Join(table schema.Tabler, on ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizSesiTtdDo) LeftJoin(table schema.Tabler, on ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizSesiTtdDo) RightJoin(table schema.Tabler, on ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizSesiTtdDo) Group(cols ...field.Expr) *quizSesiTtdDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizSesiTtdDo) Having(conds ...gen.Condition) *quizSesiTtdDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizSesiTtdDo) Limit(limit int) *quizSesiTtdDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizSesiTtdDo) Offset(offset int) *quizSesiTtdDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizSesiTtdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *quizSesiTtdDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizSesiTtdDo) Unscoped() *quizSesiTtdDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizSesiTtdDo) Create(values ...*entity.QuizSesiTtd) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizSesiTtdDo) CreateInBatches(values []*entity.QuizSesiTtd, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizSesiTtdDo) Save(values ...*entity.QuizSesiTtd) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizSesiTtdDo) First() (*entity.QuizSesiTtd, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTtd), nil
	}
}

func (q quizSesiTtdDo) Take() (*entity.QuizSesiTtd, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTtd), nil
	}
}

func (q quizSesiTtdDo) Last() (*entity.QuizSesiTtd, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTtd), nil
	}
}

func (q quizSesiTtdDo) Find() ([]*entity.QuizSesiTtd, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuizSesiTtd), err
}

func (q quizSesiTtdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuizSesiTtd, err error) {
	buf := make([]*entity.QuizSesiTtd, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizSesiTtdDo) FindInBatches(result *[]*entity.QuizSesiTtd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizSesiTtdDo) Attrs(attrs ...field.AssignExpr) *quizSesiTtdDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizSesiTtdDo) Assign(attrs ...field.AssignExpr) *quizSesiTtdDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizSesiTtdDo) Joins(fields ...field.RelationField) *quizSesiTtdDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizSesiTtdDo) Preload(fields ...field.RelationField) *quizSesiTtdDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizSesiTtdDo) FirstOrInit() (*entity.QuizSesiTtd, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTtd), nil
	}
}

func (q quizSesiTtdDo) FirstOrCreate() (*entity.QuizSesiTtd, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiTtd), nil
	}
}

func (q quizSesiTtdDo) FindByPage(offset int, limit int) (result []*entity.QuizSesiTtd, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizSesiTtdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizSesiTtdDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizSesiTtdDo) Delete(models ...*entity.QuizSesiTtd) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizSesiTtdDo) withDO(do gen.Dao) *quizSesiTtdDo {
	q.DO = *do.(*gen.DO)
	return q
}
