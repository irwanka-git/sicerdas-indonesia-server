// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalKarakteristikPribadi(db *gorm.DB, opts ...gen.DOOption) soalKarakteristikPribadi {
	_soalKarakteristikPribadi := soalKarakteristikPribadi{}

	_soalKarakteristikPribadi.soalKarakteristikPribadiDo.UseDB(db, opts...)
	_soalKarakteristikPribadi.soalKarakteristikPribadiDo.UseModel(&entity.SoalKarakteristikPribadi{})

	tableName := _soalKarakteristikPribadi.soalKarakteristikPribadiDo.TableName()
	_soalKarakteristikPribadi.ALL = field.NewAsterisk(tableName)
	_soalKarakteristikPribadi.IDSoal = field.NewInt32(tableName, "id_soal")
	_soalKarakteristikPribadi.IDKomponen = field.NewInt32(tableName, "id_komponen")
	_soalKarakteristikPribadi.Urutan = field.NewInt32(tableName, "urutan")
	_soalKarakteristikPribadi.Pernyataan = field.NewString(tableName, "pernyataan")
	_soalKarakteristikPribadi.UUID = field.NewString(tableName, "uuid")
	_soalKarakteristikPribadi.Pilihan1 = field.NewString(tableName, "pilihan_1")
	_soalKarakteristikPribadi.Pilihan2 = field.NewString(tableName, "pilihan_2")
	_soalKarakteristikPribadi.Pilihan3 = field.NewString(tableName, "pilihan_3")
	_soalKarakteristikPribadi.Pilihan4 = field.NewString(tableName, "pilihan_4")

	_soalKarakteristikPribadi.fillFieldMap()

	return _soalKarakteristikPribadi
}

type soalKarakteristikPribadi struct {
	soalKarakteristikPribadiDo soalKarakteristikPribadiDo

	ALL        field.Asterisk
	IDSoal     field.Int32
	IDKomponen field.Int32
	Urutan     field.Int32
	Pernyataan field.String
	UUID       field.String
	Pilihan1   field.String
	Pilihan2   field.String
	Pilihan3   field.String
	Pilihan4   field.String

	fieldMap map[string]field.Expr
}

func (s soalKarakteristikPribadi) Table(newTableName string) *soalKarakteristikPribadi {
	s.soalKarakteristikPribadiDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalKarakteristikPribadi) As(alias string) *soalKarakteristikPribadi {
	s.soalKarakteristikPribadiDo.DO = *(s.soalKarakteristikPribadiDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalKarakteristikPribadi) updateTableName(table string) *soalKarakteristikPribadi {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt32(table, "id_soal")
	s.IDKomponen = field.NewInt32(table, "id_komponen")
	s.Urutan = field.NewInt32(table, "urutan")
	s.Pernyataan = field.NewString(table, "pernyataan")
	s.UUID = field.NewString(table, "uuid")
	s.Pilihan1 = field.NewString(table, "pilihan_1")
	s.Pilihan2 = field.NewString(table, "pilihan_2")
	s.Pilihan3 = field.NewString(table, "pilihan_3")
	s.Pilihan4 = field.NewString(table, "pilihan_4")

	s.fillFieldMap()

	return s
}

func (s *soalKarakteristikPribadi) WithContext(ctx context.Context) *soalKarakteristikPribadiDo {
	return s.soalKarakteristikPribadiDo.WithContext(ctx)
}

func (s soalKarakteristikPribadi) TableName() string { return s.soalKarakteristikPribadiDo.TableName() }

func (s soalKarakteristikPribadi) Alias() string { return s.soalKarakteristikPribadiDo.Alias() }

func (s soalKarakteristikPribadi) Columns(cols ...field.Expr) gen.Columns {
	return s.soalKarakteristikPribadiDo.Columns(cols...)
}

func (s *soalKarakteristikPribadi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalKarakteristikPribadi) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["id_komponen"] = s.IDKomponen
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["pernyataan"] = s.Pernyataan
	s.fieldMap["uuid"] = s.UUID
	s.fieldMap["pilihan_1"] = s.Pilihan1
	s.fieldMap["pilihan_2"] = s.Pilihan2
	s.fieldMap["pilihan_3"] = s.Pilihan3
	s.fieldMap["pilihan_4"] = s.Pilihan4
}

func (s soalKarakteristikPribadi) clone(db *gorm.DB) soalKarakteristikPribadi {
	s.soalKarakteristikPribadiDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalKarakteristikPribadi) replaceDB(db *gorm.DB) soalKarakteristikPribadi {
	s.soalKarakteristikPribadiDo.ReplaceDB(db)
	return s
}

type soalKarakteristikPribadiDo struct{ gen.DO }

func (s soalKarakteristikPribadiDo) Debug() *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Debug())
}

func (s soalKarakteristikPribadiDo) WithContext(ctx context.Context) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalKarakteristikPribadiDo) ReadDB() *soalKarakteristikPribadiDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalKarakteristikPribadiDo) WriteDB() *soalKarakteristikPribadiDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalKarakteristikPribadiDo) Session(config *gorm.Session) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalKarakteristikPribadiDo) Clauses(conds ...clause.Expression) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalKarakteristikPribadiDo) Returning(value interface{}, columns ...string) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalKarakteristikPribadiDo) Not(conds ...gen.Condition) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalKarakteristikPribadiDo) Or(conds ...gen.Condition) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalKarakteristikPribadiDo) Select(conds ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalKarakteristikPribadiDo) Where(conds ...gen.Condition) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalKarakteristikPribadiDo) Order(conds ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalKarakteristikPribadiDo) Distinct(cols ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalKarakteristikPribadiDo) Omit(cols ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalKarakteristikPribadiDo) Join(table schema.Tabler, on ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalKarakteristikPribadiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalKarakteristikPribadiDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalKarakteristikPribadiDo) Group(cols ...field.Expr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalKarakteristikPribadiDo) Having(conds ...gen.Condition) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalKarakteristikPribadiDo) Limit(limit int) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalKarakteristikPribadiDo) Offset(offset int) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalKarakteristikPribadiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalKarakteristikPribadiDo) Unscoped() *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalKarakteristikPribadiDo) Create(values ...*entity.SoalKarakteristikPribadi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalKarakteristikPribadiDo) CreateInBatches(values []*entity.SoalKarakteristikPribadi, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalKarakteristikPribadiDo) Save(values ...*entity.SoalKarakteristikPribadi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalKarakteristikPribadiDo) First() (*entity.SoalKarakteristikPribadi, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKarakteristikPribadi), nil
	}
}

func (s soalKarakteristikPribadiDo) Take() (*entity.SoalKarakteristikPribadi, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKarakteristikPribadi), nil
	}
}

func (s soalKarakteristikPribadiDo) Last() (*entity.SoalKarakteristikPribadi, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKarakteristikPribadi), nil
	}
}

func (s soalKarakteristikPribadiDo) Find() ([]*entity.SoalKarakteristikPribadi, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalKarakteristikPribadi), err
}

func (s soalKarakteristikPribadiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalKarakteristikPribadi, err error) {
	buf := make([]*entity.SoalKarakteristikPribadi, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalKarakteristikPribadiDo) FindInBatches(result *[]*entity.SoalKarakteristikPribadi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalKarakteristikPribadiDo) Attrs(attrs ...field.AssignExpr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalKarakteristikPribadiDo) Assign(attrs ...field.AssignExpr) *soalKarakteristikPribadiDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalKarakteristikPribadiDo) Joins(fields ...field.RelationField) *soalKarakteristikPribadiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalKarakteristikPribadiDo) Preload(fields ...field.RelationField) *soalKarakteristikPribadiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalKarakteristikPribadiDo) FirstOrInit() (*entity.SoalKarakteristikPribadi, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKarakteristikPribadi), nil
	}
}

func (s soalKarakteristikPribadiDo) FirstOrCreate() (*entity.SoalKarakteristikPribadi, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalKarakteristikPribadi), nil
	}
}

func (s soalKarakteristikPribadiDo) FindByPage(offset int, limit int) (result []*entity.SoalKarakteristikPribadi, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalKarakteristikPribadiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalKarakteristikPribadiDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalKarakteristikPribadiDo) Delete(models ...*entity.SoalKarakteristikPribadi) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalKarakteristikPribadiDo) withDO(do gen.Dao) *soalKarakteristikPribadiDo {
	s.DO = *do.(*gen.DO)
	return s
}
