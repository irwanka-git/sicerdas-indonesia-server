// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSoalWlb(db *gorm.DB, opts ...gen.DOOption) soalWlb {
	_soalWlb := soalWlb{}

	_soalWlb.soalWlbDo.UseDB(db, opts...)
	_soalWlb.soalWlbDo.UseModel(&entity.SoalWlb{})

	tableName := _soalWlb.soalWlbDo.TableName()
	_soalWlb.ALL = field.NewAsterisk(tableName)
	_soalWlb.IDSoal = field.NewInt16(tableName, "id_soal")
	_soalWlb.IDModel = field.NewInt16(tableName, "id_model")
	_soalWlb.Unsur = field.NewString(tableName, "unsur")
	_soalWlb.Urutan = field.NewInt16(tableName, "urutan")
	_soalWlb.Kategori = field.NewString(tableName, "kategori")

	_soalWlb.fillFieldMap()

	return _soalWlb
}

type soalWlb struct {
	soalWlbDo soalWlbDo

	ALL      field.Asterisk
	IDSoal   field.Int16
	IDModel  field.Int16
	Unsur    field.String
	Urutan   field.Int16
	Kategori field.String // P=> Mendukung, N=> Tidak Mendukung

	fieldMap map[string]field.Expr
}

func (s soalWlb) Table(newTableName string) *soalWlb {
	s.soalWlbDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s soalWlb) As(alias string) *soalWlb {
	s.soalWlbDo.DO = *(s.soalWlbDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *soalWlb) updateTableName(table string) *soalWlb {
	s.ALL = field.NewAsterisk(table)
	s.IDSoal = field.NewInt16(table, "id_soal")
	s.IDModel = field.NewInt16(table, "id_model")
	s.Unsur = field.NewString(table, "unsur")
	s.Urutan = field.NewInt16(table, "urutan")
	s.Kategori = field.NewString(table, "kategori")

	s.fillFieldMap()

	return s
}

func (s *soalWlb) WithContext(ctx context.Context) *soalWlbDo { return s.soalWlbDo.WithContext(ctx) }

func (s soalWlb) TableName() string { return s.soalWlbDo.TableName() }

func (s soalWlb) Alias() string { return s.soalWlbDo.Alias() }

func (s soalWlb) Columns(cols ...field.Expr) gen.Columns { return s.soalWlbDo.Columns(cols...) }

func (s *soalWlb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *soalWlb) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id_soal"] = s.IDSoal
	s.fieldMap["id_model"] = s.IDModel
	s.fieldMap["unsur"] = s.Unsur
	s.fieldMap["urutan"] = s.Urutan
	s.fieldMap["kategori"] = s.Kategori
}

func (s soalWlb) clone(db *gorm.DB) soalWlb {
	s.soalWlbDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s soalWlb) replaceDB(db *gorm.DB) soalWlb {
	s.soalWlbDo.ReplaceDB(db)
	return s
}

type soalWlbDo struct{ gen.DO }

func (s soalWlbDo) Debug() *soalWlbDo {
	return s.withDO(s.DO.Debug())
}

func (s soalWlbDo) WithContext(ctx context.Context) *soalWlbDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s soalWlbDo) ReadDB() *soalWlbDo {
	return s.Clauses(dbresolver.Read)
}

func (s soalWlbDo) WriteDB() *soalWlbDo {
	return s.Clauses(dbresolver.Write)
}

func (s soalWlbDo) Session(config *gorm.Session) *soalWlbDo {
	return s.withDO(s.DO.Session(config))
}

func (s soalWlbDo) Clauses(conds ...clause.Expression) *soalWlbDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s soalWlbDo) Returning(value interface{}, columns ...string) *soalWlbDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s soalWlbDo) Not(conds ...gen.Condition) *soalWlbDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s soalWlbDo) Or(conds ...gen.Condition) *soalWlbDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s soalWlbDo) Select(conds ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s soalWlbDo) Where(conds ...gen.Condition) *soalWlbDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s soalWlbDo) Order(conds ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s soalWlbDo) Distinct(cols ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s soalWlbDo) Omit(cols ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s soalWlbDo) Join(table schema.Tabler, on ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s soalWlbDo) LeftJoin(table schema.Tabler, on ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s soalWlbDo) RightJoin(table schema.Tabler, on ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s soalWlbDo) Group(cols ...field.Expr) *soalWlbDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s soalWlbDo) Having(conds ...gen.Condition) *soalWlbDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s soalWlbDo) Limit(limit int) *soalWlbDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s soalWlbDo) Offset(offset int) *soalWlbDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s soalWlbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *soalWlbDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s soalWlbDo) Unscoped() *soalWlbDo {
	return s.withDO(s.DO.Unscoped())
}

func (s soalWlbDo) Create(values ...*entity.SoalWlb) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s soalWlbDo) CreateInBatches(values []*entity.SoalWlb, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s soalWlbDo) Save(values ...*entity.SoalWlb) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s soalWlbDo) First() (*entity.SoalWlb, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalWlb), nil
	}
}

func (s soalWlbDo) Take() (*entity.SoalWlb, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalWlb), nil
	}
}

func (s soalWlbDo) Last() (*entity.SoalWlb, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalWlb), nil
	}
}

func (s soalWlbDo) Find() ([]*entity.SoalWlb, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SoalWlb), err
}

func (s soalWlbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SoalWlb, err error) {
	buf := make([]*entity.SoalWlb, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s soalWlbDo) FindInBatches(result *[]*entity.SoalWlb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s soalWlbDo) Attrs(attrs ...field.AssignExpr) *soalWlbDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s soalWlbDo) Assign(attrs ...field.AssignExpr) *soalWlbDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s soalWlbDo) Joins(fields ...field.RelationField) *soalWlbDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s soalWlbDo) Preload(fields ...field.RelationField) *soalWlbDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s soalWlbDo) FirstOrInit() (*entity.SoalWlb, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalWlb), nil
	}
}

func (s soalWlbDo) FirstOrCreate() (*entity.SoalWlb, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SoalWlb), nil
	}
}

func (s soalWlbDo) FindByPage(offset int, limit int) (result []*entity.SoalWlb, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s soalWlbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s soalWlbDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s soalWlbDo) Delete(models ...*entity.SoalWlb) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *soalWlbDo) withDO(do gen.Dao) *soalWlbDo {
	s.DO = *do.(*gen.DO)
	return s
}
