// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorSikapPelajaranMk(db *gorm.DB, opts ...gen.DOOption) skorSikapPelajaranMk {
	_skorSikapPelajaranMk := skorSikapPelajaranMk{}

	_skorSikapPelajaranMk.skorSikapPelajaranMkDo.UseDB(db, opts...)
	_skorSikapPelajaranMk.skorSikapPelajaranMkDo.UseModel(&entity.SkorSikapPelajaranMk{})

	tableName := _skorSikapPelajaranMk.skorSikapPelajaranMkDo.TableName()
	_skorSikapPelajaranMk.ALL = field.NewAsterisk(tableName)
	_skorSikapPelajaranMk.IDUser = field.NewInt32(tableName, "id_user")
	_skorSikapPelajaranMk.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorSikapPelajaranMk.SikapAgm = field.NewInt32(tableName, "sikap_agm")
	_skorSikapPelajaranMk.SikapPkn = field.NewInt32(tableName, "sikap_pkn")
	_skorSikapPelajaranMk.SikapInd = field.NewInt32(tableName, "sikap_ind")
	_skorSikapPelajaranMk.SikapEng = field.NewInt32(tableName, "sikap_eng")
	_skorSikapPelajaranMk.SikapMat = field.NewInt32(tableName, "sikap_mat")
	_skorSikapPelajaranMk.SikapFis = field.NewInt32(tableName, "sikap_fis")
	_skorSikapPelajaranMk.SikapBio = field.NewInt32(tableName, "sikap_bio")
	_skorSikapPelajaranMk.SikapKim = field.NewInt32(tableName, "sikap_kim")
	_skorSikapPelajaranMk.SikapEko = field.NewInt32(tableName, "sikap_eko")
	_skorSikapPelajaranMk.SikapSej = field.NewInt32(tableName, "sikap_sej")
	_skorSikapPelajaranMk.SikapSos = field.NewInt32(tableName, "sikap_sos")
	_skorSikapPelajaranMk.SikapGeo = field.NewInt32(tableName, "sikap_geo")
	_skorSikapPelajaranMk.SikapSbd = field.NewInt32(tableName, "sikap_sbd")
	_skorSikapPelajaranMk.SikapOrg = field.NewInt32(tableName, "sikap_org")
	_skorSikapPelajaranMk.SikapMlk = field.NewInt32(tableName, "sikap_mlk")
	_skorSikapPelajaranMk.SikapTik = field.NewInt32(tableName, "sikap_tik")
	_skorSikapPelajaranMk.KlasifikasiAgm = field.NewString(tableName, "klasifikasi_agm")
	_skorSikapPelajaranMk.KlasifikasiPkn = field.NewString(tableName, "klasifikasi_pkn")
	_skorSikapPelajaranMk.KlasifikasiInd = field.NewString(tableName, "klasifikasi_ind")
	_skorSikapPelajaranMk.KlasifikasiEng = field.NewString(tableName, "klasifikasi_eng")
	_skorSikapPelajaranMk.KlasifikasiMat = field.NewString(tableName, "klasifikasi_mat")
	_skorSikapPelajaranMk.KlasifikasiFis = field.NewString(tableName, "klasifikasi_fis")
	_skorSikapPelajaranMk.KlasifikasiBio = field.NewString(tableName, "klasifikasi_bio")
	_skorSikapPelajaranMk.KlasifikasiKim = field.NewString(tableName, "klasifikasi_kim")
	_skorSikapPelajaranMk.KlasifikasiEko = field.NewString(tableName, "klasifikasi_eko")
	_skorSikapPelajaranMk.KlasifikasiSej = field.NewString(tableName, "klasifikasi_sej")
	_skorSikapPelajaranMk.KlasifikasiSos = field.NewString(tableName, "klasifikasi_sos")
	_skorSikapPelajaranMk.KlasifikasiGeo = field.NewString(tableName, "klasifikasi_geo")
	_skorSikapPelajaranMk.KlasifikasiSbd = field.NewString(tableName, "klasifikasi_sbd")
	_skorSikapPelajaranMk.KlasifikasiOrg = field.NewString(tableName, "klasifikasi_org")
	_skorSikapPelajaranMk.KlasifikasiMlk = field.NewString(tableName, "klasifikasi_mlk")
	_skorSikapPelajaranMk.KlasifikasiTik = field.NewString(tableName, "klasifikasi_tik")

	_skorSikapPelajaranMk.fillFieldMap()

	return _skorSikapPelajaranMk
}

type skorSikapPelajaranMk struct {
	skorSikapPelajaranMkDo skorSikapPelajaranMkDo

	ALL            field.Asterisk
	IDUser         field.Int32
	IDQuiz         field.Int32
	SikapAgm       field.Int32
	SikapPkn       field.Int32
	SikapInd       field.Int32
	SikapEng       field.Int32
	SikapMat       field.Int32
	SikapFis       field.Int32
	SikapBio       field.Int32
	SikapKim       field.Int32
	SikapEko       field.Int32
	SikapSej       field.Int32
	SikapSos       field.Int32
	SikapGeo       field.Int32
	SikapSbd       field.Int32
	SikapOrg       field.Int32
	SikapMlk       field.Int32
	SikapTik       field.Int32
	KlasifikasiAgm field.String
	KlasifikasiPkn field.String
	KlasifikasiInd field.String
	KlasifikasiEng field.String
	KlasifikasiMat field.String
	KlasifikasiFis field.String
	KlasifikasiBio field.String
	KlasifikasiKim field.String
	KlasifikasiEko field.String
	KlasifikasiSej field.String
	KlasifikasiSos field.String
	KlasifikasiGeo field.String
	KlasifikasiSbd field.String
	KlasifikasiOrg field.String
	KlasifikasiMlk field.String
	KlasifikasiTik field.String

	fieldMap map[string]field.Expr
}

func (s skorSikapPelajaranMk) Table(newTableName string) *skorSikapPelajaranMk {
	s.skorSikapPelajaranMkDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorSikapPelajaranMk) As(alias string) *skorSikapPelajaranMk {
	s.skorSikapPelajaranMkDo.DO = *(s.skorSikapPelajaranMkDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorSikapPelajaranMk) updateTableName(table string) *skorSikapPelajaranMk {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.SikapAgm = field.NewInt32(table, "sikap_agm")
	s.SikapPkn = field.NewInt32(table, "sikap_pkn")
	s.SikapInd = field.NewInt32(table, "sikap_ind")
	s.SikapEng = field.NewInt32(table, "sikap_eng")
	s.SikapMat = field.NewInt32(table, "sikap_mat")
	s.SikapFis = field.NewInt32(table, "sikap_fis")
	s.SikapBio = field.NewInt32(table, "sikap_bio")
	s.SikapKim = field.NewInt32(table, "sikap_kim")
	s.SikapEko = field.NewInt32(table, "sikap_eko")
	s.SikapSej = field.NewInt32(table, "sikap_sej")
	s.SikapSos = field.NewInt32(table, "sikap_sos")
	s.SikapGeo = field.NewInt32(table, "sikap_geo")
	s.SikapSbd = field.NewInt32(table, "sikap_sbd")
	s.SikapOrg = field.NewInt32(table, "sikap_org")
	s.SikapMlk = field.NewInt32(table, "sikap_mlk")
	s.SikapTik = field.NewInt32(table, "sikap_tik")
	s.KlasifikasiAgm = field.NewString(table, "klasifikasi_agm")
	s.KlasifikasiPkn = field.NewString(table, "klasifikasi_pkn")
	s.KlasifikasiInd = field.NewString(table, "klasifikasi_ind")
	s.KlasifikasiEng = field.NewString(table, "klasifikasi_eng")
	s.KlasifikasiMat = field.NewString(table, "klasifikasi_mat")
	s.KlasifikasiFis = field.NewString(table, "klasifikasi_fis")
	s.KlasifikasiBio = field.NewString(table, "klasifikasi_bio")
	s.KlasifikasiKim = field.NewString(table, "klasifikasi_kim")
	s.KlasifikasiEko = field.NewString(table, "klasifikasi_eko")
	s.KlasifikasiSej = field.NewString(table, "klasifikasi_sej")
	s.KlasifikasiSos = field.NewString(table, "klasifikasi_sos")
	s.KlasifikasiGeo = field.NewString(table, "klasifikasi_geo")
	s.KlasifikasiSbd = field.NewString(table, "klasifikasi_sbd")
	s.KlasifikasiOrg = field.NewString(table, "klasifikasi_org")
	s.KlasifikasiMlk = field.NewString(table, "klasifikasi_mlk")
	s.KlasifikasiTik = field.NewString(table, "klasifikasi_tik")

	s.fillFieldMap()

	return s
}

func (s *skorSikapPelajaranMk) WithContext(ctx context.Context) *skorSikapPelajaranMkDo {
	return s.skorSikapPelajaranMkDo.WithContext(ctx)
}

func (s skorSikapPelajaranMk) TableName() string { return s.skorSikapPelajaranMkDo.TableName() }

func (s skorSikapPelajaranMk) Alias() string { return s.skorSikapPelajaranMkDo.Alias() }

func (s skorSikapPelajaranMk) Columns(cols ...field.Expr) gen.Columns {
	return s.skorSikapPelajaranMkDo.Columns(cols...)
}

func (s *skorSikapPelajaranMk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorSikapPelajaranMk) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 34)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["sikap_agm"] = s.SikapAgm
	s.fieldMap["sikap_pkn"] = s.SikapPkn
	s.fieldMap["sikap_ind"] = s.SikapInd
	s.fieldMap["sikap_eng"] = s.SikapEng
	s.fieldMap["sikap_mat"] = s.SikapMat
	s.fieldMap["sikap_fis"] = s.SikapFis
	s.fieldMap["sikap_bio"] = s.SikapBio
	s.fieldMap["sikap_kim"] = s.SikapKim
	s.fieldMap["sikap_eko"] = s.SikapEko
	s.fieldMap["sikap_sej"] = s.SikapSej
	s.fieldMap["sikap_sos"] = s.SikapSos
	s.fieldMap["sikap_geo"] = s.SikapGeo
	s.fieldMap["sikap_sbd"] = s.SikapSbd
	s.fieldMap["sikap_org"] = s.SikapOrg
	s.fieldMap["sikap_mlk"] = s.SikapMlk
	s.fieldMap["sikap_tik"] = s.SikapTik
	s.fieldMap["klasifikasi_agm"] = s.KlasifikasiAgm
	s.fieldMap["klasifikasi_pkn"] = s.KlasifikasiPkn
	s.fieldMap["klasifikasi_ind"] = s.KlasifikasiInd
	s.fieldMap["klasifikasi_eng"] = s.KlasifikasiEng
	s.fieldMap["klasifikasi_mat"] = s.KlasifikasiMat
	s.fieldMap["klasifikasi_fis"] = s.KlasifikasiFis
	s.fieldMap["klasifikasi_bio"] = s.KlasifikasiBio
	s.fieldMap["klasifikasi_kim"] = s.KlasifikasiKim
	s.fieldMap["klasifikasi_eko"] = s.KlasifikasiEko
	s.fieldMap["klasifikasi_sej"] = s.KlasifikasiSej
	s.fieldMap["klasifikasi_sos"] = s.KlasifikasiSos
	s.fieldMap["klasifikasi_geo"] = s.KlasifikasiGeo
	s.fieldMap["klasifikasi_sbd"] = s.KlasifikasiSbd
	s.fieldMap["klasifikasi_org"] = s.KlasifikasiOrg
	s.fieldMap["klasifikasi_mlk"] = s.KlasifikasiMlk
	s.fieldMap["klasifikasi_tik"] = s.KlasifikasiTik
}

func (s skorSikapPelajaranMk) clone(db *gorm.DB) skorSikapPelajaranMk {
	s.skorSikapPelajaranMkDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorSikapPelajaranMk) replaceDB(db *gorm.DB) skorSikapPelajaranMk {
	s.skorSikapPelajaranMkDo.ReplaceDB(db)
	return s
}

type skorSikapPelajaranMkDo struct{ gen.DO }

func (s skorSikapPelajaranMkDo) Debug() *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Debug())
}

func (s skorSikapPelajaranMkDo) WithContext(ctx context.Context) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorSikapPelajaranMkDo) ReadDB() *skorSikapPelajaranMkDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorSikapPelajaranMkDo) WriteDB() *skorSikapPelajaranMkDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorSikapPelajaranMkDo) Session(config *gorm.Session) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorSikapPelajaranMkDo) Clauses(conds ...clause.Expression) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorSikapPelajaranMkDo) Returning(value interface{}, columns ...string) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorSikapPelajaranMkDo) Not(conds ...gen.Condition) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorSikapPelajaranMkDo) Or(conds ...gen.Condition) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorSikapPelajaranMkDo) Select(conds ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorSikapPelajaranMkDo) Where(conds ...gen.Condition) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorSikapPelajaranMkDo) Order(conds ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorSikapPelajaranMkDo) Distinct(cols ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorSikapPelajaranMkDo) Omit(cols ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorSikapPelajaranMkDo) Join(table schema.Tabler, on ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorSikapPelajaranMkDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorSikapPelajaranMkDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorSikapPelajaranMkDo) Group(cols ...field.Expr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorSikapPelajaranMkDo) Having(conds ...gen.Condition) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorSikapPelajaranMkDo) Limit(limit int) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorSikapPelajaranMkDo) Offset(offset int) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorSikapPelajaranMkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorSikapPelajaranMkDo) Unscoped() *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorSikapPelajaranMkDo) Create(values ...*entity.SkorSikapPelajaranMk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorSikapPelajaranMkDo) CreateInBatches(values []*entity.SkorSikapPelajaranMk, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorSikapPelajaranMkDo) Save(values ...*entity.SkorSikapPelajaranMk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorSikapPelajaranMkDo) First() (*entity.SkorSikapPelajaranMk, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorSikapPelajaranMk), nil
	}
}

func (s skorSikapPelajaranMkDo) Take() (*entity.SkorSikapPelajaranMk, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorSikapPelajaranMk), nil
	}
}

func (s skorSikapPelajaranMkDo) Last() (*entity.SkorSikapPelajaranMk, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorSikapPelajaranMk), nil
	}
}

func (s skorSikapPelajaranMkDo) Find() ([]*entity.SkorSikapPelajaranMk, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorSikapPelajaranMk), err
}

func (s skorSikapPelajaranMkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorSikapPelajaranMk, err error) {
	buf := make([]*entity.SkorSikapPelajaranMk, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorSikapPelajaranMkDo) FindInBatches(result *[]*entity.SkorSikapPelajaranMk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorSikapPelajaranMkDo) Attrs(attrs ...field.AssignExpr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorSikapPelajaranMkDo) Assign(attrs ...field.AssignExpr) *skorSikapPelajaranMkDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorSikapPelajaranMkDo) Joins(fields ...field.RelationField) *skorSikapPelajaranMkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorSikapPelajaranMkDo) Preload(fields ...field.RelationField) *skorSikapPelajaranMkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorSikapPelajaranMkDo) FirstOrInit() (*entity.SkorSikapPelajaranMk, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorSikapPelajaranMk), nil
	}
}

func (s skorSikapPelajaranMkDo) FirstOrCreate() (*entity.SkorSikapPelajaranMk, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorSikapPelajaranMk), nil
	}
}

func (s skorSikapPelajaranMkDo) FindByPage(offset int, limit int) (result []*entity.SkorSikapPelajaranMk, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorSikapPelajaranMkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorSikapPelajaranMkDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorSikapPelajaranMkDo) Delete(models ...*entity.SkorSikapPelajaranMk) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorSikapPelajaranMkDo) withDO(do gen.Dao) *skorSikapPelajaranMkDo {
	s.DO = *do.(*gen.DO)
	return s
}
