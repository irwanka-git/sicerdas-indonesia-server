// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefSkoringWlb(db *gorm.DB, opts ...gen.DOOption) refSkoringWlb {
	_refSkoringWlb := refSkoringWlb{}

	_refSkoringWlb.refSkoringWlbDo.UseDB(db, opts...)
	_refSkoringWlb.refSkoringWlbDo.UseModel(&entity.RefSkoringWlb{})

	tableName := _refSkoringWlb.refSkoringWlbDo.TableName()
	_refSkoringWlb.ALL = field.NewAsterisk(tableName)
	_refSkoringWlb.Skor = field.NewInt16(tableName, "skor")
	_refSkoringWlb.Nilai = field.NewInt16(tableName, "nilai")

	_refSkoringWlb.fillFieldMap()

	return _refSkoringWlb
}

type refSkoringWlb struct {
	refSkoringWlbDo refSkoringWlbDo

	ALL   field.Asterisk
	Skor  field.Int16
	Nilai field.Int16

	fieldMap map[string]field.Expr
}

func (r refSkoringWlb) Table(newTableName string) *refSkoringWlb {
	r.refSkoringWlbDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refSkoringWlb) As(alias string) *refSkoringWlb {
	r.refSkoringWlbDo.DO = *(r.refSkoringWlbDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refSkoringWlb) updateTableName(table string) *refSkoringWlb {
	r.ALL = field.NewAsterisk(table)
	r.Skor = field.NewInt16(table, "skor")
	r.Nilai = field.NewInt16(table, "nilai")

	r.fillFieldMap()

	return r
}

func (r *refSkoringWlb) WithContext(ctx context.Context) *refSkoringWlbDo {
	return r.refSkoringWlbDo.WithContext(ctx)
}

func (r refSkoringWlb) TableName() string { return r.refSkoringWlbDo.TableName() }

func (r refSkoringWlb) Alias() string { return r.refSkoringWlbDo.Alias() }

func (r refSkoringWlb) Columns(cols ...field.Expr) gen.Columns {
	return r.refSkoringWlbDo.Columns(cols...)
}

func (r *refSkoringWlb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refSkoringWlb) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["skor"] = r.Skor
	r.fieldMap["nilai"] = r.Nilai
}

func (r refSkoringWlb) clone(db *gorm.DB) refSkoringWlb {
	r.refSkoringWlbDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refSkoringWlb) replaceDB(db *gorm.DB) refSkoringWlb {
	r.refSkoringWlbDo.ReplaceDB(db)
	return r
}

type refSkoringWlbDo struct{ gen.DO }

func (r refSkoringWlbDo) Debug() *refSkoringWlbDo {
	return r.withDO(r.DO.Debug())
}

func (r refSkoringWlbDo) WithContext(ctx context.Context) *refSkoringWlbDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refSkoringWlbDo) ReadDB() *refSkoringWlbDo {
	return r.Clauses(dbresolver.Read)
}

func (r refSkoringWlbDo) WriteDB() *refSkoringWlbDo {
	return r.Clauses(dbresolver.Write)
}

func (r refSkoringWlbDo) Session(config *gorm.Session) *refSkoringWlbDo {
	return r.withDO(r.DO.Session(config))
}

func (r refSkoringWlbDo) Clauses(conds ...clause.Expression) *refSkoringWlbDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refSkoringWlbDo) Returning(value interface{}, columns ...string) *refSkoringWlbDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refSkoringWlbDo) Not(conds ...gen.Condition) *refSkoringWlbDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refSkoringWlbDo) Or(conds ...gen.Condition) *refSkoringWlbDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refSkoringWlbDo) Select(conds ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refSkoringWlbDo) Where(conds ...gen.Condition) *refSkoringWlbDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refSkoringWlbDo) Order(conds ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refSkoringWlbDo) Distinct(cols ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refSkoringWlbDo) Omit(cols ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refSkoringWlbDo) Join(table schema.Tabler, on ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refSkoringWlbDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refSkoringWlbDo) RightJoin(table schema.Tabler, on ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refSkoringWlbDo) Group(cols ...field.Expr) *refSkoringWlbDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refSkoringWlbDo) Having(conds ...gen.Condition) *refSkoringWlbDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refSkoringWlbDo) Limit(limit int) *refSkoringWlbDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refSkoringWlbDo) Offset(offset int) *refSkoringWlbDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refSkoringWlbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refSkoringWlbDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refSkoringWlbDo) Unscoped() *refSkoringWlbDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refSkoringWlbDo) Create(values ...*entity.RefSkoringWlb) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refSkoringWlbDo) CreateInBatches(values []*entity.RefSkoringWlb, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refSkoringWlbDo) Save(values ...*entity.RefSkoringWlb) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refSkoringWlbDo) First() (*entity.RefSkoringWlb, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringWlb), nil
	}
}

func (r refSkoringWlbDo) Take() (*entity.RefSkoringWlb, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringWlb), nil
	}
}

func (r refSkoringWlbDo) Last() (*entity.RefSkoringWlb, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringWlb), nil
	}
}

func (r refSkoringWlbDo) Find() ([]*entity.RefSkoringWlb, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefSkoringWlb), err
}

func (r refSkoringWlbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefSkoringWlb, err error) {
	buf := make([]*entity.RefSkoringWlb, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refSkoringWlbDo) FindInBatches(result *[]*entity.RefSkoringWlb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refSkoringWlbDo) Attrs(attrs ...field.AssignExpr) *refSkoringWlbDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refSkoringWlbDo) Assign(attrs ...field.AssignExpr) *refSkoringWlbDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refSkoringWlbDo) Joins(fields ...field.RelationField) *refSkoringWlbDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refSkoringWlbDo) Preload(fields ...field.RelationField) *refSkoringWlbDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refSkoringWlbDo) FirstOrInit() (*entity.RefSkoringWlb, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringWlb), nil
	}
}

func (r refSkoringWlbDo) FirstOrCreate() (*entity.RefSkoringWlb, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringWlb), nil
	}
}

func (r refSkoringWlbDo) FindByPage(offset int, limit int) (result []*entity.RefSkoringWlb, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refSkoringWlbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refSkoringWlbDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refSkoringWlbDo) Delete(models ...*entity.RefSkoringWlb) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refSkoringWlbDo) withDO(do gen.Dao) *refSkoringWlbDo {
	r.DO = *do.(*gen.DO)
	return r
}
