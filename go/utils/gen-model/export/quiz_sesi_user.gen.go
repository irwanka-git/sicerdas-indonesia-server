// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newQuizSesiUser(db *gorm.DB, opts ...gen.DOOption) quizSesiUser {
	_quizSesiUser := quizSesiUser{}

	_quizSesiUser.quizSesiUserDo.UseDB(db, opts...)
	_quizSesiUser.quizSesiUserDo.UseModel(&entity.QuizSesiUser{})

	tableName := _quizSesiUser.quizSesiUserDo.TableName()
	_quizSesiUser.ALL = field.NewAsterisk(tableName)
	_quizSesiUser.IDQuizUser = field.NewInt32(tableName, "id_quiz_user")
	_quizSesiUser.IDUser = field.NewInt32(tableName, "id_user")
	_quizSesiUser.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_quizSesiUser.StartAt = field.NewTime(tableName, "start_at")
	_quizSesiUser.Submit = field.NewInt32(tableName, "submit")
	_quizSesiUser.SubmitAt = field.NewTime(tableName, "submit_at")
	_quizSesiUser.TokenSubmit = field.NewString(tableName, "token_submit")
	_quizSesiUser.Jawaban = field.NewString(tableName, "jawaban")
	_quizSesiUser.StatusHasil = field.NewInt32(tableName, "status_hasil")
	_quizSesiUser.SkoringAt = field.NewTime(tableName, "skoring_at")
	_quizSesiUser.Skoring = field.NewInt32(tableName, "skoring")
	_quizSesiUser.JawabanSkoring = field.NewString(tableName, "jawaban_skoring")
	_quizSesiUser.Saran = field.NewString(tableName, "saran")
	_quizSesiUser.UUID = field.NewString(tableName, "uuid")
	_quizSesiUser.NoSeri = field.NewString(tableName, "no_seri")

	_quizSesiUser.fillFieldMap()

	return _quizSesiUser
}

type quizSesiUser struct {
	quizSesiUserDo quizSesiUserDo

	ALL            field.Asterisk
	IDQuizUser     field.Int32
	IDUser         field.Int32
	IDQuiz         field.Int32
	StartAt        field.Time
	Submit         field.Int32
	SubmitAt       field.Time
	TokenSubmit    field.String
	Jawaban        field.String // berisi JSON jawaban quiz
	StatusHasil    field.Int32  // 1=>Sudah Publish, 0=>Belum Publish
	SkoringAt      field.Time
	Skoring        field.Int32  // 1=>sudah skoring, 0=>Belum Skoring
	JawabanSkoring field.String // Konversi Data Tabel quiz_user_sesi_jawaban ke JSON
	Saran          field.String // Ambil Dari Template Berdasarkan Nama Tabel Skoring
	UUID           field.String
	NoSeri         field.String

	fieldMap map[string]field.Expr
}

func (q quizSesiUser) Table(newTableName string) *quizSesiUser {
	q.quizSesiUserDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quizSesiUser) As(alias string) *quizSesiUser {
	q.quizSesiUserDo.DO = *(q.quizSesiUserDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quizSesiUser) updateTableName(table string) *quizSesiUser {
	q.ALL = field.NewAsterisk(table)
	q.IDQuizUser = field.NewInt32(table, "id_quiz_user")
	q.IDUser = field.NewInt32(table, "id_user")
	q.IDQuiz = field.NewInt32(table, "id_quiz")
	q.StartAt = field.NewTime(table, "start_at")
	q.Submit = field.NewInt32(table, "submit")
	q.SubmitAt = field.NewTime(table, "submit_at")
	q.TokenSubmit = field.NewString(table, "token_submit")
	q.Jawaban = field.NewString(table, "jawaban")
	q.StatusHasil = field.NewInt32(table, "status_hasil")
	q.SkoringAt = field.NewTime(table, "skoring_at")
	q.Skoring = field.NewInt32(table, "skoring")
	q.JawabanSkoring = field.NewString(table, "jawaban_skoring")
	q.Saran = field.NewString(table, "saran")
	q.UUID = field.NewString(table, "uuid")
	q.NoSeri = field.NewString(table, "no_seri")

	q.fillFieldMap()

	return q
}

func (q *quizSesiUser) WithContext(ctx context.Context) *quizSesiUserDo {
	return q.quizSesiUserDo.WithContext(ctx)
}

func (q quizSesiUser) TableName() string { return q.quizSesiUserDo.TableName() }

func (q quizSesiUser) Alias() string { return q.quizSesiUserDo.Alias() }

func (q quizSesiUser) Columns(cols ...field.Expr) gen.Columns {
	return q.quizSesiUserDo.Columns(cols...)
}

func (q *quizSesiUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quizSesiUser) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 15)
	q.fieldMap["id_quiz_user"] = q.IDQuizUser
	q.fieldMap["id_user"] = q.IDUser
	q.fieldMap["id_quiz"] = q.IDQuiz
	q.fieldMap["start_at"] = q.StartAt
	q.fieldMap["submit"] = q.Submit
	q.fieldMap["submit_at"] = q.SubmitAt
	q.fieldMap["token_submit"] = q.TokenSubmit
	q.fieldMap["jawaban"] = q.Jawaban
	q.fieldMap["status_hasil"] = q.StatusHasil
	q.fieldMap["skoring_at"] = q.SkoringAt
	q.fieldMap["skoring"] = q.Skoring
	q.fieldMap["jawaban_skoring"] = q.JawabanSkoring
	q.fieldMap["saran"] = q.Saran
	q.fieldMap["uuid"] = q.UUID
	q.fieldMap["no_seri"] = q.NoSeri
}

func (q quizSesiUser) clone(db *gorm.DB) quizSesiUser {
	q.quizSesiUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quizSesiUser) replaceDB(db *gorm.DB) quizSesiUser {
	q.quizSesiUserDo.ReplaceDB(db)
	return q
}

type quizSesiUserDo struct{ gen.DO }

func (q quizSesiUserDo) Debug() *quizSesiUserDo {
	return q.withDO(q.DO.Debug())
}

func (q quizSesiUserDo) WithContext(ctx context.Context) *quizSesiUserDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizSesiUserDo) ReadDB() *quizSesiUserDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizSesiUserDo) WriteDB() *quizSesiUserDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizSesiUserDo) Session(config *gorm.Session) *quizSesiUserDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizSesiUserDo) Clauses(conds ...clause.Expression) *quizSesiUserDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizSesiUserDo) Returning(value interface{}, columns ...string) *quizSesiUserDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizSesiUserDo) Not(conds ...gen.Condition) *quizSesiUserDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizSesiUserDo) Or(conds ...gen.Condition) *quizSesiUserDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizSesiUserDo) Select(conds ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizSesiUserDo) Where(conds ...gen.Condition) *quizSesiUserDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizSesiUserDo) Order(conds ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizSesiUserDo) Distinct(cols ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizSesiUserDo) Omit(cols ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizSesiUserDo) Join(table schema.Tabler, on ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizSesiUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizSesiUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizSesiUserDo) Group(cols ...field.Expr) *quizSesiUserDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizSesiUserDo) Having(conds ...gen.Condition) *quizSesiUserDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizSesiUserDo) Limit(limit int) *quizSesiUserDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizSesiUserDo) Offset(offset int) *quizSesiUserDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizSesiUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *quizSesiUserDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizSesiUserDo) Unscoped() *quizSesiUserDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizSesiUserDo) Create(values ...*entity.QuizSesiUser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizSesiUserDo) CreateInBatches(values []*entity.QuizSesiUser, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizSesiUserDo) Save(values ...*entity.QuizSesiUser) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizSesiUserDo) First() (*entity.QuizSesiUser, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiUser), nil
	}
}

func (q quizSesiUserDo) Take() (*entity.QuizSesiUser, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiUser), nil
	}
}

func (q quizSesiUserDo) Last() (*entity.QuizSesiUser, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiUser), nil
	}
}

func (q quizSesiUserDo) Find() ([]*entity.QuizSesiUser, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuizSesiUser), err
}

func (q quizSesiUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuizSesiUser, err error) {
	buf := make([]*entity.QuizSesiUser, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizSesiUserDo) FindInBatches(result *[]*entity.QuizSesiUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizSesiUserDo) Attrs(attrs ...field.AssignExpr) *quizSesiUserDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizSesiUserDo) Assign(attrs ...field.AssignExpr) *quizSesiUserDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizSesiUserDo) Joins(fields ...field.RelationField) *quizSesiUserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizSesiUserDo) Preload(fields ...field.RelationField) *quizSesiUserDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizSesiUserDo) FirstOrInit() (*entity.QuizSesiUser, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiUser), nil
	}
}

func (q quizSesiUserDo) FirstOrCreate() (*entity.QuizSesiUser, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesiUser), nil
	}
}

func (q quizSesiUserDo) FindByPage(offset int, limit int) (result []*entity.QuizSesiUser, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizSesiUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizSesiUserDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizSesiUserDo) Delete(models ...*entity.QuizSesiUser) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizSesiUserDo) withDO(do gen.Dao) *quizSesiUserDo {
	q.DO = *do.(*gen.DO)
	return q
}
