// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefPilihanMinatMan(db *gorm.DB, opts ...gen.DOOption) refPilihanMinatMan {
	_refPilihanMinatMan := refPilihanMinatMan{}

	_refPilihanMinatMan.refPilihanMinatManDo.UseDB(db, opts...)
	_refPilihanMinatMan.refPilihanMinatManDo.UseModel(&entity.RefPilihanMinatMan{})

	tableName := _refPilihanMinatMan.refPilihanMinatManDo.TableName()
	_refPilihanMinatMan.ALL = field.NewAsterisk(tableName)
	_refPilihanMinatMan.ID = field.NewInt32(tableName, "id")
	_refPilihanMinatMan.KdPilihan = field.NewString(tableName, "kd_pilihan")
	_refPilihanMinatMan.NamaPilihan = field.NewString(tableName, "nama_pilihan")
	_refPilihanMinatMan.FieldSkoring = field.NewString(tableName, "field_skoring")
	_refPilihanMinatMan.Keterangan = field.NewString(tableName, "keterangan")

	_refPilihanMinatMan.fillFieldMap()

	return _refPilihanMinatMan
}

type refPilihanMinatMan struct {
	refPilihanMinatManDo refPilihanMinatManDo

	ALL          field.Asterisk
	ID           field.Int32
	KdPilihan    field.String
	NamaPilihan  field.String
	FieldSkoring field.String
	Keterangan   field.String

	fieldMap map[string]field.Expr
}

func (r refPilihanMinatMan) Table(newTableName string) *refPilihanMinatMan {
	r.refPilihanMinatManDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refPilihanMinatMan) As(alias string) *refPilihanMinatMan {
	r.refPilihanMinatManDo.DO = *(r.refPilihanMinatManDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refPilihanMinatMan) updateTableName(table string) *refPilihanMinatMan {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.KdPilihan = field.NewString(table, "kd_pilihan")
	r.NamaPilihan = field.NewString(table, "nama_pilihan")
	r.FieldSkoring = field.NewString(table, "field_skoring")
	r.Keterangan = field.NewString(table, "keterangan")

	r.fillFieldMap()

	return r
}

func (r *refPilihanMinatMan) WithContext(ctx context.Context) *refPilihanMinatManDo {
	return r.refPilihanMinatManDo.WithContext(ctx)
}

func (r refPilihanMinatMan) TableName() string { return r.refPilihanMinatManDo.TableName() }

func (r refPilihanMinatMan) Alias() string { return r.refPilihanMinatManDo.Alias() }

func (r refPilihanMinatMan) Columns(cols ...field.Expr) gen.Columns {
	return r.refPilihanMinatManDo.Columns(cols...)
}

func (r *refPilihanMinatMan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refPilihanMinatMan) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["kd_pilihan"] = r.KdPilihan
	r.fieldMap["nama_pilihan"] = r.NamaPilihan
	r.fieldMap["field_skoring"] = r.FieldSkoring
	r.fieldMap["keterangan"] = r.Keterangan
}

func (r refPilihanMinatMan) clone(db *gorm.DB) refPilihanMinatMan {
	r.refPilihanMinatManDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refPilihanMinatMan) replaceDB(db *gorm.DB) refPilihanMinatMan {
	r.refPilihanMinatManDo.ReplaceDB(db)
	return r
}

type refPilihanMinatManDo struct{ gen.DO }

func (r refPilihanMinatManDo) Debug() *refPilihanMinatManDo {
	return r.withDO(r.DO.Debug())
}

func (r refPilihanMinatManDo) WithContext(ctx context.Context) *refPilihanMinatManDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refPilihanMinatManDo) ReadDB() *refPilihanMinatManDo {
	return r.Clauses(dbresolver.Read)
}

func (r refPilihanMinatManDo) WriteDB() *refPilihanMinatManDo {
	return r.Clauses(dbresolver.Write)
}

func (r refPilihanMinatManDo) Session(config *gorm.Session) *refPilihanMinatManDo {
	return r.withDO(r.DO.Session(config))
}

func (r refPilihanMinatManDo) Clauses(conds ...clause.Expression) *refPilihanMinatManDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refPilihanMinatManDo) Returning(value interface{}, columns ...string) *refPilihanMinatManDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refPilihanMinatManDo) Not(conds ...gen.Condition) *refPilihanMinatManDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refPilihanMinatManDo) Or(conds ...gen.Condition) *refPilihanMinatManDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refPilihanMinatManDo) Select(conds ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refPilihanMinatManDo) Where(conds ...gen.Condition) *refPilihanMinatManDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refPilihanMinatManDo) Order(conds ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refPilihanMinatManDo) Distinct(cols ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refPilihanMinatManDo) Omit(cols ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refPilihanMinatManDo) Join(table schema.Tabler, on ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refPilihanMinatManDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refPilihanMinatManDo) RightJoin(table schema.Tabler, on ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refPilihanMinatManDo) Group(cols ...field.Expr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refPilihanMinatManDo) Having(conds ...gen.Condition) *refPilihanMinatManDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refPilihanMinatManDo) Limit(limit int) *refPilihanMinatManDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refPilihanMinatManDo) Offset(offset int) *refPilihanMinatManDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refPilihanMinatManDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refPilihanMinatManDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refPilihanMinatManDo) Unscoped() *refPilihanMinatManDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refPilihanMinatManDo) Create(values ...*entity.RefPilihanMinatMan) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refPilihanMinatManDo) CreateInBatches(values []*entity.RefPilihanMinatMan, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refPilihanMinatManDo) Save(values ...*entity.RefPilihanMinatMan) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refPilihanMinatManDo) First() (*entity.RefPilihanMinatMan, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefPilihanMinatMan), nil
	}
}

func (r refPilihanMinatManDo) Take() (*entity.RefPilihanMinatMan, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefPilihanMinatMan), nil
	}
}

func (r refPilihanMinatManDo) Last() (*entity.RefPilihanMinatMan, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefPilihanMinatMan), nil
	}
}

func (r refPilihanMinatManDo) Find() ([]*entity.RefPilihanMinatMan, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefPilihanMinatMan), err
}

func (r refPilihanMinatManDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefPilihanMinatMan, err error) {
	buf := make([]*entity.RefPilihanMinatMan, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refPilihanMinatManDo) FindInBatches(result *[]*entity.RefPilihanMinatMan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refPilihanMinatManDo) Attrs(attrs ...field.AssignExpr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refPilihanMinatManDo) Assign(attrs ...field.AssignExpr) *refPilihanMinatManDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refPilihanMinatManDo) Joins(fields ...field.RelationField) *refPilihanMinatManDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refPilihanMinatManDo) Preload(fields ...field.RelationField) *refPilihanMinatManDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refPilihanMinatManDo) FirstOrInit() (*entity.RefPilihanMinatMan, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefPilihanMinatMan), nil
	}
}

func (r refPilihanMinatManDo) FirstOrCreate() (*entity.RefPilihanMinatMan, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefPilihanMinatMan), nil
	}
}

func (r refPilihanMinatManDo) FindByPage(offset int, limit int) (result []*entity.RefPilihanMinatMan, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refPilihanMinatManDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refPilihanMinatManDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refPilihanMinatManDo) Delete(models ...*entity.RefPilihanMinatMan) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refPilihanMinatManDo) withDO(do gen.Dao) *refPilihanMinatManDo {
	r.DO = *do.(*gen.DO)
	return r
}
