// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefSekolahDina(db *gorm.DB, opts ...gen.DOOption) refSekolahDina {
	_refSekolahDina := refSekolahDina{}

	_refSekolahDina.refSekolahDinaDo.UseDB(db, opts...)
	_refSekolahDina.refSekolahDinaDo.UseModel(&entity.RefSekolahDina{})

	tableName := _refSekolahDina.refSekolahDinaDo.TableName()
	_refSekolahDina.ALL = field.NewAsterisk(tableName)
	_refSekolahDina.No = field.NewString(tableName, "no")
	_refSekolahDina.NamaSekolahDinas = field.NewString(tableName, "nama_sekolah_dinas")
	_refSekolahDina.Akronim = field.NewString(tableName, "akronim")
	_refSekolahDina.IDKelompok = field.NewInt16(tableName, "id_kelompok")
	_refSekolahDina.IDKelas = field.NewInt16(tableName, "id_kelas")
	_refSekolahDina.Icon = field.NewString(tableName, "icon")

	_refSekolahDina.fillFieldMap()

	return _refSekolahDina
}

type refSekolahDina struct {
	refSekolahDinaDo refSekolahDinaDo

	ALL              field.Asterisk
	No               field.String
	NamaSekolahDinas field.String
	Akronim          field.String
	IDKelompok       field.Int16 // SKORING PSIKOTES LENGKAP
	IDKelas          field.Int16 // SKORING MINAT SMA V2
	Icon             field.String

	fieldMap map[string]field.Expr
}

func (r refSekolahDina) Table(newTableName string) *refSekolahDina {
	r.refSekolahDinaDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refSekolahDina) As(alias string) *refSekolahDina {
	r.refSekolahDinaDo.DO = *(r.refSekolahDinaDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refSekolahDina) updateTableName(table string) *refSekolahDina {
	r.ALL = field.NewAsterisk(table)
	r.No = field.NewString(table, "no")
	r.NamaSekolahDinas = field.NewString(table, "nama_sekolah_dinas")
	r.Akronim = field.NewString(table, "akronim")
	r.IDKelompok = field.NewInt16(table, "id_kelompok")
	r.IDKelas = field.NewInt16(table, "id_kelas")
	r.Icon = field.NewString(table, "icon")

	r.fillFieldMap()

	return r
}

func (r *refSekolahDina) WithContext(ctx context.Context) *refSekolahDinaDo {
	return r.refSekolahDinaDo.WithContext(ctx)
}

func (r refSekolahDina) TableName() string { return r.refSekolahDinaDo.TableName() }

func (r refSekolahDina) Alias() string { return r.refSekolahDinaDo.Alias() }

func (r refSekolahDina) Columns(cols ...field.Expr) gen.Columns {
	return r.refSekolahDinaDo.Columns(cols...)
}

func (r *refSekolahDina) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refSekolahDina) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["no"] = r.No
	r.fieldMap["nama_sekolah_dinas"] = r.NamaSekolahDinas
	r.fieldMap["akronim"] = r.Akronim
	r.fieldMap["id_kelompok"] = r.IDKelompok
	r.fieldMap["id_kelas"] = r.IDKelas
	r.fieldMap["icon"] = r.Icon
}

func (r refSekolahDina) clone(db *gorm.DB) refSekolahDina {
	r.refSekolahDinaDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refSekolahDina) replaceDB(db *gorm.DB) refSekolahDina {
	r.refSekolahDinaDo.ReplaceDB(db)
	return r
}

type refSekolahDinaDo struct{ gen.DO }

func (r refSekolahDinaDo) Debug() *refSekolahDinaDo {
	return r.withDO(r.DO.Debug())
}

func (r refSekolahDinaDo) WithContext(ctx context.Context) *refSekolahDinaDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refSekolahDinaDo) ReadDB() *refSekolahDinaDo {
	return r.Clauses(dbresolver.Read)
}

func (r refSekolahDinaDo) WriteDB() *refSekolahDinaDo {
	return r.Clauses(dbresolver.Write)
}

func (r refSekolahDinaDo) Session(config *gorm.Session) *refSekolahDinaDo {
	return r.withDO(r.DO.Session(config))
}

func (r refSekolahDinaDo) Clauses(conds ...clause.Expression) *refSekolahDinaDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refSekolahDinaDo) Returning(value interface{}, columns ...string) *refSekolahDinaDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refSekolahDinaDo) Not(conds ...gen.Condition) *refSekolahDinaDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refSekolahDinaDo) Or(conds ...gen.Condition) *refSekolahDinaDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refSekolahDinaDo) Select(conds ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refSekolahDinaDo) Where(conds ...gen.Condition) *refSekolahDinaDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refSekolahDinaDo) Order(conds ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refSekolahDinaDo) Distinct(cols ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refSekolahDinaDo) Omit(cols ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refSekolahDinaDo) Join(table schema.Tabler, on ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refSekolahDinaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refSekolahDinaDo) RightJoin(table schema.Tabler, on ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refSekolahDinaDo) Group(cols ...field.Expr) *refSekolahDinaDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refSekolahDinaDo) Having(conds ...gen.Condition) *refSekolahDinaDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refSekolahDinaDo) Limit(limit int) *refSekolahDinaDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refSekolahDinaDo) Offset(offset int) *refSekolahDinaDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refSekolahDinaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refSekolahDinaDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refSekolahDinaDo) Unscoped() *refSekolahDinaDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refSekolahDinaDo) Create(values ...*entity.RefSekolahDina) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refSekolahDinaDo) CreateInBatches(values []*entity.RefSekolahDina, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refSekolahDinaDo) Save(values ...*entity.RefSekolahDina) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refSekolahDinaDo) First() (*entity.RefSekolahDina, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSekolahDina), nil
	}
}

func (r refSekolahDinaDo) Take() (*entity.RefSekolahDina, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSekolahDina), nil
	}
}

func (r refSekolahDinaDo) Last() (*entity.RefSekolahDina, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSekolahDina), nil
	}
}

func (r refSekolahDinaDo) Find() ([]*entity.RefSekolahDina, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefSekolahDina), err
}

func (r refSekolahDinaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefSekolahDina, err error) {
	buf := make([]*entity.RefSekolahDina, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refSekolahDinaDo) FindInBatches(result *[]*entity.RefSekolahDina, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refSekolahDinaDo) Attrs(attrs ...field.AssignExpr) *refSekolahDinaDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refSekolahDinaDo) Assign(attrs ...field.AssignExpr) *refSekolahDinaDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refSekolahDinaDo) Joins(fields ...field.RelationField) *refSekolahDinaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refSekolahDinaDo) Preload(fields ...field.RelationField) *refSekolahDinaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refSekolahDinaDo) FirstOrInit() (*entity.RefSekolahDina, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSekolahDina), nil
	}
}

func (r refSekolahDinaDo) FirstOrCreate() (*entity.RefSekolahDina, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSekolahDina), nil
	}
}

func (r refSekolahDinaDo) FindByPage(offset int, limit int) (result []*entity.RefSekolahDina, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refSekolahDinaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refSekolahDinaDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refSekolahDinaDo) Delete(models ...*entity.RefSekolahDina) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refSekolahDinaDo) withDO(do gen.Dao) *refSekolahDinaDo {
	r.DO = *do.(*gen.DO)
	return r
}
