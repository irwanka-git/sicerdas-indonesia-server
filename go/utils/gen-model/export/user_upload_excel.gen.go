// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newUserUploadExcel(db *gorm.DB, opts ...gen.DOOption) userUploadExcel {
	_userUploadExcel := userUploadExcel{}

	_userUploadExcel.userUploadExcelDo.UseDB(db, opts...)
	_userUploadExcel.userUploadExcelDo.UseModel(&entity.UserUploadExcel{})

	tableName := _userUploadExcel.userUploadExcelDo.TableName()
	_userUploadExcel.ALL = field.NewAsterisk(tableName)
	_userUploadExcel.IDUserUpload = field.NewInt32(tableName, "id_user_upload")
	_userUploadExcel.Token = field.NewString(tableName, "token")
	_userUploadExcel.Username = field.NewString(tableName, "username")
	_userUploadExcel.NamaPengguna = field.NewString(tableName, "nama_pengguna")
	_userUploadExcel.JenisKelamin = field.NewString(tableName, "jenis_kelamin")
	_userUploadExcel.Organisasi = field.NewString(tableName, "organisasi")
	_userUploadExcel.UnitOrganisasi = field.NewString(tableName, "unit_organisasi")
	_userUploadExcel.Password = field.NewString(tableName, "password")
	_userUploadExcel.Email = field.NewString(tableName, "email")
	_userUploadExcel.Telp = field.NewString(tableName, "telp")
	_userUploadExcel.Valid = field.NewInt32(tableName, "valid")

	_userUploadExcel.fillFieldMap()

	return _userUploadExcel
}

type userUploadExcel struct {
	userUploadExcelDo userUploadExcelDo

	ALL            field.Asterisk
	IDUserUpload   field.Int32
	Token          field.String
	Username       field.String
	NamaPengguna   field.String
	JenisKelamin   field.String
	Organisasi     field.String
	UnitOrganisasi field.String
	Password       field.String
	Email          field.String
	Telp           field.String
	Valid          field.Int32

	fieldMap map[string]field.Expr
}

func (u userUploadExcel) Table(newTableName string) *userUploadExcel {
	u.userUploadExcelDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userUploadExcel) As(alias string) *userUploadExcel {
	u.userUploadExcelDo.DO = *(u.userUploadExcelDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userUploadExcel) updateTableName(table string) *userUploadExcel {
	u.ALL = field.NewAsterisk(table)
	u.IDUserUpload = field.NewInt32(table, "id_user_upload")
	u.Token = field.NewString(table, "token")
	u.Username = field.NewString(table, "username")
	u.NamaPengguna = field.NewString(table, "nama_pengguna")
	u.JenisKelamin = field.NewString(table, "jenis_kelamin")
	u.Organisasi = field.NewString(table, "organisasi")
	u.UnitOrganisasi = field.NewString(table, "unit_organisasi")
	u.Password = field.NewString(table, "password")
	u.Email = field.NewString(table, "email")
	u.Telp = field.NewString(table, "telp")
	u.Valid = field.NewInt32(table, "valid")

	u.fillFieldMap()

	return u
}

func (u *userUploadExcel) WithContext(ctx context.Context) *userUploadExcelDo {
	return u.userUploadExcelDo.WithContext(ctx)
}

func (u userUploadExcel) TableName() string { return u.userUploadExcelDo.TableName() }

func (u userUploadExcel) Alias() string { return u.userUploadExcelDo.Alias() }

func (u userUploadExcel) Columns(cols ...field.Expr) gen.Columns {
	return u.userUploadExcelDo.Columns(cols...)
}

func (u *userUploadExcel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userUploadExcel) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id_user_upload"] = u.IDUserUpload
	u.fieldMap["token"] = u.Token
	u.fieldMap["username"] = u.Username
	u.fieldMap["nama_pengguna"] = u.NamaPengguna
	u.fieldMap["jenis_kelamin"] = u.JenisKelamin
	u.fieldMap["organisasi"] = u.Organisasi
	u.fieldMap["unit_organisasi"] = u.UnitOrganisasi
	u.fieldMap["password"] = u.Password
	u.fieldMap["email"] = u.Email
	u.fieldMap["telp"] = u.Telp
	u.fieldMap["valid"] = u.Valid
}

func (u userUploadExcel) clone(db *gorm.DB) userUploadExcel {
	u.userUploadExcelDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userUploadExcel) replaceDB(db *gorm.DB) userUploadExcel {
	u.userUploadExcelDo.ReplaceDB(db)
	return u
}

type userUploadExcelDo struct{ gen.DO }

func (u userUploadExcelDo) Debug() *userUploadExcelDo {
	return u.withDO(u.DO.Debug())
}

func (u userUploadExcelDo) WithContext(ctx context.Context) *userUploadExcelDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userUploadExcelDo) ReadDB() *userUploadExcelDo {
	return u.Clauses(dbresolver.Read)
}

func (u userUploadExcelDo) WriteDB() *userUploadExcelDo {
	return u.Clauses(dbresolver.Write)
}

func (u userUploadExcelDo) Session(config *gorm.Session) *userUploadExcelDo {
	return u.withDO(u.DO.Session(config))
}

func (u userUploadExcelDo) Clauses(conds ...clause.Expression) *userUploadExcelDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userUploadExcelDo) Returning(value interface{}, columns ...string) *userUploadExcelDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userUploadExcelDo) Not(conds ...gen.Condition) *userUploadExcelDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userUploadExcelDo) Or(conds ...gen.Condition) *userUploadExcelDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userUploadExcelDo) Select(conds ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userUploadExcelDo) Where(conds ...gen.Condition) *userUploadExcelDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userUploadExcelDo) Order(conds ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userUploadExcelDo) Distinct(cols ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userUploadExcelDo) Omit(cols ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userUploadExcelDo) Join(table schema.Tabler, on ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userUploadExcelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userUploadExcelDo) RightJoin(table schema.Tabler, on ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userUploadExcelDo) Group(cols ...field.Expr) *userUploadExcelDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userUploadExcelDo) Having(conds ...gen.Condition) *userUploadExcelDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userUploadExcelDo) Limit(limit int) *userUploadExcelDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userUploadExcelDo) Offset(offset int) *userUploadExcelDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userUploadExcelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userUploadExcelDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userUploadExcelDo) Unscoped() *userUploadExcelDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userUploadExcelDo) Create(values ...*entity.UserUploadExcel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userUploadExcelDo) CreateInBatches(values []*entity.UserUploadExcel, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userUploadExcelDo) Save(values ...*entity.UserUploadExcel) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userUploadExcelDo) First() (*entity.UserUploadExcel, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserUploadExcel), nil
	}
}

func (u userUploadExcelDo) Take() (*entity.UserUploadExcel, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserUploadExcel), nil
	}
}

func (u userUploadExcelDo) Last() (*entity.UserUploadExcel, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserUploadExcel), nil
	}
}

func (u userUploadExcelDo) Find() ([]*entity.UserUploadExcel, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserUploadExcel), err
}

func (u userUploadExcelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserUploadExcel, err error) {
	buf := make([]*entity.UserUploadExcel, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userUploadExcelDo) FindInBatches(result *[]*entity.UserUploadExcel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userUploadExcelDo) Attrs(attrs ...field.AssignExpr) *userUploadExcelDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userUploadExcelDo) Assign(attrs ...field.AssignExpr) *userUploadExcelDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userUploadExcelDo) Joins(fields ...field.RelationField) *userUploadExcelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userUploadExcelDo) Preload(fields ...field.RelationField) *userUploadExcelDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userUploadExcelDo) FirstOrInit() (*entity.UserUploadExcel, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserUploadExcel), nil
	}
}

func (u userUploadExcelDo) FirstOrCreate() (*entity.UserUploadExcel, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserUploadExcel), nil
	}
}

func (u userUploadExcelDo) FindByPage(offset int, limit int) (result []*entity.UserUploadExcel, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userUploadExcelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userUploadExcelDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userUploadExcelDo) Delete(models ...*entity.UserUploadExcel) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userUploadExcelDo) withDO(do gen.Dao) *userUploadExcelDo {
	u.DO = *do.(*gen.DO)
	return u
}
