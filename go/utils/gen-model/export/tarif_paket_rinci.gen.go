// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newTarifPaketRinci(db *gorm.DB, opts ...gen.DOOption) tarifPaketRinci {
	_tarifPaketRinci := tarifPaketRinci{}

	_tarifPaketRinci.tarifPaketRinciDo.UseDB(db, opts...)
	_tarifPaketRinci.tarifPaketRinciDo.UseModel(&entity.TarifPaketRinci{})

	tableName := _tarifPaketRinci.tarifPaketRinciDo.TableName()
	_tarifPaketRinci.ALL = field.NewAsterisk(tableName)
	_tarifPaketRinci.IDTarifRinci = field.NewInt32(tableName, "id_tarif_rinci")
	_tarifPaketRinci.IDTarif = field.NewInt64(tableName, "id_tarif")
	_tarifPaketRinci.NamaRincian = field.NewString(tableName, "nama_rincian")
	_tarifPaketRinci.Urutan = field.NewInt32(tableName, "urutan")
	_tarifPaketRinci.UUID = field.NewString(tableName, "uuid")

	_tarifPaketRinci.fillFieldMap()

	return _tarifPaketRinci
}

type tarifPaketRinci struct {
	tarifPaketRinciDo tarifPaketRinciDo

	ALL          field.Asterisk
	IDTarifRinci field.Int32
	IDTarif      field.Int64
	NamaRincian  field.String
	Urutan       field.Int32
	UUID         field.String

	fieldMap map[string]field.Expr
}

func (t tarifPaketRinci) Table(newTableName string) *tarifPaketRinci {
	t.tarifPaketRinciDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tarifPaketRinci) As(alias string) *tarifPaketRinci {
	t.tarifPaketRinciDo.DO = *(t.tarifPaketRinciDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tarifPaketRinci) updateTableName(table string) *tarifPaketRinci {
	t.ALL = field.NewAsterisk(table)
	t.IDTarifRinci = field.NewInt32(table, "id_tarif_rinci")
	t.IDTarif = field.NewInt64(table, "id_tarif")
	t.NamaRincian = field.NewString(table, "nama_rincian")
	t.Urutan = field.NewInt32(table, "urutan")
	t.UUID = field.NewString(table, "uuid")

	t.fillFieldMap()

	return t
}

func (t *tarifPaketRinci) WithContext(ctx context.Context) *tarifPaketRinciDo {
	return t.tarifPaketRinciDo.WithContext(ctx)
}

func (t tarifPaketRinci) TableName() string { return t.tarifPaketRinciDo.TableName() }

func (t tarifPaketRinci) Alias() string { return t.tarifPaketRinciDo.Alias() }

func (t tarifPaketRinci) Columns(cols ...field.Expr) gen.Columns {
	return t.tarifPaketRinciDo.Columns(cols...)
}

func (t *tarifPaketRinci) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tarifPaketRinci) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id_tarif_rinci"] = t.IDTarifRinci
	t.fieldMap["id_tarif"] = t.IDTarif
	t.fieldMap["nama_rincian"] = t.NamaRincian
	t.fieldMap["urutan"] = t.Urutan
	t.fieldMap["uuid"] = t.UUID
}

func (t tarifPaketRinci) clone(db *gorm.DB) tarifPaketRinci {
	t.tarifPaketRinciDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tarifPaketRinci) replaceDB(db *gorm.DB) tarifPaketRinci {
	t.tarifPaketRinciDo.ReplaceDB(db)
	return t
}

type tarifPaketRinciDo struct{ gen.DO }

func (t tarifPaketRinciDo) Debug() *tarifPaketRinciDo {
	return t.withDO(t.DO.Debug())
}

func (t tarifPaketRinciDo) WithContext(ctx context.Context) *tarifPaketRinciDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tarifPaketRinciDo) ReadDB() *tarifPaketRinciDo {
	return t.Clauses(dbresolver.Read)
}

func (t tarifPaketRinciDo) WriteDB() *tarifPaketRinciDo {
	return t.Clauses(dbresolver.Write)
}

func (t tarifPaketRinciDo) Session(config *gorm.Session) *tarifPaketRinciDo {
	return t.withDO(t.DO.Session(config))
}

func (t tarifPaketRinciDo) Clauses(conds ...clause.Expression) *tarifPaketRinciDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tarifPaketRinciDo) Returning(value interface{}, columns ...string) *tarifPaketRinciDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tarifPaketRinciDo) Not(conds ...gen.Condition) *tarifPaketRinciDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tarifPaketRinciDo) Or(conds ...gen.Condition) *tarifPaketRinciDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tarifPaketRinciDo) Select(conds ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tarifPaketRinciDo) Where(conds ...gen.Condition) *tarifPaketRinciDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tarifPaketRinciDo) Order(conds ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tarifPaketRinciDo) Distinct(cols ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tarifPaketRinciDo) Omit(cols ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tarifPaketRinciDo) Join(table schema.Tabler, on ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tarifPaketRinciDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tarifPaketRinciDo) RightJoin(table schema.Tabler, on ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tarifPaketRinciDo) Group(cols ...field.Expr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tarifPaketRinciDo) Having(conds ...gen.Condition) *tarifPaketRinciDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tarifPaketRinciDo) Limit(limit int) *tarifPaketRinciDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tarifPaketRinciDo) Offset(offset int) *tarifPaketRinciDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tarifPaketRinciDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tarifPaketRinciDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tarifPaketRinciDo) Unscoped() *tarifPaketRinciDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tarifPaketRinciDo) Create(values ...*entity.TarifPaketRinci) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tarifPaketRinciDo) CreateInBatches(values []*entity.TarifPaketRinci, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tarifPaketRinciDo) Save(values ...*entity.TarifPaketRinci) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tarifPaketRinciDo) First() (*entity.TarifPaketRinci, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaketRinci), nil
	}
}

func (t tarifPaketRinciDo) Take() (*entity.TarifPaketRinci, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaketRinci), nil
	}
}

func (t tarifPaketRinciDo) Last() (*entity.TarifPaketRinci, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaketRinci), nil
	}
}

func (t tarifPaketRinciDo) Find() ([]*entity.TarifPaketRinci, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TarifPaketRinci), err
}

func (t tarifPaketRinciDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TarifPaketRinci, err error) {
	buf := make([]*entity.TarifPaketRinci, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tarifPaketRinciDo) FindInBatches(result *[]*entity.TarifPaketRinci, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tarifPaketRinciDo) Attrs(attrs ...field.AssignExpr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tarifPaketRinciDo) Assign(attrs ...field.AssignExpr) *tarifPaketRinciDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tarifPaketRinciDo) Joins(fields ...field.RelationField) *tarifPaketRinciDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tarifPaketRinciDo) Preload(fields ...field.RelationField) *tarifPaketRinciDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tarifPaketRinciDo) FirstOrInit() (*entity.TarifPaketRinci, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaketRinci), nil
	}
}

func (t tarifPaketRinciDo) FirstOrCreate() (*entity.TarifPaketRinci, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaketRinci), nil
	}
}

func (t tarifPaketRinciDo) FindByPage(offset int, limit int) (result []*entity.TarifPaketRinci, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tarifPaketRinciDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tarifPaketRinciDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tarifPaketRinciDo) Delete(models ...*entity.TarifPaketRinci) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tarifPaketRinciDo) withDO(do gen.Dao) *tarifPaketRinciDo {
	t.DO = *do.(*gen.DO)
	return t
}
