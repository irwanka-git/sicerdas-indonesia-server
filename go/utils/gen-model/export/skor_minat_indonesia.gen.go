// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorMinatIndonesium(db *gorm.DB, opts ...gen.DOOption) skorMinatIndonesium {
	_skorMinatIndonesium := skorMinatIndonesium{}

	_skorMinatIndonesium.skorMinatIndonesiumDo.UseDB(db, opts...)
	_skorMinatIndonesium.skorMinatIndonesiumDo.UseModel(&entity.SkorMinatIndonesium{})

	tableName := _skorMinatIndonesium.skorMinatIndonesiumDo.TableName()
	_skorMinatIndonesium.ALL = field.NewAsterisk(tableName)
	_skorMinatIndonesium.IDUser = field.NewInt32(tableName, "id_user")
	_skorMinatIndonesium.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorMinatIndonesium.TmiIlmuAlam = field.NewInt32(tableName, "tmi_ilmu_alam")
	_skorMinatIndonesium.TmiIlmuSosial = field.NewInt32(tableName, "tmi_ilmu_sosial")
	_skorMinatIndonesium.TmiRentang = field.NewInt32(tableName, "tmi_rentang")
	_skorMinatIndonesium.RekomTmi = field.NewString(tableName, "rekom_tmi")
	_skorMinatIndonesium.Minat1 = field.NewInt32(tableName, "minat1")
	_skorMinatIndonesium.Minat2 = field.NewInt32(tableName, "minat2")
	_skorMinatIndonesium.Minat3 = field.NewInt32(tableName, "minat3")
	_skorMinatIndonesium.Minat4 = field.NewInt32(tableName, "minat4")
	_skorMinatIndonesium.Minat5 = field.NewInt32(tableName, "minat5")
	_skorMinatIndonesium.Minat6 = field.NewInt32(tableName, "minat6")
	_skorMinatIndonesium.Minat7 = field.NewInt32(tableName, "minat7")

	_skorMinatIndonesium.fillFieldMap()

	return _skorMinatIndonesium
}

type skorMinatIndonesium struct {
	skorMinatIndonesiumDo skorMinatIndonesiumDo

	ALL           field.Asterisk
	IDUser        field.Int32
	IDQuiz        field.Int32
	TmiIlmuAlam   field.Int32
	TmiIlmuSosial field.Int32
	TmiRentang    field.Int32
	RekomTmi      field.String
	Minat1        field.Int32
	Minat2        field.Int32
	Minat3        field.Int32
	Minat4        field.Int32
	Minat5        field.Int32
	Minat6        field.Int32
	Minat7        field.Int32

	fieldMap map[string]field.Expr
}

func (s skorMinatIndonesium) Table(newTableName string) *skorMinatIndonesium {
	s.skorMinatIndonesiumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorMinatIndonesium) As(alias string) *skorMinatIndonesium {
	s.skorMinatIndonesiumDo.DO = *(s.skorMinatIndonesiumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorMinatIndonesium) updateTableName(table string) *skorMinatIndonesium {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TmiIlmuAlam = field.NewInt32(table, "tmi_ilmu_alam")
	s.TmiIlmuSosial = field.NewInt32(table, "tmi_ilmu_sosial")
	s.TmiRentang = field.NewInt32(table, "tmi_rentang")
	s.RekomTmi = field.NewString(table, "rekom_tmi")
	s.Minat1 = field.NewInt32(table, "minat1")
	s.Minat2 = field.NewInt32(table, "minat2")
	s.Minat3 = field.NewInt32(table, "minat3")
	s.Minat4 = field.NewInt32(table, "minat4")
	s.Minat5 = field.NewInt32(table, "minat5")
	s.Minat6 = field.NewInt32(table, "minat6")
	s.Minat7 = field.NewInt32(table, "minat7")

	s.fillFieldMap()

	return s
}

func (s *skorMinatIndonesium) WithContext(ctx context.Context) *skorMinatIndonesiumDo {
	return s.skorMinatIndonesiumDo.WithContext(ctx)
}

func (s skorMinatIndonesium) TableName() string { return s.skorMinatIndonesiumDo.TableName() }

func (s skorMinatIndonesium) Alias() string { return s.skorMinatIndonesiumDo.Alias() }

func (s skorMinatIndonesium) Columns(cols ...field.Expr) gen.Columns {
	return s.skorMinatIndonesiumDo.Columns(cols...)
}

func (s *skorMinatIndonesium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorMinatIndonesium) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tmi_ilmu_alam"] = s.TmiIlmuAlam
	s.fieldMap["tmi_ilmu_sosial"] = s.TmiIlmuSosial
	s.fieldMap["tmi_rentang"] = s.TmiRentang
	s.fieldMap["rekom_tmi"] = s.RekomTmi
	s.fieldMap["minat1"] = s.Minat1
	s.fieldMap["minat2"] = s.Minat2
	s.fieldMap["minat3"] = s.Minat3
	s.fieldMap["minat4"] = s.Minat4
	s.fieldMap["minat5"] = s.Minat5
	s.fieldMap["minat6"] = s.Minat6
	s.fieldMap["minat7"] = s.Minat7
}

func (s skorMinatIndonesium) clone(db *gorm.DB) skorMinatIndonesium {
	s.skorMinatIndonesiumDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorMinatIndonesium) replaceDB(db *gorm.DB) skorMinatIndonesium {
	s.skorMinatIndonesiumDo.ReplaceDB(db)
	return s
}

type skorMinatIndonesiumDo struct{ gen.DO }

func (s skorMinatIndonesiumDo) Debug() *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Debug())
}

func (s skorMinatIndonesiumDo) WithContext(ctx context.Context) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorMinatIndonesiumDo) ReadDB() *skorMinatIndonesiumDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorMinatIndonesiumDo) WriteDB() *skorMinatIndonesiumDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorMinatIndonesiumDo) Session(config *gorm.Session) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorMinatIndonesiumDo) Clauses(conds ...clause.Expression) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorMinatIndonesiumDo) Returning(value interface{}, columns ...string) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorMinatIndonesiumDo) Not(conds ...gen.Condition) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorMinatIndonesiumDo) Or(conds ...gen.Condition) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorMinatIndonesiumDo) Select(conds ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorMinatIndonesiumDo) Where(conds ...gen.Condition) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorMinatIndonesiumDo) Order(conds ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorMinatIndonesiumDo) Distinct(cols ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorMinatIndonesiumDo) Omit(cols ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorMinatIndonesiumDo) Join(table schema.Tabler, on ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorMinatIndonesiumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorMinatIndonesiumDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorMinatIndonesiumDo) Group(cols ...field.Expr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorMinatIndonesiumDo) Having(conds ...gen.Condition) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorMinatIndonesiumDo) Limit(limit int) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorMinatIndonesiumDo) Offset(offset int) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorMinatIndonesiumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorMinatIndonesiumDo) Unscoped() *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorMinatIndonesiumDo) Create(values ...*entity.SkorMinatIndonesium) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorMinatIndonesiumDo) CreateInBatches(values []*entity.SkorMinatIndonesium, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorMinatIndonesiumDo) Save(values ...*entity.SkorMinatIndonesium) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorMinatIndonesiumDo) First() (*entity.SkorMinatIndonesium, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMinatIndonesium), nil
	}
}

func (s skorMinatIndonesiumDo) Take() (*entity.SkorMinatIndonesium, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMinatIndonesium), nil
	}
}

func (s skorMinatIndonesiumDo) Last() (*entity.SkorMinatIndonesium, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMinatIndonesium), nil
	}
}

func (s skorMinatIndonesiumDo) Find() ([]*entity.SkorMinatIndonesium, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorMinatIndonesium), err
}

func (s skorMinatIndonesiumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorMinatIndonesium, err error) {
	buf := make([]*entity.SkorMinatIndonesium, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorMinatIndonesiumDo) FindInBatches(result *[]*entity.SkorMinatIndonesium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorMinatIndonesiumDo) Attrs(attrs ...field.AssignExpr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorMinatIndonesiumDo) Assign(attrs ...field.AssignExpr) *skorMinatIndonesiumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorMinatIndonesiumDo) Joins(fields ...field.RelationField) *skorMinatIndonesiumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorMinatIndonesiumDo) Preload(fields ...field.RelationField) *skorMinatIndonesiumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorMinatIndonesiumDo) FirstOrInit() (*entity.SkorMinatIndonesium, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMinatIndonesium), nil
	}
}

func (s skorMinatIndonesiumDo) FirstOrCreate() (*entity.SkorMinatIndonesium, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorMinatIndonesium), nil
	}
}

func (s skorMinatIndonesiumDo) FindByPage(offset int, limit int) (result []*entity.SkorMinatIndonesium, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorMinatIndonesiumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorMinatIndonesiumDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorMinatIndonesiumDo) Delete(models ...*entity.SkorMinatIndonesium) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorMinatIndonesiumDo) withDO(do gen.Dao) *skorMinatIndonesiumDo {
	s.DO = *do.(*gen.DO)
	return s
}
