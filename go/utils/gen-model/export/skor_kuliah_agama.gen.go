// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorKuliahAgama(db *gorm.DB, opts ...gen.DOOption) skorKuliahAgama {
	_skorKuliahAgama := skorKuliahAgama{}

	_skorKuliahAgama.skorKuliahAgamaDo.UseDB(db, opts...)
	_skorKuliahAgama.skorKuliahAgamaDo.UseModel(&entity.SkorKuliahAgama{})

	tableName := _skorKuliahAgama.skorKuliahAgamaDo.TableName()
	_skorKuliahAgama.ALL = field.NewAsterisk(tableName)
	_skorKuliahAgama.IDUser = field.NewInt32(tableName, "id_user")
	_skorKuliahAgama.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorKuliahAgama.MinatAgm1 = field.NewInt32(tableName, "minat_agm1")
	_skorKuliahAgama.MinatAgm2 = field.NewInt32(tableName, "minat_agm2")
	_skorKuliahAgama.MinatAgm3 = field.NewInt32(tableName, "minat_agm3")
	_skorKuliahAgama.MinatAgm4 = field.NewInt32(tableName, "minat_agm4")
	_skorKuliahAgama.MinatAgm5 = field.NewInt32(tableName, "minat_agm5")

	_skorKuliahAgama.fillFieldMap()

	return _skorKuliahAgama
}

type skorKuliahAgama struct {
	skorKuliahAgamaDo skorKuliahAgamaDo

	ALL       field.Asterisk
	IDUser    field.Int32
	IDQuiz    field.Int32
	MinatAgm1 field.Int32
	MinatAgm2 field.Int32
	MinatAgm3 field.Int32
	MinatAgm4 field.Int32
	MinatAgm5 field.Int32

	fieldMap map[string]field.Expr
}

func (s skorKuliahAgama) Table(newTableName string) *skorKuliahAgama {
	s.skorKuliahAgamaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorKuliahAgama) As(alias string) *skorKuliahAgama {
	s.skorKuliahAgamaDo.DO = *(s.skorKuliahAgamaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorKuliahAgama) updateTableName(table string) *skorKuliahAgama {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.MinatAgm1 = field.NewInt32(table, "minat_agm1")
	s.MinatAgm2 = field.NewInt32(table, "minat_agm2")
	s.MinatAgm3 = field.NewInt32(table, "minat_agm3")
	s.MinatAgm4 = field.NewInt32(table, "minat_agm4")
	s.MinatAgm5 = field.NewInt32(table, "minat_agm5")

	s.fillFieldMap()

	return s
}

func (s *skorKuliahAgama) WithContext(ctx context.Context) *skorKuliahAgamaDo {
	return s.skorKuliahAgamaDo.WithContext(ctx)
}

func (s skorKuliahAgama) TableName() string { return s.skorKuliahAgamaDo.TableName() }

func (s skorKuliahAgama) Alias() string { return s.skorKuliahAgamaDo.Alias() }

func (s skorKuliahAgama) Columns(cols ...field.Expr) gen.Columns {
	return s.skorKuliahAgamaDo.Columns(cols...)
}

func (s *skorKuliahAgama) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorKuliahAgama) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["minat_agm1"] = s.MinatAgm1
	s.fieldMap["minat_agm2"] = s.MinatAgm2
	s.fieldMap["minat_agm3"] = s.MinatAgm3
	s.fieldMap["minat_agm4"] = s.MinatAgm4
	s.fieldMap["minat_agm5"] = s.MinatAgm5
}

func (s skorKuliahAgama) clone(db *gorm.DB) skorKuliahAgama {
	s.skorKuliahAgamaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorKuliahAgama) replaceDB(db *gorm.DB) skorKuliahAgama {
	s.skorKuliahAgamaDo.ReplaceDB(db)
	return s
}

type skorKuliahAgamaDo struct{ gen.DO }

func (s skorKuliahAgamaDo) Debug() *skorKuliahAgamaDo {
	return s.withDO(s.DO.Debug())
}

func (s skorKuliahAgamaDo) WithContext(ctx context.Context) *skorKuliahAgamaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorKuliahAgamaDo) ReadDB() *skorKuliahAgamaDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorKuliahAgamaDo) WriteDB() *skorKuliahAgamaDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorKuliahAgamaDo) Session(config *gorm.Session) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorKuliahAgamaDo) Clauses(conds ...clause.Expression) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorKuliahAgamaDo) Returning(value interface{}, columns ...string) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorKuliahAgamaDo) Not(conds ...gen.Condition) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorKuliahAgamaDo) Or(conds ...gen.Condition) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorKuliahAgamaDo) Select(conds ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorKuliahAgamaDo) Where(conds ...gen.Condition) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorKuliahAgamaDo) Order(conds ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorKuliahAgamaDo) Distinct(cols ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorKuliahAgamaDo) Omit(cols ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorKuliahAgamaDo) Join(table schema.Tabler, on ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorKuliahAgamaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorKuliahAgamaDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorKuliahAgamaDo) Group(cols ...field.Expr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorKuliahAgamaDo) Having(conds ...gen.Condition) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorKuliahAgamaDo) Limit(limit int) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorKuliahAgamaDo) Offset(offset int) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorKuliahAgamaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorKuliahAgamaDo) Unscoped() *skorKuliahAgamaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorKuliahAgamaDo) Create(values ...*entity.SkorKuliahAgama) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorKuliahAgamaDo) CreateInBatches(values []*entity.SkorKuliahAgama, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorKuliahAgamaDo) Save(values ...*entity.SkorKuliahAgama) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorKuliahAgamaDo) First() (*entity.SkorKuliahAgama, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKuliahAgama), nil
	}
}

func (s skorKuliahAgamaDo) Take() (*entity.SkorKuliahAgama, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKuliahAgama), nil
	}
}

func (s skorKuliahAgamaDo) Last() (*entity.SkorKuliahAgama, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKuliahAgama), nil
	}
}

func (s skorKuliahAgamaDo) Find() ([]*entity.SkorKuliahAgama, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorKuliahAgama), err
}

func (s skorKuliahAgamaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorKuliahAgama, err error) {
	buf := make([]*entity.SkorKuliahAgama, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorKuliahAgamaDo) FindInBatches(result *[]*entity.SkorKuliahAgama, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorKuliahAgamaDo) Attrs(attrs ...field.AssignExpr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorKuliahAgamaDo) Assign(attrs ...field.AssignExpr) *skorKuliahAgamaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorKuliahAgamaDo) Joins(fields ...field.RelationField) *skorKuliahAgamaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorKuliahAgamaDo) Preload(fields ...field.RelationField) *skorKuliahAgamaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorKuliahAgamaDo) FirstOrInit() (*entity.SkorKuliahAgama, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKuliahAgama), nil
	}
}

func (s skorKuliahAgamaDo) FirstOrCreate() (*entity.SkorKuliahAgama, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKuliahAgama), nil
	}
}

func (s skorKuliahAgamaDo) FindByPage(offset int, limit int) (result []*entity.SkorKuliahAgama, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorKuliahAgamaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorKuliahAgamaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorKuliahAgamaDo) Delete(models ...*entity.SkorKuliahAgama) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorKuliahAgamaDo) withDO(do gen.Dao) *skorKuliahAgamaDo {
	s.DO = *do.(*gen.DO)
	return s
}
