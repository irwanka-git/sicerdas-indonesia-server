// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefSkoringKuliahDina(db *gorm.DB, opts ...gen.DOOption) refSkoringKuliahDina {
	_refSkoringKuliahDina := refSkoringKuliahDina{}

	_refSkoringKuliahDina.refSkoringKuliahDinaDo.UseDB(db, opts...)
	_refSkoringKuliahDina.refSkoringKuliahDinaDo.UseModel(&entity.RefSkoringKuliahDina{})

	tableName := _refSkoringKuliahDina.refSkoringKuliahDinaDo.TableName()
	_refSkoringKuliahDina.ALL = field.NewAsterisk(tableName)
	_refSkoringKuliahDina.IDSkoringSekolahDinas = field.NewInt32(tableName, "id_skoring_sekolah_dinas")
	_refSkoringKuliahDina.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_refSkoringKuliahDina.IDUser = field.NewInt32(tableName, "id_user")
	_refSkoringKuliahDina.No = field.NewString(tableName, "no")
	_refSkoringKuliahDina.B1 = field.NewInt32(tableName, "b1")
	_refSkoringKuliahDina.B2 = field.NewInt32(tableName, "b2")
	_refSkoringKuliahDina.B3 = field.NewInt32(tableName, "b3")
	_refSkoringKuliahDina.B4 = field.NewInt32(tableName, "b4")
	_refSkoringKuliahDina.B5 = field.NewInt32(tableName, "b5")
	_refSkoringKuliahDina.B6 = field.NewInt32(tableName, "b6")
	_refSkoringKuliahDina.B7 = field.NewInt32(tableName, "b7")
	_refSkoringKuliahDina.B8 = field.NewInt32(tableName, "b8")
	_refSkoringKuliahDina.B9 = field.NewInt32(tableName, "b9")
	_refSkoringKuliahDina.Total = field.NewInt32(tableName, "total")
	_refSkoringKuliahDina.Rangking = field.NewInt32(tableName, "rangking")

	_refSkoringKuliahDina.fillFieldMap()

	return _refSkoringKuliahDina
}

type refSkoringKuliahDina struct {
	refSkoringKuliahDinaDo refSkoringKuliahDinaDo

	ALL                   field.Asterisk
	IDSkoringSekolahDinas field.Int32
	IDQuiz                field.Int32  // ID_QUIZ
	IDUser                field.Int32  // ID_USER
	No                    field.String // NO SEKOLAH DINAS (ref_sekolah_dinas)
	B1                    field.Int32
	B2                    field.Int32
	B3                    field.Int32
	B4                    field.Int32
	B5                    field.Int32
	B6                    field.Int32
	B7                    field.Int32
	B8                    field.Int32
	B9                    field.Int32
	Total                 field.Int32
	Rangking              field.Int32

	fieldMap map[string]field.Expr
}

func (r refSkoringKuliahDina) Table(newTableName string) *refSkoringKuliahDina {
	r.refSkoringKuliahDinaDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refSkoringKuliahDina) As(alias string) *refSkoringKuliahDina {
	r.refSkoringKuliahDinaDo.DO = *(r.refSkoringKuliahDinaDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refSkoringKuliahDina) updateTableName(table string) *refSkoringKuliahDina {
	r.ALL = field.NewAsterisk(table)
	r.IDSkoringSekolahDinas = field.NewInt32(table, "id_skoring_sekolah_dinas")
	r.IDQuiz = field.NewInt32(table, "id_quiz")
	r.IDUser = field.NewInt32(table, "id_user")
	r.No = field.NewString(table, "no")
	r.B1 = field.NewInt32(table, "b1")
	r.B2 = field.NewInt32(table, "b2")
	r.B3 = field.NewInt32(table, "b3")
	r.B4 = field.NewInt32(table, "b4")
	r.B5 = field.NewInt32(table, "b5")
	r.B6 = field.NewInt32(table, "b6")
	r.B7 = field.NewInt32(table, "b7")
	r.B8 = field.NewInt32(table, "b8")
	r.B9 = field.NewInt32(table, "b9")
	r.Total = field.NewInt32(table, "total")
	r.Rangking = field.NewInt32(table, "rangking")

	r.fillFieldMap()

	return r
}

func (r *refSkoringKuliahDina) WithContext(ctx context.Context) *refSkoringKuliahDinaDo {
	return r.refSkoringKuliahDinaDo.WithContext(ctx)
}

func (r refSkoringKuliahDina) TableName() string { return r.refSkoringKuliahDinaDo.TableName() }

func (r refSkoringKuliahDina) Alias() string { return r.refSkoringKuliahDinaDo.Alias() }

func (r refSkoringKuliahDina) Columns(cols ...field.Expr) gen.Columns {
	return r.refSkoringKuliahDinaDo.Columns(cols...)
}

func (r *refSkoringKuliahDina) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refSkoringKuliahDina) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["id_skoring_sekolah_dinas"] = r.IDSkoringSekolahDinas
	r.fieldMap["id_quiz"] = r.IDQuiz
	r.fieldMap["id_user"] = r.IDUser
	r.fieldMap["no"] = r.No
	r.fieldMap["b1"] = r.B1
	r.fieldMap["b2"] = r.B2
	r.fieldMap["b3"] = r.B3
	r.fieldMap["b4"] = r.B4
	r.fieldMap["b5"] = r.B5
	r.fieldMap["b6"] = r.B6
	r.fieldMap["b7"] = r.B7
	r.fieldMap["b8"] = r.B8
	r.fieldMap["b9"] = r.B9
	r.fieldMap["total"] = r.Total
	r.fieldMap["rangking"] = r.Rangking
}

func (r refSkoringKuliahDina) clone(db *gorm.DB) refSkoringKuliahDina {
	r.refSkoringKuliahDinaDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refSkoringKuliahDina) replaceDB(db *gorm.DB) refSkoringKuliahDina {
	r.refSkoringKuliahDinaDo.ReplaceDB(db)
	return r
}

type refSkoringKuliahDinaDo struct{ gen.DO }

func (r refSkoringKuliahDinaDo) Debug() *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Debug())
}

func (r refSkoringKuliahDinaDo) WithContext(ctx context.Context) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refSkoringKuliahDinaDo) ReadDB() *refSkoringKuliahDinaDo {
	return r.Clauses(dbresolver.Read)
}

func (r refSkoringKuliahDinaDo) WriteDB() *refSkoringKuliahDinaDo {
	return r.Clauses(dbresolver.Write)
}

func (r refSkoringKuliahDinaDo) Session(config *gorm.Session) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Session(config))
}

func (r refSkoringKuliahDinaDo) Clauses(conds ...clause.Expression) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refSkoringKuliahDinaDo) Returning(value interface{}, columns ...string) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refSkoringKuliahDinaDo) Not(conds ...gen.Condition) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refSkoringKuliahDinaDo) Or(conds ...gen.Condition) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refSkoringKuliahDinaDo) Select(conds ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refSkoringKuliahDinaDo) Where(conds ...gen.Condition) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refSkoringKuliahDinaDo) Order(conds ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refSkoringKuliahDinaDo) Distinct(cols ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refSkoringKuliahDinaDo) Omit(cols ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refSkoringKuliahDinaDo) Join(table schema.Tabler, on ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refSkoringKuliahDinaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refSkoringKuliahDinaDo) RightJoin(table schema.Tabler, on ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refSkoringKuliahDinaDo) Group(cols ...field.Expr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refSkoringKuliahDinaDo) Having(conds ...gen.Condition) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refSkoringKuliahDinaDo) Limit(limit int) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refSkoringKuliahDinaDo) Offset(offset int) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refSkoringKuliahDinaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refSkoringKuliahDinaDo) Unscoped() *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refSkoringKuliahDinaDo) Create(values ...*entity.RefSkoringKuliahDina) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refSkoringKuliahDinaDo) CreateInBatches(values []*entity.RefSkoringKuliahDina, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refSkoringKuliahDinaDo) Save(values ...*entity.RefSkoringKuliahDina) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refSkoringKuliahDinaDo) First() (*entity.RefSkoringKuliahDina, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKuliahDina), nil
	}
}

func (r refSkoringKuliahDinaDo) Take() (*entity.RefSkoringKuliahDina, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKuliahDina), nil
	}
}

func (r refSkoringKuliahDinaDo) Last() (*entity.RefSkoringKuliahDina, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKuliahDina), nil
	}
}

func (r refSkoringKuliahDinaDo) Find() ([]*entity.RefSkoringKuliahDina, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefSkoringKuliahDina), err
}

func (r refSkoringKuliahDinaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefSkoringKuliahDina, err error) {
	buf := make([]*entity.RefSkoringKuliahDina, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refSkoringKuliahDinaDo) FindInBatches(result *[]*entity.RefSkoringKuliahDina, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refSkoringKuliahDinaDo) Attrs(attrs ...field.AssignExpr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refSkoringKuliahDinaDo) Assign(attrs ...field.AssignExpr) *refSkoringKuliahDinaDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refSkoringKuliahDinaDo) Joins(fields ...field.RelationField) *refSkoringKuliahDinaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refSkoringKuliahDinaDo) Preload(fields ...field.RelationField) *refSkoringKuliahDinaDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refSkoringKuliahDinaDo) FirstOrInit() (*entity.RefSkoringKuliahDina, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKuliahDina), nil
	}
}

func (r refSkoringKuliahDinaDo) FirstOrCreate() (*entity.RefSkoringKuliahDina, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKuliahDina), nil
	}
}

func (r refSkoringKuliahDinaDo) FindByPage(offset int, limit int) (result []*entity.RefSkoringKuliahDina, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refSkoringKuliahDinaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refSkoringKuliahDinaDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refSkoringKuliahDinaDo) Delete(models ...*entity.RefSkoringKuliahDina) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refSkoringKuliahDinaDo) withDO(do gen.Dao) *refSkoringKuliahDinaDo {
	r.DO = *do.(*gen.DO)
	return r
}
