// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkoringSeleksiKaryawan(db *gorm.DB, opts ...gen.DOOption) skoringSeleksiKaryawan {
	_skoringSeleksiKaryawan := skoringSeleksiKaryawan{}

	_skoringSeleksiKaryawan.skoringSeleksiKaryawanDo.UseDB(db, opts...)
	_skoringSeleksiKaryawan.skoringSeleksiKaryawanDo.UseModel(&entity.SkoringSeleksiKaryawan{})

	tableName := _skoringSeleksiKaryawan.skoringSeleksiKaryawanDo.TableName()
	_skoringSeleksiKaryawan.ALL = field.NewAsterisk(tableName)
	_skoringSeleksiKaryawan.ID = field.NewInt32(tableName, "id")
	_skoringSeleksiKaryawan.IDUser = field.NewInt32(tableName, "id_user")
	_skoringSeleksiKaryawan.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skoringSeleksiKaryawan.TpaIu = field.NewInt32(tableName, "tpa_iu")
	_skoringSeleksiKaryawan.TpaPv = field.NewInt32(tableName, "tpa_pv")
	_skoringSeleksiKaryawan.TpaPk = field.NewInt32(tableName, "tpa_pk")
	_skoringSeleksiKaryawan.TpaPa = field.NewInt32(tableName, "tpa_pa")
	_skoringSeleksiKaryawan.TpaPm = field.NewInt32(tableName, "tpa_pm")
	_skoringSeleksiKaryawan.TpaKt = field.NewInt32(tableName, "tpa_kt")
	_skoringSeleksiKaryawan.TpaIq = field.NewInt32(tableName, "tpa_iq")
	_skoringSeleksiKaryawan.SkorIq = field.NewFloat32(tableName, "skor_iq")
	_skoringSeleksiKaryawan.SelesaiSkoring = field.NewInt32(tableName, "selesai_skoring")
	_skoringSeleksiKaryawan.TpaPs = field.NewInt16(tableName, "tpa_ps")
	_skoringSeleksiKaryawan.Km1 = field.NewString(tableName, "km_1")
	_skoringSeleksiKaryawan.Km2 = field.NewString(tableName, "km_2")
	_skoringSeleksiKaryawan.Km3 = field.NewString(tableName, "km_3")
	_skoringSeleksiKaryawan.Km4 = field.NewString(tableName, "km_4")
	_skoringSeleksiKaryawan.Km5 = field.NewString(tableName, "km_5")
	_skoringSeleksiKaryawan.SuasanaKerja1 = field.NewString(tableName, "suasana_kerja1")
	_skoringSeleksiKaryawan.SuasanaKerja2 = field.NewString(tableName, "suasana_kerja2")
	_skoringSeleksiKaryawan.SuasanaKerja3 = field.NewString(tableName, "suasana_kerja3")
	_skoringSeleksiKaryawan.TmiIlmuAlam = field.NewInt32(tableName, "tmi_ilmu_alam")
	_skoringSeleksiKaryawan.TmiIlmuSosial = field.NewInt32(tableName, "tmi_ilmu_sosial")
	_skoringSeleksiKaryawan.TmiRentang = field.NewInt32(tableName, "tmi_rentang")
	_skoringSeleksiKaryawan.RekomTmi = field.NewString(tableName, "rekom_tmi")
	_skoringSeleksiKaryawan.TipojungE = field.NewInt32(tableName, "tipojung_e")
	_skoringSeleksiKaryawan.TipojungI = field.NewInt32(tableName, "tipojung_i")
	_skoringSeleksiKaryawan.TipojungS = field.NewInt32(tableName, "tipojung_s")
	_skoringSeleksiKaryawan.TipojungN = field.NewInt32(tableName, "tipojung_n")
	_skoringSeleksiKaryawan.TipojungT = field.NewInt32(tableName, "tipojung_t")
	_skoringSeleksiKaryawan.TipojungF = field.NewInt32(tableName, "tipojung_f")
	_skoringSeleksiKaryawan.TipojungJ = field.NewInt32(tableName, "tipojung_j")
	_skoringSeleksiKaryawan.TipojungP = field.NewInt32(tableName, "tipojung_p")
	_skoringSeleksiKaryawan.TipojungKode = field.NewString(tableName, "tipojung_kode")
	_skoringSeleksiKaryawan.PribadiMotivasi = field.NewInt32(tableName, "pribadi_motivasi")
	_skoringSeleksiKaryawan.PribadiJuang = field.NewInt32(tableName, "pribadi_juang")
	_skoringSeleksiKaryawan.PribadiYakin = field.NewInt32(tableName, "pribadi_yakin")
	_skoringSeleksiKaryawan.PribadiPercaya = field.NewInt32(tableName, "pribadi_percaya")
	_skoringSeleksiKaryawan.PribadiKonsep = field.NewInt32(tableName, "pribadi_konsep")
	_skoringSeleksiKaryawan.PribadiKreativitas = field.NewInt32(tableName, "pribadi_kreativitas")
	_skoringSeleksiKaryawan.PribadiMimpin = field.NewInt32(tableName, "pribadi_mimpin")
	_skoringSeleksiKaryawan.PribadiEntrepreneur = field.NewInt32(tableName, "pribadi_entrepreneur")
	_skoringSeleksiKaryawan.PribadiStress = field.NewInt32(tableName, "pribadi_stress")
	_skoringSeleksiKaryawan.PribadiEmosi = field.NewInt32(tableName, "pribadi_emosi")
	_skoringSeleksiKaryawan.PribadiSosial = field.NewInt32(tableName, "pribadi_sosial")
	_skoringSeleksiKaryawan.PribadiEmpati = field.NewInt32(tableName, "pribadi_empati")

	_skoringSeleksiKaryawan.fillFieldMap()

	return _skoringSeleksiKaryawan
}

type skoringSeleksiKaryawan struct {
	skoringSeleksiKaryawanDo skoringSeleksiKaryawanDo

	ALL                 field.Asterisk
	ID                  field.Int32
	IDUser              field.Int32
	IDQuiz              field.Int32
	TpaIu               field.Int32
	TpaPv               field.Int32
	TpaPk               field.Int32
	TpaPa               field.Int32
	TpaPm               field.Int32
	TpaKt               field.Int32
	TpaIq               field.Int32
	SkorIq              field.Float32
	SelesaiSkoring      field.Int32
	TpaPs               field.Int16
	Km1                 field.String
	Km2                 field.String
	Km3                 field.String
	Km4                 field.String
	Km5                 field.String
	SuasanaKerja1       field.String
	SuasanaKerja2       field.String
	SuasanaKerja3       field.String
	TmiIlmuAlam         field.Int32
	TmiIlmuSosial       field.Int32
	TmiRentang          field.Int32
	RekomTmi            field.String
	TipojungE           field.Int32
	TipojungI           field.Int32
	TipojungS           field.Int32
	TipojungN           field.Int32
	TipojungT           field.Int32
	TipojungF           field.Int32
	TipojungJ           field.Int32
	TipojungP           field.Int32
	TipojungKode        field.String
	PribadiMotivasi     field.Int32
	PribadiJuang        field.Int32
	PribadiYakin        field.Int32
	PribadiPercaya      field.Int32
	PribadiKonsep       field.Int32
	PribadiKreativitas  field.Int32
	PribadiMimpin       field.Int32
	PribadiEntrepreneur field.Int32
	PribadiStress       field.Int32
	PribadiEmosi        field.Int32
	PribadiSosial       field.Int32
	PribadiEmpati       field.Int32

	fieldMap map[string]field.Expr
}

func (s skoringSeleksiKaryawan) Table(newTableName string) *skoringSeleksiKaryawan {
	s.skoringSeleksiKaryawanDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skoringSeleksiKaryawan) As(alias string) *skoringSeleksiKaryawan {
	s.skoringSeleksiKaryawanDo.DO = *(s.skoringSeleksiKaryawanDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skoringSeleksiKaryawan) updateTableName(table string) *skoringSeleksiKaryawan {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TpaIu = field.NewInt32(table, "tpa_iu")
	s.TpaPv = field.NewInt32(table, "tpa_pv")
	s.TpaPk = field.NewInt32(table, "tpa_pk")
	s.TpaPa = field.NewInt32(table, "tpa_pa")
	s.TpaPm = field.NewInt32(table, "tpa_pm")
	s.TpaKt = field.NewInt32(table, "tpa_kt")
	s.TpaIq = field.NewInt32(table, "tpa_iq")
	s.SkorIq = field.NewFloat32(table, "skor_iq")
	s.SelesaiSkoring = field.NewInt32(table, "selesai_skoring")
	s.TpaPs = field.NewInt16(table, "tpa_ps")
	s.Km1 = field.NewString(table, "km_1")
	s.Km2 = field.NewString(table, "km_2")
	s.Km3 = field.NewString(table, "km_3")
	s.Km4 = field.NewString(table, "km_4")
	s.Km5 = field.NewString(table, "km_5")
	s.SuasanaKerja1 = field.NewString(table, "suasana_kerja1")
	s.SuasanaKerja2 = field.NewString(table, "suasana_kerja2")
	s.SuasanaKerja3 = field.NewString(table, "suasana_kerja3")
	s.TmiIlmuAlam = field.NewInt32(table, "tmi_ilmu_alam")
	s.TmiIlmuSosial = field.NewInt32(table, "tmi_ilmu_sosial")
	s.TmiRentang = field.NewInt32(table, "tmi_rentang")
	s.RekomTmi = field.NewString(table, "rekom_tmi")
	s.TipojungE = field.NewInt32(table, "tipojung_e")
	s.TipojungI = field.NewInt32(table, "tipojung_i")
	s.TipojungS = field.NewInt32(table, "tipojung_s")
	s.TipojungN = field.NewInt32(table, "tipojung_n")
	s.TipojungT = field.NewInt32(table, "tipojung_t")
	s.TipojungF = field.NewInt32(table, "tipojung_f")
	s.TipojungJ = field.NewInt32(table, "tipojung_j")
	s.TipojungP = field.NewInt32(table, "tipojung_p")
	s.TipojungKode = field.NewString(table, "tipojung_kode")
	s.PribadiMotivasi = field.NewInt32(table, "pribadi_motivasi")
	s.PribadiJuang = field.NewInt32(table, "pribadi_juang")
	s.PribadiYakin = field.NewInt32(table, "pribadi_yakin")
	s.PribadiPercaya = field.NewInt32(table, "pribadi_percaya")
	s.PribadiKonsep = field.NewInt32(table, "pribadi_konsep")
	s.PribadiKreativitas = field.NewInt32(table, "pribadi_kreativitas")
	s.PribadiMimpin = field.NewInt32(table, "pribadi_mimpin")
	s.PribadiEntrepreneur = field.NewInt32(table, "pribadi_entrepreneur")
	s.PribadiStress = field.NewInt32(table, "pribadi_stress")
	s.PribadiEmosi = field.NewInt32(table, "pribadi_emosi")
	s.PribadiSosial = field.NewInt32(table, "pribadi_sosial")
	s.PribadiEmpati = field.NewInt32(table, "pribadi_empati")

	s.fillFieldMap()

	return s
}

func (s *skoringSeleksiKaryawan) WithContext(ctx context.Context) *skoringSeleksiKaryawanDo {
	return s.skoringSeleksiKaryawanDo.WithContext(ctx)
}

func (s skoringSeleksiKaryawan) TableName() string { return s.skoringSeleksiKaryawanDo.TableName() }

func (s skoringSeleksiKaryawan) Alias() string { return s.skoringSeleksiKaryawanDo.Alias() }

func (s skoringSeleksiKaryawan) Columns(cols ...field.Expr) gen.Columns {
	return s.skoringSeleksiKaryawanDo.Columns(cols...)
}

func (s *skoringSeleksiKaryawan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skoringSeleksiKaryawan) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 46)
	s.fieldMap["id"] = s.ID
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tpa_iu"] = s.TpaIu
	s.fieldMap["tpa_pv"] = s.TpaPv
	s.fieldMap["tpa_pk"] = s.TpaPk
	s.fieldMap["tpa_pa"] = s.TpaPa
	s.fieldMap["tpa_pm"] = s.TpaPm
	s.fieldMap["tpa_kt"] = s.TpaKt
	s.fieldMap["tpa_iq"] = s.TpaIq
	s.fieldMap["skor_iq"] = s.SkorIq
	s.fieldMap["selesai_skoring"] = s.SelesaiSkoring
	s.fieldMap["tpa_ps"] = s.TpaPs
	s.fieldMap["km_1"] = s.Km1
	s.fieldMap["km_2"] = s.Km2
	s.fieldMap["km_3"] = s.Km3
	s.fieldMap["km_4"] = s.Km4
	s.fieldMap["km_5"] = s.Km5
	s.fieldMap["suasana_kerja1"] = s.SuasanaKerja1
	s.fieldMap["suasana_kerja2"] = s.SuasanaKerja2
	s.fieldMap["suasana_kerja3"] = s.SuasanaKerja3
	s.fieldMap["tmi_ilmu_alam"] = s.TmiIlmuAlam
	s.fieldMap["tmi_ilmu_sosial"] = s.TmiIlmuSosial
	s.fieldMap["tmi_rentang"] = s.TmiRentang
	s.fieldMap["rekom_tmi"] = s.RekomTmi
	s.fieldMap["tipojung_e"] = s.TipojungE
	s.fieldMap["tipojung_i"] = s.TipojungI
	s.fieldMap["tipojung_s"] = s.TipojungS
	s.fieldMap["tipojung_n"] = s.TipojungN
	s.fieldMap["tipojung_t"] = s.TipojungT
	s.fieldMap["tipojung_f"] = s.TipojungF
	s.fieldMap["tipojung_j"] = s.TipojungJ
	s.fieldMap["tipojung_p"] = s.TipojungP
	s.fieldMap["tipojung_kode"] = s.TipojungKode
	s.fieldMap["pribadi_motivasi"] = s.PribadiMotivasi
	s.fieldMap["pribadi_juang"] = s.PribadiJuang
	s.fieldMap["pribadi_yakin"] = s.PribadiYakin
	s.fieldMap["pribadi_percaya"] = s.PribadiPercaya
	s.fieldMap["pribadi_konsep"] = s.PribadiKonsep
	s.fieldMap["pribadi_kreativitas"] = s.PribadiKreativitas
	s.fieldMap["pribadi_mimpin"] = s.PribadiMimpin
	s.fieldMap["pribadi_entrepreneur"] = s.PribadiEntrepreneur
	s.fieldMap["pribadi_stress"] = s.PribadiStress
	s.fieldMap["pribadi_emosi"] = s.PribadiEmosi
	s.fieldMap["pribadi_sosial"] = s.PribadiSosial
	s.fieldMap["pribadi_empati"] = s.PribadiEmpati
}

func (s skoringSeleksiKaryawan) clone(db *gorm.DB) skoringSeleksiKaryawan {
	s.skoringSeleksiKaryawanDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skoringSeleksiKaryawan) replaceDB(db *gorm.DB) skoringSeleksiKaryawan {
	s.skoringSeleksiKaryawanDo.ReplaceDB(db)
	return s
}

type skoringSeleksiKaryawanDo struct{ gen.DO }

func (s skoringSeleksiKaryawanDo) Debug() *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Debug())
}

func (s skoringSeleksiKaryawanDo) WithContext(ctx context.Context) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skoringSeleksiKaryawanDo) ReadDB() *skoringSeleksiKaryawanDo {
	return s.Clauses(dbresolver.Read)
}

func (s skoringSeleksiKaryawanDo) WriteDB() *skoringSeleksiKaryawanDo {
	return s.Clauses(dbresolver.Write)
}

func (s skoringSeleksiKaryawanDo) Session(config *gorm.Session) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Session(config))
}

func (s skoringSeleksiKaryawanDo) Clauses(conds ...clause.Expression) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skoringSeleksiKaryawanDo) Returning(value interface{}, columns ...string) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skoringSeleksiKaryawanDo) Not(conds ...gen.Condition) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skoringSeleksiKaryawanDo) Or(conds ...gen.Condition) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skoringSeleksiKaryawanDo) Select(conds ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skoringSeleksiKaryawanDo) Where(conds ...gen.Condition) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skoringSeleksiKaryawanDo) Order(conds ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skoringSeleksiKaryawanDo) Distinct(cols ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skoringSeleksiKaryawanDo) Omit(cols ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skoringSeleksiKaryawanDo) Join(table schema.Tabler, on ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skoringSeleksiKaryawanDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skoringSeleksiKaryawanDo) RightJoin(table schema.Tabler, on ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skoringSeleksiKaryawanDo) Group(cols ...field.Expr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skoringSeleksiKaryawanDo) Having(conds ...gen.Condition) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skoringSeleksiKaryawanDo) Limit(limit int) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skoringSeleksiKaryawanDo) Offset(offset int) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skoringSeleksiKaryawanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skoringSeleksiKaryawanDo) Unscoped() *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skoringSeleksiKaryawanDo) Create(values ...*entity.SkoringSeleksiKaryawan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skoringSeleksiKaryawanDo) CreateInBatches(values []*entity.SkoringSeleksiKaryawan, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skoringSeleksiKaryawanDo) Save(values ...*entity.SkoringSeleksiKaryawan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skoringSeleksiKaryawanDo) First() (*entity.SkoringSeleksiKaryawan, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringSeleksiKaryawan), nil
	}
}

func (s skoringSeleksiKaryawanDo) Take() (*entity.SkoringSeleksiKaryawan, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringSeleksiKaryawan), nil
	}
}

func (s skoringSeleksiKaryawanDo) Last() (*entity.SkoringSeleksiKaryawan, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringSeleksiKaryawan), nil
	}
}

func (s skoringSeleksiKaryawanDo) Find() ([]*entity.SkoringSeleksiKaryawan, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkoringSeleksiKaryawan), err
}

func (s skoringSeleksiKaryawanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkoringSeleksiKaryawan, err error) {
	buf := make([]*entity.SkoringSeleksiKaryawan, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skoringSeleksiKaryawanDo) FindInBatches(result *[]*entity.SkoringSeleksiKaryawan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skoringSeleksiKaryawanDo) Attrs(attrs ...field.AssignExpr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skoringSeleksiKaryawanDo) Assign(attrs ...field.AssignExpr) *skoringSeleksiKaryawanDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skoringSeleksiKaryawanDo) Joins(fields ...field.RelationField) *skoringSeleksiKaryawanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skoringSeleksiKaryawanDo) Preload(fields ...field.RelationField) *skoringSeleksiKaryawanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skoringSeleksiKaryawanDo) FirstOrInit() (*entity.SkoringSeleksiKaryawan, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringSeleksiKaryawan), nil
	}
}

func (s skoringSeleksiKaryawanDo) FirstOrCreate() (*entity.SkoringSeleksiKaryawan, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringSeleksiKaryawan), nil
	}
}

func (s skoringSeleksiKaryawanDo) FindByPage(offset int, limit int) (result []*entity.SkoringSeleksiKaryawan, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skoringSeleksiKaryawanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skoringSeleksiKaryawanDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skoringSeleksiKaryawanDo) Delete(models ...*entity.SkoringSeleksiKaryawan) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skoringSeleksiKaryawanDo) withDO(do gen.Dao) *skoringSeleksiKaryawanDo {
	s.DO = *do.(*gen.DO)
	return s
}
