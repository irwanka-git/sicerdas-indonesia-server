// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newPetunjukSoalEng(db *gorm.DB, opts ...gen.DOOption) petunjukSoalEng {
	_petunjukSoalEng := petunjukSoalEng{}

	_petunjukSoalEng.petunjukSoalEngDo.UseDB(db, opts...)
	_petunjukSoalEng.petunjukSoalEngDo.UseModel(&entity.PetunjukSoalEng{})

	tableName := _petunjukSoalEng.petunjukSoalEngDo.TableName()
	_petunjukSoalEng.ALL = field.NewAsterisk(tableName)
	_petunjukSoalEng.IDPetunjuk = field.NewInt32(tableName, "id_petunjuk")
	_petunjukSoalEng.IsiPetunjuk = field.NewString(tableName, "isi_petunjuk")
	_petunjukSoalEng.UUID = field.NewString(tableName, "uuid")
	_petunjukSoalEng.Keterangan = field.NewString(tableName, "keterangan")

	_petunjukSoalEng.fillFieldMap()

	return _petunjukSoalEng
}

type petunjukSoalEng struct {
	petunjukSoalEngDo petunjukSoalEngDo

	ALL         field.Asterisk
	IDPetunjuk  field.Int32
	IsiPetunjuk field.String
	UUID        field.String
	Keterangan  field.String

	fieldMap map[string]field.Expr
}

func (p petunjukSoalEng) Table(newTableName string) *petunjukSoalEng {
	p.petunjukSoalEngDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p petunjukSoalEng) As(alias string) *petunjukSoalEng {
	p.petunjukSoalEngDo.DO = *(p.petunjukSoalEngDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *petunjukSoalEng) updateTableName(table string) *petunjukSoalEng {
	p.ALL = field.NewAsterisk(table)
	p.IDPetunjuk = field.NewInt32(table, "id_petunjuk")
	p.IsiPetunjuk = field.NewString(table, "isi_petunjuk")
	p.UUID = field.NewString(table, "uuid")
	p.Keterangan = field.NewString(table, "keterangan")

	p.fillFieldMap()

	return p
}

func (p *petunjukSoalEng) WithContext(ctx context.Context) *petunjukSoalEngDo {
	return p.petunjukSoalEngDo.WithContext(ctx)
}

func (p petunjukSoalEng) TableName() string { return p.petunjukSoalEngDo.TableName() }

func (p petunjukSoalEng) Alias() string { return p.petunjukSoalEngDo.Alias() }

func (p petunjukSoalEng) Columns(cols ...field.Expr) gen.Columns {
	return p.petunjukSoalEngDo.Columns(cols...)
}

func (p *petunjukSoalEng) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *petunjukSoalEng) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id_petunjuk"] = p.IDPetunjuk
	p.fieldMap["isi_petunjuk"] = p.IsiPetunjuk
	p.fieldMap["uuid"] = p.UUID
	p.fieldMap["keterangan"] = p.Keterangan
}

func (p petunjukSoalEng) clone(db *gorm.DB) petunjukSoalEng {
	p.petunjukSoalEngDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p petunjukSoalEng) replaceDB(db *gorm.DB) petunjukSoalEng {
	p.petunjukSoalEngDo.ReplaceDB(db)
	return p
}

type petunjukSoalEngDo struct{ gen.DO }

func (p petunjukSoalEngDo) Debug() *petunjukSoalEngDo {
	return p.withDO(p.DO.Debug())
}

func (p petunjukSoalEngDo) WithContext(ctx context.Context) *petunjukSoalEngDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p petunjukSoalEngDo) ReadDB() *petunjukSoalEngDo {
	return p.Clauses(dbresolver.Read)
}

func (p petunjukSoalEngDo) WriteDB() *petunjukSoalEngDo {
	return p.Clauses(dbresolver.Write)
}

func (p petunjukSoalEngDo) Session(config *gorm.Session) *petunjukSoalEngDo {
	return p.withDO(p.DO.Session(config))
}

func (p petunjukSoalEngDo) Clauses(conds ...clause.Expression) *petunjukSoalEngDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p petunjukSoalEngDo) Returning(value interface{}, columns ...string) *petunjukSoalEngDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p petunjukSoalEngDo) Not(conds ...gen.Condition) *petunjukSoalEngDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p petunjukSoalEngDo) Or(conds ...gen.Condition) *petunjukSoalEngDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p petunjukSoalEngDo) Select(conds ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p petunjukSoalEngDo) Where(conds ...gen.Condition) *petunjukSoalEngDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p petunjukSoalEngDo) Order(conds ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p petunjukSoalEngDo) Distinct(cols ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p petunjukSoalEngDo) Omit(cols ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p petunjukSoalEngDo) Join(table schema.Tabler, on ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p petunjukSoalEngDo) LeftJoin(table schema.Tabler, on ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p petunjukSoalEngDo) RightJoin(table schema.Tabler, on ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p petunjukSoalEngDo) Group(cols ...field.Expr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p petunjukSoalEngDo) Having(conds ...gen.Condition) *petunjukSoalEngDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p petunjukSoalEngDo) Limit(limit int) *petunjukSoalEngDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p petunjukSoalEngDo) Offset(offset int) *petunjukSoalEngDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p petunjukSoalEngDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *petunjukSoalEngDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p petunjukSoalEngDo) Unscoped() *petunjukSoalEngDo {
	return p.withDO(p.DO.Unscoped())
}

func (p petunjukSoalEngDo) Create(values ...*entity.PetunjukSoalEng) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p petunjukSoalEngDo) CreateInBatches(values []*entity.PetunjukSoalEng, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p petunjukSoalEngDo) Save(values ...*entity.PetunjukSoalEng) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p petunjukSoalEngDo) First() (*entity.PetunjukSoalEng, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PetunjukSoalEng), nil
	}
}

func (p petunjukSoalEngDo) Take() (*entity.PetunjukSoalEng, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PetunjukSoalEng), nil
	}
}

func (p petunjukSoalEngDo) Last() (*entity.PetunjukSoalEng, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PetunjukSoalEng), nil
	}
}

func (p petunjukSoalEngDo) Find() ([]*entity.PetunjukSoalEng, error) {
	result, err := p.DO.Find()
	return result.([]*entity.PetunjukSoalEng), err
}

func (p petunjukSoalEngDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.PetunjukSoalEng, err error) {
	buf := make([]*entity.PetunjukSoalEng, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p petunjukSoalEngDo) FindInBatches(result *[]*entity.PetunjukSoalEng, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p petunjukSoalEngDo) Attrs(attrs ...field.AssignExpr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p petunjukSoalEngDo) Assign(attrs ...field.AssignExpr) *petunjukSoalEngDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p petunjukSoalEngDo) Joins(fields ...field.RelationField) *petunjukSoalEngDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p petunjukSoalEngDo) Preload(fields ...field.RelationField) *petunjukSoalEngDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p petunjukSoalEngDo) FirstOrInit() (*entity.PetunjukSoalEng, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PetunjukSoalEng), nil
	}
}

func (p petunjukSoalEngDo) FirstOrCreate() (*entity.PetunjukSoalEng, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PetunjukSoalEng), nil
	}
}

func (p petunjukSoalEngDo) FindByPage(offset int, limit int) (result []*entity.PetunjukSoalEng, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p petunjukSoalEngDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p petunjukSoalEngDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p petunjukSoalEngDo) Delete(models ...*entity.PetunjukSoalEng) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *petunjukSoalEngDo) withDO(do gen.Dao) *petunjukSoalEngDo {
	p.DO = *do.(*gen.DO)
	return p
}
