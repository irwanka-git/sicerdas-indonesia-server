// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newTarifPaket(db *gorm.DB, opts ...gen.DOOption) tarifPaket {
	_tarifPaket := tarifPaket{}

	_tarifPaket.tarifPaketDo.UseDB(db, opts...)
	_tarifPaket.tarifPaketDo.UseModel(&entity.TarifPaket{})

	tableName := _tarifPaket.tarifPaketDo.TableName()
	_tarifPaket.ALL = field.NewAsterisk(tableName)
	_tarifPaket.IDTarif = field.NewInt32(tableName, "id_tarif")
	_tarifPaket.NamaTarif = field.NewString(tableName, "nama_tarif")
	_tarifPaket.Tarif = field.NewInt64(tableName, "tarif")
	_tarifPaket.Kode = field.NewString(tableName, "kode")
	_tarifPaket.UUID = field.NewString(tableName, "uuid")

	_tarifPaket.fillFieldMap()

	return _tarifPaket
}

type tarifPaket struct {
	tarifPaketDo tarifPaketDo

	ALL       field.Asterisk
	IDTarif   field.Int32
	NamaTarif field.String
	Tarif     field.Int64 // per Peserta
	Kode      field.String
	UUID      field.String

	fieldMap map[string]field.Expr
}

func (t tarifPaket) Table(newTableName string) *tarifPaket {
	t.tarifPaketDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tarifPaket) As(alias string) *tarifPaket {
	t.tarifPaketDo.DO = *(t.tarifPaketDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tarifPaket) updateTableName(table string) *tarifPaket {
	t.ALL = field.NewAsterisk(table)
	t.IDTarif = field.NewInt32(table, "id_tarif")
	t.NamaTarif = field.NewString(table, "nama_tarif")
	t.Tarif = field.NewInt64(table, "tarif")
	t.Kode = field.NewString(table, "kode")
	t.UUID = field.NewString(table, "uuid")

	t.fillFieldMap()

	return t
}

func (t *tarifPaket) WithContext(ctx context.Context) *tarifPaketDo {
	return t.tarifPaketDo.WithContext(ctx)
}

func (t tarifPaket) TableName() string { return t.tarifPaketDo.TableName() }

func (t tarifPaket) Alias() string { return t.tarifPaketDo.Alias() }

func (t tarifPaket) Columns(cols ...field.Expr) gen.Columns { return t.tarifPaketDo.Columns(cols...) }

func (t *tarifPaket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tarifPaket) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id_tarif"] = t.IDTarif
	t.fieldMap["nama_tarif"] = t.NamaTarif
	t.fieldMap["tarif"] = t.Tarif
	t.fieldMap["kode"] = t.Kode
	t.fieldMap["uuid"] = t.UUID
}

func (t tarifPaket) clone(db *gorm.DB) tarifPaket {
	t.tarifPaketDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tarifPaket) replaceDB(db *gorm.DB) tarifPaket {
	t.tarifPaketDo.ReplaceDB(db)
	return t
}

type tarifPaketDo struct{ gen.DO }

func (t tarifPaketDo) Debug() *tarifPaketDo {
	return t.withDO(t.DO.Debug())
}

func (t tarifPaketDo) WithContext(ctx context.Context) *tarifPaketDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tarifPaketDo) ReadDB() *tarifPaketDo {
	return t.Clauses(dbresolver.Read)
}

func (t tarifPaketDo) WriteDB() *tarifPaketDo {
	return t.Clauses(dbresolver.Write)
}

func (t tarifPaketDo) Session(config *gorm.Session) *tarifPaketDo {
	return t.withDO(t.DO.Session(config))
}

func (t tarifPaketDo) Clauses(conds ...clause.Expression) *tarifPaketDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tarifPaketDo) Returning(value interface{}, columns ...string) *tarifPaketDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tarifPaketDo) Not(conds ...gen.Condition) *tarifPaketDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tarifPaketDo) Or(conds ...gen.Condition) *tarifPaketDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tarifPaketDo) Select(conds ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tarifPaketDo) Where(conds ...gen.Condition) *tarifPaketDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tarifPaketDo) Order(conds ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tarifPaketDo) Distinct(cols ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tarifPaketDo) Omit(cols ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tarifPaketDo) Join(table schema.Tabler, on ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tarifPaketDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tarifPaketDo) RightJoin(table schema.Tabler, on ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tarifPaketDo) Group(cols ...field.Expr) *tarifPaketDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tarifPaketDo) Having(conds ...gen.Condition) *tarifPaketDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tarifPaketDo) Limit(limit int) *tarifPaketDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tarifPaketDo) Offset(offset int) *tarifPaketDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tarifPaketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tarifPaketDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tarifPaketDo) Unscoped() *tarifPaketDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tarifPaketDo) Create(values ...*entity.TarifPaket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tarifPaketDo) CreateInBatches(values []*entity.TarifPaket, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tarifPaketDo) Save(values ...*entity.TarifPaket) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tarifPaketDo) First() (*entity.TarifPaket, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaket), nil
	}
}

func (t tarifPaketDo) Take() (*entity.TarifPaket, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaket), nil
	}
}

func (t tarifPaketDo) Last() (*entity.TarifPaket, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaket), nil
	}
}

func (t tarifPaketDo) Find() ([]*entity.TarifPaket, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TarifPaket), err
}

func (t tarifPaketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TarifPaket, err error) {
	buf := make([]*entity.TarifPaket, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tarifPaketDo) FindInBatches(result *[]*entity.TarifPaket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tarifPaketDo) Attrs(attrs ...field.AssignExpr) *tarifPaketDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tarifPaketDo) Assign(attrs ...field.AssignExpr) *tarifPaketDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tarifPaketDo) Joins(fields ...field.RelationField) *tarifPaketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tarifPaketDo) Preload(fields ...field.RelationField) *tarifPaketDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tarifPaketDo) FirstOrInit() (*entity.TarifPaket, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaket), nil
	}
}

func (t tarifPaketDo) FirstOrCreate() (*entity.TarifPaket, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TarifPaket), nil
	}
}

func (t tarifPaketDo) FindByPage(offset int, limit int) (result []*entity.TarifPaket, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tarifPaketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tarifPaketDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tarifPaketDo) Delete(models ...*entity.TarifPaket) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tarifPaketDo) withDO(do gen.Dao) *tarifPaketDo {
	t.DO = *do.(*gen.DO)
	return t
}
