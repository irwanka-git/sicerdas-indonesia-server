// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newQuizTemplateSaran(db *gorm.DB, opts ...gen.DOOption) quizTemplateSaran {
	_quizTemplateSaran := quizTemplateSaran{}

	_quizTemplateSaran.quizTemplateSaranDo.UseDB(db, opts...)
	_quizTemplateSaran.quizTemplateSaranDo.UseModel(&entity.QuizTemplateSaran{})

	tableName := _quizTemplateSaran.quizTemplateSaranDo.TableName()
	_quizTemplateSaran.ALL = field.NewAsterisk(tableName)
	_quizTemplateSaran.IDTemplateSaran = field.NewInt32(tableName, "id_template_saran")
	_quizTemplateSaran.NamaTemplateSaran = field.NewString(tableName, "nama_template_saran")
	_quizTemplateSaran.SkoringTabel = field.NewString(tableName, "skoring_tabel")
	_quizTemplateSaran.Isi = field.NewString(tableName, "isi")
	_quizTemplateSaran.SalamPembuka = field.NewString(tableName, "salam_pembuka")
	_quizTemplateSaran.UUID = field.NewString(tableName, "uuid")

	_quizTemplateSaran.fillFieldMap()

	return _quizTemplateSaran
}

type quizTemplateSaran struct {
	quizTemplateSaranDo quizTemplateSaranDo

	ALL               field.Asterisk
	IDTemplateSaran   field.Int32
	NamaTemplateSaran field.String
	SkoringTabel      field.String // Nama Tabel Skoring Akhir
	Isi               field.String
	SalamPembuka      field.String
	UUID              field.String

	fieldMap map[string]field.Expr
}

func (q quizTemplateSaran) Table(newTableName string) *quizTemplateSaran {
	q.quizTemplateSaranDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quizTemplateSaran) As(alias string) *quizTemplateSaran {
	q.quizTemplateSaranDo.DO = *(q.quizTemplateSaranDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quizTemplateSaran) updateTableName(table string) *quizTemplateSaran {
	q.ALL = field.NewAsterisk(table)
	q.IDTemplateSaran = field.NewInt32(table, "id_template_saran")
	q.NamaTemplateSaran = field.NewString(table, "nama_template_saran")
	q.SkoringTabel = field.NewString(table, "skoring_tabel")
	q.Isi = field.NewString(table, "isi")
	q.SalamPembuka = field.NewString(table, "salam_pembuka")
	q.UUID = field.NewString(table, "uuid")

	q.fillFieldMap()

	return q
}

func (q *quizTemplateSaran) WithContext(ctx context.Context) *quizTemplateSaranDo {
	return q.quizTemplateSaranDo.WithContext(ctx)
}

func (q quizTemplateSaran) TableName() string { return q.quizTemplateSaranDo.TableName() }

func (q quizTemplateSaran) Alias() string { return q.quizTemplateSaranDo.Alias() }

func (q quizTemplateSaran) Columns(cols ...field.Expr) gen.Columns {
	return q.quizTemplateSaranDo.Columns(cols...)
}

func (q *quizTemplateSaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quizTemplateSaran) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 6)
	q.fieldMap["id_template_saran"] = q.IDTemplateSaran
	q.fieldMap["nama_template_saran"] = q.NamaTemplateSaran
	q.fieldMap["skoring_tabel"] = q.SkoringTabel
	q.fieldMap["isi"] = q.Isi
	q.fieldMap["salam_pembuka"] = q.SalamPembuka
	q.fieldMap["uuid"] = q.UUID
}

func (q quizTemplateSaran) clone(db *gorm.DB) quizTemplateSaran {
	q.quizTemplateSaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quizTemplateSaran) replaceDB(db *gorm.DB) quizTemplateSaran {
	q.quizTemplateSaranDo.ReplaceDB(db)
	return q
}

type quizTemplateSaranDo struct{ gen.DO }

func (q quizTemplateSaranDo) Debug() *quizTemplateSaranDo {
	return q.withDO(q.DO.Debug())
}

func (q quizTemplateSaranDo) WithContext(ctx context.Context) *quizTemplateSaranDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizTemplateSaranDo) ReadDB() *quizTemplateSaranDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizTemplateSaranDo) WriteDB() *quizTemplateSaranDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizTemplateSaranDo) Session(config *gorm.Session) *quizTemplateSaranDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizTemplateSaranDo) Clauses(conds ...clause.Expression) *quizTemplateSaranDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizTemplateSaranDo) Returning(value interface{}, columns ...string) *quizTemplateSaranDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizTemplateSaranDo) Not(conds ...gen.Condition) *quizTemplateSaranDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizTemplateSaranDo) Or(conds ...gen.Condition) *quizTemplateSaranDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizTemplateSaranDo) Select(conds ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizTemplateSaranDo) Where(conds ...gen.Condition) *quizTemplateSaranDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizTemplateSaranDo) Order(conds ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizTemplateSaranDo) Distinct(cols ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizTemplateSaranDo) Omit(cols ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizTemplateSaranDo) Join(table schema.Tabler, on ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizTemplateSaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizTemplateSaranDo) RightJoin(table schema.Tabler, on ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizTemplateSaranDo) Group(cols ...field.Expr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizTemplateSaranDo) Having(conds ...gen.Condition) *quizTemplateSaranDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizTemplateSaranDo) Limit(limit int) *quizTemplateSaranDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizTemplateSaranDo) Offset(offset int) *quizTemplateSaranDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizTemplateSaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *quizTemplateSaranDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizTemplateSaranDo) Unscoped() *quizTemplateSaranDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizTemplateSaranDo) Create(values ...*entity.QuizTemplateSaran) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizTemplateSaranDo) CreateInBatches(values []*entity.QuizTemplateSaran, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizTemplateSaranDo) Save(values ...*entity.QuizTemplateSaran) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizTemplateSaranDo) First() (*entity.QuizTemplateSaran, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizTemplateSaran), nil
	}
}

func (q quizTemplateSaranDo) Take() (*entity.QuizTemplateSaran, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizTemplateSaran), nil
	}
}

func (q quizTemplateSaranDo) Last() (*entity.QuizTemplateSaran, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizTemplateSaran), nil
	}
}

func (q quizTemplateSaranDo) Find() ([]*entity.QuizTemplateSaran, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuizTemplateSaran), err
}

func (q quizTemplateSaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuizTemplateSaran, err error) {
	buf := make([]*entity.QuizTemplateSaran, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizTemplateSaranDo) FindInBatches(result *[]*entity.QuizTemplateSaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizTemplateSaranDo) Attrs(attrs ...field.AssignExpr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizTemplateSaranDo) Assign(attrs ...field.AssignExpr) *quizTemplateSaranDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizTemplateSaranDo) Joins(fields ...field.RelationField) *quizTemplateSaranDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizTemplateSaranDo) Preload(fields ...field.RelationField) *quizTemplateSaranDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizTemplateSaranDo) FirstOrInit() (*entity.QuizTemplateSaran, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizTemplateSaran), nil
	}
}

func (q quizTemplateSaranDo) FirstOrCreate() (*entity.QuizTemplateSaran, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizTemplateSaran), nil
	}
}

func (q quizTemplateSaranDo) FindByPage(offset int, limit int) (result []*entity.QuizTemplateSaran, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizTemplateSaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizTemplateSaranDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizTemplateSaranDo) Delete(models ...*entity.QuizTemplateSaran) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizTemplateSaranDo) withDO(do gen.Dao) *quizTemplateSaranDo {
	q.DO = *do.(*gen.DO)
	return q
}
