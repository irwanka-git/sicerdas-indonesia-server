// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefSkoringKecerdasanMajemuk(db *gorm.DB, opts ...gen.DOOption) refSkoringKecerdasanMajemuk {
	_refSkoringKecerdasanMajemuk := refSkoringKecerdasanMajemuk{}

	_refSkoringKecerdasanMajemuk.refSkoringKecerdasanMajemukDo.UseDB(db, opts...)
	_refSkoringKecerdasanMajemuk.refSkoringKecerdasanMajemukDo.UseModel(&entity.RefSkoringKecerdasanMajemuk{})

	tableName := _refSkoringKecerdasanMajemuk.refSkoringKecerdasanMajemukDo.TableName()
	_refSkoringKecerdasanMajemuk.ALL = field.NewAsterisk(tableName)
	_refSkoringKecerdasanMajemuk.IDSkoringKecerdasanMajemuk = field.NewInt32(tableName, "id_skoring_kecerdasan_majemuk")
	_refSkoringKecerdasanMajemuk.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_refSkoringKecerdasanMajemuk.IDUser = field.NewInt32(tableName, "id_user")
	_refSkoringKecerdasanMajemuk.No = field.NewString(tableName, "no")
	_refSkoringKecerdasanMajemuk.B1 = field.NewInt32(tableName, "b1")
	_refSkoringKecerdasanMajemuk.B2 = field.NewInt32(tableName, "b2")
	_refSkoringKecerdasanMajemuk.B3 = field.NewInt32(tableName, "b3")
	_refSkoringKecerdasanMajemuk.B4 = field.NewInt32(tableName, "b4")
	_refSkoringKecerdasanMajemuk.B5 = field.NewInt32(tableName, "b5")
	_refSkoringKecerdasanMajemuk.B6 = field.NewInt32(tableName, "b6")
	_refSkoringKecerdasanMajemuk.B7 = field.NewInt32(tableName, "b7")
	_refSkoringKecerdasanMajemuk.B8 = field.NewInt32(tableName, "b8")
	_refSkoringKecerdasanMajemuk.B9 = field.NewInt32(tableName, "b9")
	_refSkoringKecerdasanMajemuk.Total = field.NewInt32(tableName, "total")
	_refSkoringKecerdasanMajemuk.Rangking = field.NewInt32(tableName, "rangking")

	_refSkoringKecerdasanMajemuk.fillFieldMap()

	return _refSkoringKecerdasanMajemuk
}

type refSkoringKecerdasanMajemuk struct {
	refSkoringKecerdasanMajemukDo refSkoringKecerdasanMajemukDo

	ALL                        field.Asterisk
	IDSkoringKecerdasanMajemuk field.Int32
	IDQuiz                     field.Int32  // ID_QUIZ
	IDUser                     field.Int32  // ID_USER
	No                         field.String // NO SEKOLAH DINAS (ref_sekolah_dinas)
	B1                         field.Int32
	B2                         field.Int32
	B3                         field.Int32
	B4                         field.Int32
	B5                         field.Int32
	B6                         field.Int32
	B7                         field.Int32
	B8                         field.Int32
	B9                         field.Int32
	Total                      field.Int32
	Rangking                   field.Int32

	fieldMap map[string]field.Expr
}

func (r refSkoringKecerdasanMajemuk) Table(newTableName string) *refSkoringKecerdasanMajemuk {
	r.refSkoringKecerdasanMajemukDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refSkoringKecerdasanMajemuk) As(alias string) *refSkoringKecerdasanMajemuk {
	r.refSkoringKecerdasanMajemukDo.DO = *(r.refSkoringKecerdasanMajemukDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refSkoringKecerdasanMajemuk) updateTableName(table string) *refSkoringKecerdasanMajemuk {
	r.ALL = field.NewAsterisk(table)
	r.IDSkoringKecerdasanMajemuk = field.NewInt32(table, "id_skoring_kecerdasan_majemuk")
	r.IDQuiz = field.NewInt32(table, "id_quiz")
	r.IDUser = field.NewInt32(table, "id_user")
	r.No = field.NewString(table, "no")
	r.B1 = field.NewInt32(table, "b1")
	r.B2 = field.NewInt32(table, "b2")
	r.B3 = field.NewInt32(table, "b3")
	r.B4 = field.NewInt32(table, "b4")
	r.B5 = field.NewInt32(table, "b5")
	r.B6 = field.NewInt32(table, "b6")
	r.B7 = field.NewInt32(table, "b7")
	r.B8 = field.NewInt32(table, "b8")
	r.B9 = field.NewInt32(table, "b9")
	r.Total = field.NewInt32(table, "total")
	r.Rangking = field.NewInt32(table, "rangking")

	r.fillFieldMap()

	return r
}

func (r *refSkoringKecerdasanMajemuk) WithContext(ctx context.Context) *refSkoringKecerdasanMajemukDo {
	return r.refSkoringKecerdasanMajemukDo.WithContext(ctx)
}

func (r refSkoringKecerdasanMajemuk) TableName() string {
	return r.refSkoringKecerdasanMajemukDo.TableName()
}

func (r refSkoringKecerdasanMajemuk) Alias() string { return r.refSkoringKecerdasanMajemukDo.Alias() }

func (r refSkoringKecerdasanMajemuk) Columns(cols ...field.Expr) gen.Columns {
	return r.refSkoringKecerdasanMajemukDo.Columns(cols...)
}

func (r *refSkoringKecerdasanMajemuk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refSkoringKecerdasanMajemuk) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["id_skoring_kecerdasan_majemuk"] = r.IDSkoringKecerdasanMajemuk
	r.fieldMap["id_quiz"] = r.IDQuiz
	r.fieldMap["id_user"] = r.IDUser
	r.fieldMap["no"] = r.No
	r.fieldMap["b1"] = r.B1
	r.fieldMap["b2"] = r.B2
	r.fieldMap["b3"] = r.B3
	r.fieldMap["b4"] = r.B4
	r.fieldMap["b5"] = r.B5
	r.fieldMap["b6"] = r.B6
	r.fieldMap["b7"] = r.B7
	r.fieldMap["b8"] = r.B8
	r.fieldMap["b9"] = r.B9
	r.fieldMap["total"] = r.Total
	r.fieldMap["rangking"] = r.Rangking
}

func (r refSkoringKecerdasanMajemuk) clone(db *gorm.DB) refSkoringKecerdasanMajemuk {
	r.refSkoringKecerdasanMajemukDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refSkoringKecerdasanMajemuk) replaceDB(db *gorm.DB) refSkoringKecerdasanMajemuk {
	r.refSkoringKecerdasanMajemukDo.ReplaceDB(db)
	return r
}

type refSkoringKecerdasanMajemukDo struct{ gen.DO }

func (r refSkoringKecerdasanMajemukDo) Debug() *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Debug())
}

func (r refSkoringKecerdasanMajemukDo) WithContext(ctx context.Context) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refSkoringKecerdasanMajemukDo) ReadDB() *refSkoringKecerdasanMajemukDo {
	return r.Clauses(dbresolver.Read)
}

func (r refSkoringKecerdasanMajemukDo) WriteDB() *refSkoringKecerdasanMajemukDo {
	return r.Clauses(dbresolver.Write)
}

func (r refSkoringKecerdasanMajemukDo) Session(config *gorm.Session) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Session(config))
}

func (r refSkoringKecerdasanMajemukDo) Clauses(conds ...clause.Expression) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refSkoringKecerdasanMajemukDo) Returning(value interface{}, columns ...string) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refSkoringKecerdasanMajemukDo) Not(conds ...gen.Condition) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refSkoringKecerdasanMajemukDo) Or(conds ...gen.Condition) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refSkoringKecerdasanMajemukDo) Select(conds ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refSkoringKecerdasanMajemukDo) Where(conds ...gen.Condition) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refSkoringKecerdasanMajemukDo) Order(conds ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refSkoringKecerdasanMajemukDo) Distinct(cols ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refSkoringKecerdasanMajemukDo) Omit(cols ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refSkoringKecerdasanMajemukDo) Join(table schema.Tabler, on ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refSkoringKecerdasanMajemukDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refSkoringKecerdasanMajemukDo) RightJoin(table schema.Tabler, on ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refSkoringKecerdasanMajemukDo) Group(cols ...field.Expr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refSkoringKecerdasanMajemukDo) Having(conds ...gen.Condition) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refSkoringKecerdasanMajemukDo) Limit(limit int) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refSkoringKecerdasanMajemukDo) Offset(offset int) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refSkoringKecerdasanMajemukDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refSkoringKecerdasanMajemukDo) Unscoped() *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refSkoringKecerdasanMajemukDo) Create(values ...*entity.RefSkoringKecerdasanMajemuk) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refSkoringKecerdasanMajemukDo) CreateInBatches(values []*entity.RefSkoringKecerdasanMajemuk, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refSkoringKecerdasanMajemukDo) Save(values ...*entity.RefSkoringKecerdasanMajemuk) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refSkoringKecerdasanMajemukDo) First() (*entity.RefSkoringKecerdasanMajemuk, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKecerdasanMajemuk), nil
	}
}

func (r refSkoringKecerdasanMajemukDo) Take() (*entity.RefSkoringKecerdasanMajemuk, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKecerdasanMajemuk), nil
	}
}

func (r refSkoringKecerdasanMajemukDo) Last() (*entity.RefSkoringKecerdasanMajemuk, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKecerdasanMajemuk), nil
	}
}

func (r refSkoringKecerdasanMajemukDo) Find() ([]*entity.RefSkoringKecerdasanMajemuk, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefSkoringKecerdasanMajemuk), err
}

func (r refSkoringKecerdasanMajemukDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefSkoringKecerdasanMajemuk, err error) {
	buf := make([]*entity.RefSkoringKecerdasanMajemuk, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refSkoringKecerdasanMajemukDo) FindInBatches(result *[]*entity.RefSkoringKecerdasanMajemuk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refSkoringKecerdasanMajemukDo) Attrs(attrs ...field.AssignExpr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refSkoringKecerdasanMajemukDo) Assign(attrs ...field.AssignExpr) *refSkoringKecerdasanMajemukDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refSkoringKecerdasanMajemukDo) Joins(fields ...field.RelationField) *refSkoringKecerdasanMajemukDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refSkoringKecerdasanMajemukDo) Preload(fields ...field.RelationField) *refSkoringKecerdasanMajemukDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refSkoringKecerdasanMajemukDo) FirstOrInit() (*entity.RefSkoringKecerdasanMajemuk, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKecerdasanMajemuk), nil
	}
}

func (r refSkoringKecerdasanMajemukDo) FirstOrCreate() (*entity.RefSkoringKecerdasanMajemuk, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefSkoringKecerdasanMajemuk), nil
	}
}

func (r refSkoringKecerdasanMajemukDo) FindByPage(offset int, limit int) (result []*entity.RefSkoringKecerdasanMajemuk, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refSkoringKecerdasanMajemukDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refSkoringKecerdasanMajemukDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refSkoringKecerdasanMajemukDo) Delete(models ...*entity.RefSkoringKecerdasanMajemuk) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refSkoringKecerdasanMajemukDo) withDO(do gen.Dao) *refSkoringKecerdasanMajemukDo {
	r.DO = *do.(*gen.DO)
	return r
}
