// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newPublishCron(db *gorm.DB, opts ...gen.DOOption) publishCron {
	_publishCron := publishCron{}

	_publishCron.publishCronDo.UseDB(db, opts...)
	_publishCron.publishCronDo.UseModel(&entity.PublishCron{})

	tableName := _publishCron.publishCronDo.TableName()
	_publishCron.ALL = field.NewAsterisk(tableName)
	_publishCron.ID = field.NewInt32(tableName, "id")
	_publishCron.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_publishCron.Status = field.NewInt32(tableName, "status")

	_publishCron.fillFieldMap()

	return _publishCron
}

type publishCron struct {
	publishCronDo publishCronDo

	ALL    field.Asterisk
	ID     field.Int32
	IDQuiz field.Int32
	Status field.Int32

	fieldMap map[string]field.Expr
}

func (p publishCron) Table(newTableName string) *publishCron {
	p.publishCronDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publishCron) As(alias string) *publishCron {
	p.publishCronDo.DO = *(p.publishCronDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publishCron) updateTableName(table string) *publishCron {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.IDQuiz = field.NewInt32(table, "id_quiz")
	p.Status = field.NewInt32(table, "status")

	p.fillFieldMap()

	return p
}

func (p *publishCron) WithContext(ctx context.Context) *publishCronDo {
	return p.publishCronDo.WithContext(ctx)
}

func (p publishCron) TableName() string { return p.publishCronDo.TableName() }

func (p publishCron) Alias() string { return p.publishCronDo.Alias() }

func (p publishCron) Columns(cols ...field.Expr) gen.Columns { return p.publishCronDo.Columns(cols...) }

func (p *publishCron) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publishCron) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["id_quiz"] = p.IDQuiz
	p.fieldMap["status"] = p.Status
}

func (p publishCron) clone(db *gorm.DB) publishCron {
	p.publishCronDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publishCron) replaceDB(db *gorm.DB) publishCron {
	p.publishCronDo.ReplaceDB(db)
	return p
}

type publishCronDo struct{ gen.DO }

func (p publishCronDo) Debug() *publishCronDo {
	return p.withDO(p.DO.Debug())
}

func (p publishCronDo) WithContext(ctx context.Context) *publishCronDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishCronDo) ReadDB() *publishCronDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishCronDo) WriteDB() *publishCronDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishCronDo) Session(config *gorm.Session) *publishCronDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishCronDo) Clauses(conds ...clause.Expression) *publishCronDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishCronDo) Returning(value interface{}, columns ...string) *publishCronDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishCronDo) Not(conds ...gen.Condition) *publishCronDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishCronDo) Or(conds ...gen.Condition) *publishCronDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishCronDo) Select(conds ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishCronDo) Where(conds ...gen.Condition) *publishCronDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishCronDo) Order(conds ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishCronDo) Distinct(cols ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishCronDo) Omit(cols ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishCronDo) Join(table schema.Tabler, on ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishCronDo) LeftJoin(table schema.Tabler, on ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishCronDo) RightJoin(table schema.Tabler, on ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishCronDo) Group(cols ...field.Expr) *publishCronDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishCronDo) Having(conds ...gen.Condition) *publishCronDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishCronDo) Limit(limit int) *publishCronDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishCronDo) Offset(offset int) *publishCronDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishCronDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *publishCronDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishCronDo) Unscoped() *publishCronDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishCronDo) Create(values ...*entity.PublishCron) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishCronDo) CreateInBatches(values []*entity.PublishCron, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishCronDo) Save(values ...*entity.PublishCron) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishCronDo) First() (*entity.PublishCron, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PublishCron), nil
	}
}

func (p publishCronDo) Take() (*entity.PublishCron, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PublishCron), nil
	}
}

func (p publishCronDo) Last() (*entity.PublishCron, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PublishCron), nil
	}
}

func (p publishCronDo) Find() ([]*entity.PublishCron, error) {
	result, err := p.DO.Find()
	return result.([]*entity.PublishCron), err
}

func (p publishCronDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.PublishCron, err error) {
	buf := make([]*entity.PublishCron, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishCronDo) FindInBatches(result *[]*entity.PublishCron, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishCronDo) Attrs(attrs ...field.AssignExpr) *publishCronDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishCronDo) Assign(attrs ...field.AssignExpr) *publishCronDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishCronDo) Joins(fields ...field.RelationField) *publishCronDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishCronDo) Preload(fields ...field.RelationField) *publishCronDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishCronDo) FirstOrInit() (*entity.PublishCron, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PublishCron), nil
	}
}

func (p publishCronDo) FirstOrCreate() (*entity.PublishCron, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.PublishCron), nil
	}
}

func (p publishCronDo) FindByPage(offset int, limit int) (result []*entity.PublishCron, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishCronDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishCronDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishCronDo) Delete(models ...*entity.PublishCron) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishCronDo) withDO(do gen.Dao) *publishCronDo {
	p.DO = *do.(*gen.DO)
	return p
}
