// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkoringMinatLengkap(db *gorm.DB, opts ...gen.DOOption) skoringMinatLengkap {
	_skoringMinatLengkap := skoringMinatLengkap{}

	_skoringMinatLengkap.skoringMinatLengkapDo.UseDB(db, opts...)
	_skoringMinatLengkap.skoringMinatLengkapDo.UseModel(&entity.SkoringMinatLengkap{})

	tableName := _skoringMinatLengkap.skoringMinatLengkapDo.TableName()
	_skoringMinatLengkap.ALL = field.NewAsterisk(tableName)
	_skoringMinatLengkap.ID = field.NewInt32(tableName, "id")
	_skoringMinatLengkap.IDUser = field.NewInt32(tableName, "id_user")
	_skoringMinatLengkap.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skoringMinatLengkap.TpaIu = field.NewInt32(tableName, "tpa_iu")
	_skoringMinatLengkap.TpaPv = field.NewInt32(tableName, "tpa_pv")
	_skoringMinatLengkap.TpaPk = field.NewInt32(tableName, "tpa_pk")
	_skoringMinatLengkap.TpaPa = field.NewInt32(tableName, "tpa_pa")
	_skoringMinatLengkap.TpaPs = field.NewInt32(tableName, "tpa_ps")
	_skoringMinatLengkap.TpaPm = field.NewInt32(tableName, "tpa_pm")
	_skoringMinatLengkap.TpaKt = field.NewInt32(tableName, "tpa_kt")
	_skoringMinatLengkap.TpaIq = field.NewInt32(tableName, "tpa_iq")
	_skoringMinatLengkap.SkorIq = field.NewFloat32(tableName, "skor_iq")
	_skoringMinatLengkap.MinatIpa1 = field.NewInt32(tableName, "minat_ipa1")
	_skoringMinatLengkap.MinatIpa2 = field.NewInt32(tableName, "minat_ipa2")
	_skoringMinatLengkap.MinatIpa3 = field.NewInt32(tableName, "minat_ipa3")
	_skoringMinatLengkap.MinatIpa4 = field.NewInt32(tableName, "minat_ipa4")
	_skoringMinatLengkap.SikapAgm = field.NewInt32(tableName, "sikap_agm")
	_skoringMinatLengkap.SikapPkn = field.NewInt32(tableName, "sikap_pkn")
	_skoringMinatLengkap.SikapInd = field.NewInt32(tableName, "sikap_ind")
	_skoringMinatLengkap.SikapEng = field.NewInt32(tableName, "sikap_eng")
	_skoringMinatLengkap.SikapMat = field.NewInt32(tableName, "sikap_mat")
	_skoringMinatLengkap.SikapFis = field.NewInt32(tableName, "sikap_fis")
	_skoringMinatLengkap.SikapBio = field.NewInt32(tableName, "sikap_bio")
	_skoringMinatLengkap.SikapEko = field.NewInt32(tableName, "sikap_eko")
	_skoringMinatLengkap.SikapSej = field.NewInt32(tableName, "sikap_sej")
	_skoringMinatLengkap.SikapGeo = field.NewInt32(tableName, "sikap_geo")
	_skoringMinatLengkap.TipojungE = field.NewInt32(tableName, "tipojung_e")
	_skoringMinatLengkap.TipojungI = field.NewInt32(tableName, "tipojung_i")
	_skoringMinatLengkap.TipojungS = field.NewInt32(tableName, "tipojung_s")
	_skoringMinatLengkap.TipojungN = field.NewInt32(tableName, "tipojung_n")
	_skoringMinatLengkap.TipojungT = field.NewInt32(tableName, "tipojung_t")
	_skoringMinatLengkap.TipojungF = field.NewInt32(tableName, "tipojung_f")
	_skoringMinatLengkap.TipojungJ = field.NewInt32(tableName, "tipojung_j")
	_skoringMinatLengkap.TipojungP = field.NewInt32(tableName, "tipojung_p")
	_skoringMinatLengkap.TipojungKode = field.NewString(tableName, "tipojung_kode")
	_skoringMinatLengkap.PribadiMotivasi = field.NewInt32(tableName, "pribadi_motivasi")
	_skoringMinatLengkap.PribadiJuang = field.NewInt32(tableName, "pribadi_juang")
	_skoringMinatLengkap.PribadiYakin = field.NewInt32(tableName, "pribadi_yakin")
	_skoringMinatLengkap.PribadiPercaya = field.NewInt32(tableName, "pribadi_percaya")
	_skoringMinatLengkap.PribadiKonsep = field.NewInt32(tableName, "pribadi_konsep")
	_skoringMinatLengkap.PribadiKreativitas = field.NewInt32(tableName, "pribadi_kreativitas")
	_skoringMinatLengkap.PribadiMimpin = field.NewInt32(tableName, "pribadi_mimpin")
	_skoringMinatLengkap.PribadiEntrepreneur = field.NewInt32(tableName, "pribadi_entrepreneur")
	_skoringMinatLengkap.PribadiStress = field.NewInt32(tableName, "pribadi_stress")
	_skoringMinatLengkap.PribadiEmosi = field.NewInt32(tableName, "pribadi_emosi")
	_skoringMinatLengkap.PribadiSosial = field.NewInt32(tableName, "pribadi_sosial")
	_skoringMinatLengkap.PribadiEmpati = field.NewInt32(tableName, "pribadi_empati")
	_skoringMinatLengkap.SelesaiSkoring = field.NewInt32(tableName, "selesai_skoring")
	_skoringMinatLengkap.MinatIpa5 = field.NewInt16(tableName, "minat_ipa5")
	_skoringMinatLengkap.MinatIps1 = field.NewInt16(tableName, "minat_ips1")
	_skoringMinatLengkap.MinatIps2 = field.NewInt16(tableName, "minat_ips2")
	_skoringMinatLengkap.MinatIps3 = field.NewInt16(tableName, "minat_ips3")
	_skoringMinatLengkap.MinatIps4 = field.NewInt16(tableName, "minat_ips4")
	_skoringMinatLengkap.MinatIps5 = field.NewInt16(tableName, "minat_ips5")
	_skoringMinatLengkap.MinatDinas1 = field.NewString(tableName, "minat_dinas1")
	_skoringMinatLengkap.MinatDinas2 = field.NewString(tableName, "minat_dinas2")
	_skoringMinatLengkap.MinatDinas3 = field.NewString(tableName, "minat_dinas3")
	_skoringMinatLengkap.SuasanaKerja1 = field.NewString(tableName, "suasana_kerja1")
	_skoringMinatLengkap.SuasanaKerja2 = field.NewString(tableName, "suasana_kerja2")
	_skoringMinatLengkap.SuasanaKerja3 = field.NewString(tableName, "suasana_kerja3")

	_skoringMinatLengkap.fillFieldMap()

	return _skoringMinatLengkap
}

type skoringMinatLengkap struct {
	skoringMinatLengkapDo skoringMinatLengkapDo

	ALL                 field.Asterisk
	ID                  field.Int32
	IDUser              field.Int32
	IDQuiz              field.Int32
	TpaIu               field.Int32
	TpaPv               field.Int32
	TpaPk               field.Int32
	TpaPa               field.Int32
	TpaPs               field.Int32
	TpaPm               field.Int32
	TpaKt               field.Int32
	TpaIq               field.Int32
	SkorIq              field.Float32
	MinatIpa1           field.Int32
	MinatIpa2           field.Int32
	MinatIpa3           field.Int32
	MinatIpa4           field.Int32
	SikapAgm            field.Int32
	SikapPkn            field.Int32
	SikapInd            field.Int32
	SikapEng            field.Int32
	SikapMat            field.Int32
	SikapFis            field.Int32
	SikapBio            field.Int32
	SikapEko            field.Int32
	SikapSej            field.Int32
	SikapGeo            field.Int32
	TipojungE           field.Int32
	TipojungI           field.Int32
	TipojungS           field.Int32
	TipojungN           field.Int32
	TipojungT           field.Int32
	TipojungF           field.Int32
	TipojungJ           field.Int32
	TipojungP           field.Int32
	TipojungKode        field.String
	PribadiMotivasi     field.Int32
	PribadiJuang        field.Int32
	PribadiYakin        field.Int32
	PribadiPercaya      field.Int32
	PribadiKonsep       field.Int32
	PribadiKreativitas  field.Int32
	PribadiMimpin       field.Int32
	PribadiEntrepreneur field.Int32
	PribadiStress       field.Int32
	PribadiEmosi        field.Int32
	PribadiSosial       field.Int32
	PribadiEmpati       field.Int32
	SelesaiSkoring      field.Int32
	MinatIpa5           field.Int16
	MinatIps1           field.Int16
	MinatIps2           field.Int16
	MinatIps3           field.Int16
	MinatIps4           field.Int16
	MinatIps5           field.Int16
	MinatDinas1         field.String
	MinatDinas2         field.String
	MinatDinas3         field.String
	SuasanaKerja1       field.String
	SuasanaKerja2       field.String
	SuasanaKerja3       field.String

	fieldMap map[string]field.Expr
}

func (s skoringMinatLengkap) Table(newTableName string) *skoringMinatLengkap {
	s.skoringMinatLengkapDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skoringMinatLengkap) As(alias string) *skoringMinatLengkap {
	s.skoringMinatLengkapDo.DO = *(s.skoringMinatLengkapDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skoringMinatLengkap) updateTableName(table string) *skoringMinatLengkap {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.TpaIu = field.NewInt32(table, "tpa_iu")
	s.TpaPv = field.NewInt32(table, "tpa_pv")
	s.TpaPk = field.NewInt32(table, "tpa_pk")
	s.TpaPa = field.NewInt32(table, "tpa_pa")
	s.TpaPs = field.NewInt32(table, "tpa_ps")
	s.TpaPm = field.NewInt32(table, "tpa_pm")
	s.TpaKt = field.NewInt32(table, "tpa_kt")
	s.TpaIq = field.NewInt32(table, "tpa_iq")
	s.SkorIq = field.NewFloat32(table, "skor_iq")
	s.MinatIpa1 = field.NewInt32(table, "minat_ipa1")
	s.MinatIpa2 = field.NewInt32(table, "minat_ipa2")
	s.MinatIpa3 = field.NewInt32(table, "minat_ipa3")
	s.MinatIpa4 = field.NewInt32(table, "minat_ipa4")
	s.SikapAgm = field.NewInt32(table, "sikap_agm")
	s.SikapPkn = field.NewInt32(table, "sikap_pkn")
	s.SikapInd = field.NewInt32(table, "sikap_ind")
	s.SikapEng = field.NewInt32(table, "sikap_eng")
	s.SikapMat = field.NewInt32(table, "sikap_mat")
	s.SikapFis = field.NewInt32(table, "sikap_fis")
	s.SikapBio = field.NewInt32(table, "sikap_bio")
	s.SikapEko = field.NewInt32(table, "sikap_eko")
	s.SikapSej = field.NewInt32(table, "sikap_sej")
	s.SikapGeo = field.NewInt32(table, "sikap_geo")
	s.TipojungE = field.NewInt32(table, "tipojung_e")
	s.TipojungI = field.NewInt32(table, "tipojung_i")
	s.TipojungS = field.NewInt32(table, "tipojung_s")
	s.TipojungN = field.NewInt32(table, "tipojung_n")
	s.TipojungT = field.NewInt32(table, "tipojung_t")
	s.TipojungF = field.NewInt32(table, "tipojung_f")
	s.TipojungJ = field.NewInt32(table, "tipojung_j")
	s.TipojungP = field.NewInt32(table, "tipojung_p")
	s.TipojungKode = field.NewString(table, "tipojung_kode")
	s.PribadiMotivasi = field.NewInt32(table, "pribadi_motivasi")
	s.PribadiJuang = field.NewInt32(table, "pribadi_juang")
	s.PribadiYakin = field.NewInt32(table, "pribadi_yakin")
	s.PribadiPercaya = field.NewInt32(table, "pribadi_percaya")
	s.PribadiKonsep = field.NewInt32(table, "pribadi_konsep")
	s.PribadiKreativitas = field.NewInt32(table, "pribadi_kreativitas")
	s.PribadiMimpin = field.NewInt32(table, "pribadi_mimpin")
	s.PribadiEntrepreneur = field.NewInt32(table, "pribadi_entrepreneur")
	s.PribadiStress = field.NewInt32(table, "pribadi_stress")
	s.PribadiEmosi = field.NewInt32(table, "pribadi_emosi")
	s.PribadiSosial = field.NewInt32(table, "pribadi_sosial")
	s.PribadiEmpati = field.NewInt32(table, "pribadi_empati")
	s.SelesaiSkoring = field.NewInt32(table, "selesai_skoring")
	s.MinatIpa5 = field.NewInt16(table, "minat_ipa5")
	s.MinatIps1 = field.NewInt16(table, "minat_ips1")
	s.MinatIps2 = field.NewInt16(table, "minat_ips2")
	s.MinatIps3 = field.NewInt16(table, "minat_ips3")
	s.MinatIps4 = field.NewInt16(table, "minat_ips4")
	s.MinatIps5 = field.NewInt16(table, "minat_ips5")
	s.MinatDinas1 = field.NewString(table, "minat_dinas1")
	s.MinatDinas2 = field.NewString(table, "minat_dinas2")
	s.MinatDinas3 = field.NewString(table, "minat_dinas3")
	s.SuasanaKerja1 = field.NewString(table, "suasana_kerja1")
	s.SuasanaKerja2 = field.NewString(table, "suasana_kerja2")
	s.SuasanaKerja3 = field.NewString(table, "suasana_kerja3")

	s.fillFieldMap()

	return s
}

func (s *skoringMinatLengkap) WithContext(ctx context.Context) *skoringMinatLengkapDo {
	return s.skoringMinatLengkapDo.WithContext(ctx)
}

func (s skoringMinatLengkap) TableName() string { return s.skoringMinatLengkapDo.TableName() }

func (s skoringMinatLengkap) Alias() string { return s.skoringMinatLengkapDo.Alias() }

func (s skoringMinatLengkap) Columns(cols ...field.Expr) gen.Columns {
	return s.skoringMinatLengkapDo.Columns(cols...)
}

func (s *skoringMinatLengkap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skoringMinatLengkap) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 60)
	s.fieldMap["id"] = s.ID
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["tpa_iu"] = s.TpaIu
	s.fieldMap["tpa_pv"] = s.TpaPv
	s.fieldMap["tpa_pk"] = s.TpaPk
	s.fieldMap["tpa_pa"] = s.TpaPa
	s.fieldMap["tpa_ps"] = s.TpaPs
	s.fieldMap["tpa_pm"] = s.TpaPm
	s.fieldMap["tpa_kt"] = s.TpaKt
	s.fieldMap["tpa_iq"] = s.TpaIq
	s.fieldMap["skor_iq"] = s.SkorIq
	s.fieldMap["minat_ipa1"] = s.MinatIpa1
	s.fieldMap["minat_ipa2"] = s.MinatIpa2
	s.fieldMap["minat_ipa3"] = s.MinatIpa3
	s.fieldMap["minat_ipa4"] = s.MinatIpa4
	s.fieldMap["sikap_agm"] = s.SikapAgm
	s.fieldMap["sikap_pkn"] = s.SikapPkn
	s.fieldMap["sikap_ind"] = s.SikapInd
	s.fieldMap["sikap_eng"] = s.SikapEng
	s.fieldMap["sikap_mat"] = s.SikapMat
	s.fieldMap["sikap_fis"] = s.SikapFis
	s.fieldMap["sikap_bio"] = s.SikapBio
	s.fieldMap["sikap_eko"] = s.SikapEko
	s.fieldMap["sikap_sej"] = s.SikapSej
	s.fieldMap["sikap_geo"] = s.SikapGeo
	s.fieldMap["tipojung_e"] = s.TipojungE
	s.fieldMap["tipojung_i"] = s.TipojungI
	s.fieldMap["tipojung_s"] = s.TipojungS
	s.fieldMap["tipojung_n"] = s.TipojungN
	s.fieldMap["tipojung_t"] = s.TipojungT
	s.fieldMap["tipojung_f"] = s.TipojungF
	s.fieldMap["tipojung_j"] = s.TipojungJ
	s.fieldMap["tipojung_p"] = s.TipojungP
	s.fieldMap["tipojung_kode"] = s.TipojungKode
	s.fieldMap["pribadi_motivasi"] = s.PribadiMotivasi
	s.fieldMap["pribadi_juang"] = s.PribadiJuang
	s.fieldMap["pribadi_yakin"] = s.PribadiYakin
	s.fieldMap["pribadi_percaya"] = s.PribadiPercaya
	s.fieldMap["pribadi_konsep"] = s.PribadiKonsep
	s.fieldMap["pribadi_kreativitas"] = s.PribadiKreativitas
	s.fieldMap["pribadi_mimpin"] = s.PribadiMimpin
	s.fieldMap["pribadi_entrepreneur"] = s.PribadiEntrepreneur
	s.fieldMap["pribadi_stress"] = s.PribadiStress
	s.fieldMap["pribadi_emosi"] = s.PribadiEmosi
	s.fieldMap["pribadi_sosial"] = s.PribadiSosial
	s.fieldMap["pribadi_empati"] = s.PribadiEmpati
	s.fieldMap["selesai_skoring"] = s.SelesaiSkoring
	s.fieldMap["minat_ipa5"] = s.MinatIpa5
	s.fieldMap["minat_ips1"] = s.MinatIps1
	s.fieldMap["minat_ips2"] = s.MinatIps2
	s.fieldMap["minat_ips3"] = s.MinatIps3
	s.fieldMap["minat_ips4"] = s.MinatIps4
	s.fieldMap["minat_ips5"] = s.MinatIps5
	s.fieldMap["minat_dinas1"] = s.MinatDinas1
	s.fieldMap["minat_dinas2"] = s.MinatDinas2
	s.fieldMap["minat_dinas3"] = s.MinatDinas3
	s.fieldMap["suasana_kerja1"] = s.SuasanaKerja1
	s.fieldMap["suasana_kerja2"] = s.SuasanaKerja2
	s.fieldMap["suasana_kerja3"] = s.SuasanaKerja3
}

func (s skoringMinatLengkap) clone(db *gorm.DB) skoringMinatLengkap {
	s.skoringMinatLengkapDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skoringMinatLengkap) replaceDB(db *gorm.DB) skoringMinatLengkap {
	s.skoringMinatLengkapDo.ReplaceDB(db)
	return s
}

type skoringMinatLengkapDo struct{ gen.DO }

func (s skoringMinatLengkapDo) Debug() *skoringMinatLengkapDo {
	return s.withDO(s.DO.Debug())
}

func (s skoringMinatLengkapDo) WithContext(ctx context.Context) *skoringMinatLengkapDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skoringMinatLengkapDo) ReadDB() *skoringMinatLengkapDo {
	return s.Clauses(dbresolver.Read)
}

func (s skoringMinatLengkapDo) WriteDB() *skoringMinatLengkapDo {
	return s.Clauses(dbresolver.Write)
}

func (s skoringMinatLengkapDo) Session(config *gorm.Session) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Session(config))
}

func (s skoringMinatLengkapDo) Clauses(conds ...clause.Expression) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skoringMinatLengkapDo) Returning(value interface{}, columns ...string) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skoringMinatLengkapDo) Not(conds ...gen.Condition) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skoringMinatLengkapDo) Or(conds ...gen.Condition) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skoringMinatLengkapDo) Select(conds ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skoringMinatLengkapDo) Where(conds ...gen.Condition) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skoringMinatLengkapDo) Order(conds ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skoringMinatLengkapDo) Distinct(cols ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skoringMinatLengkapDo) Omit(cols ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skoringMinatLengkapDo) Join(table schema.Tabler, on ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skoringMinatLengkapDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skoringMinatLengkapDo) RightJoin(table schema.Tabler, on ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skoringMinatLengkapDo) Group(cols ...field.Expr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skoringMinatLengkapDo) Having(conds ...gen.Condition) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skoringMinatLengkapDo) Limit(limit int) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skoringMinatLengkapDo) Offset(offset int) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skoringMinatLengkapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skoringMinatLengkapDo) Unscoped() *skoringMinatLengkapDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skoringMinatLengkapDo) Create(values ...*entity.SkoringMinatLengkap) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skoringMinatLengkapDo) CreateInBatches(values []*entity.SkoringMinatLengkap, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skoringMinatLengkapDo) Save(values ...*entity.SkoringMinatLengkap) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skoringMinatLengkapDo) First() (*entity.SkoringMinatLengkap, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatLengkap), nil
	}
}

func (s skoringMinatLengkapDo) Take() (*entity.SkoringMinatLengkap, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatLengkap), nil
	}
}

func (s skoringMinatLengkapDo) Last() (*entity.SkoringMinatLengkap, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatLengkap), nil
	}
}

func (s skoringMinatLengkapDo) Find() ([]*entity.SkoringMinatLengkap, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkoringMinatLengkap), err
}

func (s skoringMinatLengkapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkoringMinatLengkap, err error) {
	buf := make([]*entity.SkoringMinatLengkap, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skoringMinatLengkapDo) FindInBatches(result *[]*entity.SkoringMinatLengkap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skoringMinatLengkapDo) Attrs(attrs ...field.AssignExpr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skoringMinatLengkapDo) Assign(attrs ...field.AssignExpr) *skoringMinatLengkapDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skoringMinatLengkapDo) Joins(fields ...field.RelationField) *skoringMinatLengkapDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skoringMinatLengkapDo) Preload(fields ...field.RelationField) *skoringMinatLengkapDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skoringMinatLengkapDo) FirstOrInit() (*entity.SkoringMinatLengkap, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatLengkap), nil
	}
}

func (s skoringMinatLengkapDo) FirstOrCreate() (*entity.SkoringMinatLengkap, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkoringMinatLengkap), nil
	}
}

func (s skoringMinatLengkapDo) FindByPage(offset int, limit int) (result []*entity.SkoringMinatLengkap, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skoringMinatLengkapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skoringMinatLengkapDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skoringMinatLengkapDo) Delete(models ...*entity.SkoringMinatLengkap) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skoringMinatLengkapDo) withDO(do gen.Dao) *skoringMinatLengkapDo {
	s.DO = *do.(*gen.DO)
	return s
}
