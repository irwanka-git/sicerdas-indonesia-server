// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRunningCronjob(db *gorm.DB, opts ...gen.DOOption) runningCronjob {
	_runningCronjob := runningCronjob{}

	_runningCronjob.runningCronjobDo.UseDB(db, opts...)
	_runningCronjob.runningCronjobDo.UseModel(&entity.RunningCronjob{})

	tableName := _runningCronjob.runningCronjobDo.TableName()
	_runningCronjob.ALL = field.NewAsterisk(tableName)
	_runningCronjob.IDCron = field.NewInt32(tableName, "id_cron")
	_runningCronjob.Nama = field.NewString(tableName, "nama")
	_runningCronjob.StartAt = field.NewTime(tableName, "start_at")
	_runningCronjob.FinishAt = field.NewTime(tableName, "finish_at")
	_runningCronjob.Peserta = field.NewInt32(tableName, "peserta")

	_runningCronjob.fillFieldMap()

	return _runningCronjob
}

type runningCronjob struct {
	runningCronjobDo runningCronjobDo

	ALL      field.Asterisk
	IDCron   field.Int32
	Nama     field.String
	StartAt  field.Time
	FinishAt field.Time
	Peserta  field.Int32

	fieldMap map[string]field.Expr
}

func (r runningCronjob) Table(newTableName string) *runningCronjob {
	r.runningCronjobDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r runningCronjob) As(alias string) *runningCronjob {
	r.runningCronjobDo.DO = *(r.runningCronjobDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *runningCronjob) updateTableName(table string) *runningCronjob {
	r.ALL = field.NewAsterisk(table)
	r.IDCron = field.NewInt32(table, "id_cron")
	r.Nama = field.NewString(table, "nama")
	r.StartAt = field.NewTime(table, "start_at")
	r.FinishAt = field.NewTime(table, "finish_at")
	r.Peserta = field.NewInt32(table, "peserta")

	r.fillFieldMap()

	return r
}

func (r *runningCronjob) WithContext(ctx context.Context) *runningCronjobDo {
	return r.runningCronjobDo.WithContext(ctx)
}

func (r runningCronjob) TableName() string { return r.runningCronjobDo.TableName() }

func (r runningCronjob) Alias() string { return r.runningCronjobDo.Alias() }

func (r runningCronjob) Columns(cols ...field.Expr) gen.Columns {
	return r.runningCronjobDo.Columns(cols...)
}

func (r *runningCronjob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *runningCronjob) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id_cron"] = r.IDCron
	r.fieldMap["nama"] = r.Nama
	r.fieldMap["start_at"] = r.StartAt
	r.fieldMap["finish_at"] = r.FinishAt
	r.fieldMap["peserta"] = r.Peserta
}

func (r runningCronjob) clone(db *gorm.DB) runningCronjob {
	r.runningCronjobDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r runningCronjob) replaceDB(db *gorm.DB) runningCronjob {
	r.runningCronjobDo.ReplaceDB(db)
	return r
}

type runningCronjobDo struct{ gen.DO }

func (r runningCronjobDo) Debug() *runningCronjobDo {
	return r.withDO(r.DO.Debug())
}

func (r runningCronjobDo) WithContext(ctx context.Context) *runningCronjobDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r runningCronjobDo) ReadDB() *runningCronjobDo {
	return r.Clauses(dbresolver.Read)
}

func (r runningCronjobDo) WriteDB() *runningCronjobDo {
	return r.Clauses(dbresolver.Write)
}

func (r runningCronjobDo) Session(config *gorm.Session) *runningCronjobDo {
	return r.withDO(r.DO.Session(config))
}

func (r runningCronjobDo) Clauses(conds ...clause.Expression) *runningCronjobDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r runningCronjobDo) Returning(value interface{}, columns ...string) *runningCronjobDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r runningCronjobDo) Not(conds ...gen.Condition) *runningCronjobDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r runningCronjobDo) Or(conds ...gen.Condition) *runningCronjobDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r runningCronjobDo) Select(conds ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r runningCronjobDo) Where(conds ...gen.Condition) *runningCronjobDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r runningCronjobDo) Order(conds ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r runningCronjobDo) Distinct(cols ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r runningCronjobDo) Omit(cols ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r runningCronjobDo) Join(table schema.Tabler, on ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r runningCronjobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r runningCronjobDo) RightJoin(table schema.Tabler, on ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r runningCronjobDo) Group(cols ...field.Expr) *runningCronjobDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r runningCronjobDo) Having(conds ...gen.Condition) *runningCronjobDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r runningCronjobDo) Limit(limit int) *runningCronjobDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r runningCronjobDo) Offset(offset int) *runningCronjobDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r runningCronjobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *runningCronjobDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r runningCronjobDo) Unscoped() *runningCronjobDo {
	return r.withDO(r.DO.Unscoped())
}

func (r runningCronjobDo) Create(values ...*entity.RunningCronjob) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r runningCronjobDo) CreateInBatches(values []*entity.RunningCronjob, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r runningCronjobDo) Save(values ...*entity.RunningCronjob) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r runningCronjobDo) First() (*entity.RunningCronjob, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunningCronjob), nil
	}
}

func (r runningCronjobDo) Take() (*entity.RunningCronjob, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunningCronjob), nil
	}
}

func (r runningCronjobDo) Last() (*entity.RunningCronjob, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunningCronjob), nil
	}
}

func (r runningCronjobDo) Find() ([]*entity.RunningCronjob, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RunningCronjob), err
}

func (r runningCronjobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RunningCronjob, err error) {
	buf := make([]*entity.RunningCronjob, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r runningCronjobDo) FindInBatches(result *[]*entity.RunningCronjob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r runningCronjobDo) Attrs(attrs ...field.AssignExpr) *runningCronjobDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r runningCronjobDo) Assign(attrs ...field.AssignExpr) *runningCronjobDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r runningCronjobDo) Joins(fields ...field.RelationField) *runningCronjobDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r runningCronjobDo) Preload(fields ...field.RelationField) *runningCronjobDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r runningCronjobDo) FirstOrInit() (*entity.RunningCronjob, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunningCronjob), nil
	}
}

func (r runningCronjobDo) FirstOrCreate() (*entity.RunningCronjob, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunningCronjob), nil
	}
}

func (r runningCronjobDo) FindByPage(offset int, limit int) (result []*entity.RunningCronjob, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r runningCronjobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r runningCronjobDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r runningCronjobDo) Delete(models ...*entity.RunningCronjob) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *runningCronjobDo) withDO(do gen.Dao) *runningCronjobDo {
	r.DO = *do.(*gen.DO)
	return r
}
