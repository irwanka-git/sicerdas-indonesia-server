// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefKelompokTmi(db *gorm.DB, opts ...gen.DOOption) refKelompokTmi {
	_refKelompokTmi := refKelompokTmi{}

	_refKelompokTmi.refKelompokTmiDo.UseDB(db, opts...)
	_refKelompokTmi.refKelompokTmiDo.UseModel(&entity.RefKelompokTmi{})

	tableName := _refKelompokTmi.refKelompokTmiDo.TableName()
	_refKelompokTmi.ALL = field.NewAsterisk(tableName)
	_refKelompokTmi.Kelompok = field.NewString(tableName, "kelompok")
	_refKelompokTmi.FieldSkoring = field.NewString(tableName, "field_skoring")

	_refKelompokTmi.fillFieldMap()

	return _refKelompokTmi
}

type refKelompokTmi struct {
	refKelompokTmiDo refKelompokTmiDo

	ALL          field.Asterisk
	Kelompok     field.String
	FieldSkoring field.String

	fieldMap map[string]field.Expr
}

func (r refKelompokTmi) Table(newTableName string) *refKelompokTmi {
	r.refKelompokTmiDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refKelompokTmi) As(alias string) *refKelompokTmi {
	r.refKelompokTmiDo.DO = *(r.refKelompokTmiDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refKelompokTmi) updateTableName(table string) *refKelompokTmi {
	r.ALL = field.NewAsterisk(table)
	r.Kelompok = field.NewString(table, "kelompok")
	r.FieldSkoring = field.NewString(table, "field_skoring")

	r.fillFieldMap()

	return r
}

func (r *refKelompokTmi) WithContext(ctx context.Context) *refKelompokTmiDo {
	return r.refKelompokTmiDo.WithContext(ctx)
}

func (r refKelompokTmi) TableName() string { return r.refKelompokTmiDo.TableName() }

func (r refKelompokTmi) Alias() string { return r.refKelompokTmiDo.Alias() }

func (r refKelompokTmi) Columns(cols ...field.Expr) gen.Columns {
	return r.refKelompokTmiDo.Columns(cols...)
}

func (r *refKelompokTmi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refKelompokTmi) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["kelompok"] = r.Kelompok
	r.fieldMap["field_skoring"] = r.FieldSkoring
}

func (r refKelompokTmi) clone(db *gorm.DB) refKelompokTmi {
	r.refKelompokTmiDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refKelompokTmi) replaceDB(db *gorm.DB) refKelompokTmi {
	r.refKelompokTmiDo.ReplaceDB(db)
	return r
}

type refKelompokTmiDo struct{ gen.DO }

func (r refKelompokTmiDo) Debug() *refKelompokTmiDo {
	return r.withDO(r.DO.Debug())
}

func (r refKelompokTmiDo) WithContext(ctx context.Context) *refKelompokTmiDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refKelompokTmiDo) ReadDB() *refKelompokTmiDo {
	return r.Clauses(dbresolver.Read)
}

func (r refKelompokTmiDo) WriteDB() *refKelompokTmiDo {
	return r.Clauses(dbresolver.Write)
}

func (r refKelompokTmiDo) Session(config *gorm.Session) *refKelompokTmiDo {
	return r.withDO(r.DO.Session(config))
}

func (r refKelompokTmiDo) Clauses(conds ...clause.Expression) *refKelompokTmiDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refKelompokTmiDo) Returning(value interface{}, columns ...string) *refKelompokTmiDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refKelompokTmiDo) Not(conds ...gen.Condition) *refKelompokTmiDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refKelompokTmiDo) Or(conds ...gen.Condition) *refKelompokTmiDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refKelompokTmiDo) Select(conds ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refKelompokTmiDo) Where(conds ...gen.Condition) *refKelompokTmiDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refKelompokTmiDo) Order(conds ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refKelompokTmiDo) Distinct(cols ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refKelompokTmiDo) Omit(cols ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refKelompokTmiDo) Join(table schema.Tabler, on ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refKelompokTmiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refKelompokTmiDo) RightJoin(table schema.Tabler, on ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refKelompokTmiDo) Group(cols ...field.Expr) *refKelompokTmiDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refKelompokTmiDo) Having(conds ...gen.Condition) *refKelompokTmiDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refKelompokTmiDo) Limit(limit int) *refKelompokTmiDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refKelompokTmiDo) Offset(offset int) *refKelompokTmiDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refKelompokTmiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refKelompokTmiDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refKelompokTmiDo) Unscoped() *refKelompokTmiDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refKelompokTmiDo) Create(values ...*entity.RefKelompokTmi) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refKelompokTmiDo) CreateInBatches(values []*entity.RefKelompokTmi, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refKelompokTmiDo) Save(values ...*entity.RefKelompokTmi) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refKelompokTmiDo) First() (*entity.RefKelompokTmi, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKelompokTmi), nil
	}
}

func (r refKelompokTmiDo) Take() (*entity.RefKelompokTmi, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKelompokTmi), nil
	}
}

func (r refKelompokTmiDo) Last() (*entity.RefKelompokTmi, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKelompokTmi), nil
	}
}

func (r refKelompokTmiDo) Find() ([]*entity.RefKelompokTmi, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefKelompokTmi), err
}

func (r refKelompokTmiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefKelompokTmi, err error) {
	buf := make([]*entity.RefKelompokTmi, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refKelompokTmiDo) FindInBatches(result *[]*entity.RefKelompokTmi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refKelompokTmiDo) Attrs(attrs ...field.AssignExpr) *refKelompokTmiDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refKelompokTmiDo) Assign(attrs ...field.AssignExpr) *refKelompokTmiDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refKelompokTmiDo) Joins(fields ...field.RelationField) *refKelompokTmiDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refKelompokTmiDo) Preload(fields ...field.RelationField) *refKelompokTmiDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refKelompokTmiDo) FirstOrInit() (*entity.RefKelompokTmi, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKelompokTmi), nil
	}
}

func (r refKelompokTmiDo) FirstOrCreate() (*entity.RefKelompokTmi, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKelompokTmi), nil
	}
}

func (r refKelompokTmiDo) FindByPage(offset int, limit int) (result []*entity.RefKelompokTmi, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refKelompokTmiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refKelompokTmiDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refKelompokTmiDo) Delete(models ...*entity.RefKelompokTmi) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refKelompokTmiDo) withDO(do gen.Dao) *refKelompokTmiDo {
	r.DO = *do.(*gen.DO)
	return r
}
