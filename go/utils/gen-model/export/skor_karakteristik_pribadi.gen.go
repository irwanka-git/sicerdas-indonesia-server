// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorKarakteristikPribadi(db *gorm.DB, opts ...gen.DOOption) skorKarakteristikPribadi {
	_skorKarakteristikPribadi := skorKarakteristikPribadi{}

	_skorKarakteristikPribadi.skorKarakteristikPribadiDo.UseDB(db, opts...)
	_skorKarakteristikPribadi.skorKarakteristikPribadiDo.UseModel(&entity.SkorKarakteristikPribadi{})

	tableName := _skorKarakteristikPribadi.skorKarakteristikPribadiDo.TableName()
	_skorKarakteristikPribadi.ALL = field.NewAsterisk(tableName)
	_skorKarakteristikPribadi.IDUser = field.NewInt32(tableName, "id_user")
	_skorKarakteristikPribadi.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorKarakteristikPribadi.PribadiMotivasi = field.NewInt32(tableName, "pribadi_motivasi")
	_skorKarakteristikPribadi.PribadiJuang = field.NewInt32(tableName, "pribadi_juang")
	_skorKarakteristikPribadi.PribadiYakin = field.NewInt32(tableName, "pribadi_yakin")
	_skorKarakteristikPribadi.PribadiPercaya = field.NewInt32(tableName, "pribadi_percaya")
	_skorKarakteristikPribadi.PribadiKonsep = field.NewInt32(tableName, "pribadi_konsep")
	_skorKarakteristikPribadi.PribadiKreativitas = field.NewInt32(tableName, "pribadi_kreativitas")
	_skorKarakteristikPribadi.PribadiMimpin = field.NewInt32(tableName, "pribadi_mimpin")
	_skorKarakteristikPribadi.PribadiEntrepreneur = field.NewInt32(tableName, "pribadi_entrepreneur")
	_skorKarakteristikPribadi.PribadiStress = field.NewInt32(tableName, "pribadi_stress")
	_skorKarakteristikPribadi.PribadiEmosi = field.NewInt32(tableName, "pribadi_emosi")
	_skorKarakteristikPribadi.PribadiSosial = field.NewInt32(tableName, "pribadi_sosial")
	_skorKarakteristikPribadi.PribadiEmpati = field.NewInt32(tableName, "pribadi_empati")
	_skorKarakteristikPribadi.KlasifikasiMotivasi = field.NewString(tableName, "klasifikasi_motivasi")
	_skorKarakteristikPribadi.KlasifikasiJuang = field.NewString(tableName, "klasifikasi_juang")
	_skorKarakteristikPribadi.KlasifikasiYakin = field.NewString(tableName, "klasifikasi_yakin")
	_skorKarakteristikPribadi.KlasifikasiPercaya = field.NewString(tableName, "klasifikasi_percaya")
	_skorKarakteristikPribadi.KlasifikasiKonsep = field.NewString(tableName, "klasifikasi_konsep")
	_skorKarakteristikPribadi.KlasifikasiKreativitas = field.NewString(tableName, "klasifikasi_kreativitas")
	_skorKarakteristikPribadi.KlasifikasiMimpin = field.NewString(tableName, "klasifikasi_mimpin")
	_skorKarakteristikPribadi.KlasifikasiEntrepreneur = field.NewString(tableName, "klasifikasi_entrepreneur")
	_skorKarakteristikPribadi.KlasifikasiStress = field.NewString(tableName, "klasifikasi_stress")
	_skorKarakteristikPribadi.KlasifikasiEmosi = field.NewString(tableName, "klasifikasi_emosi")
	_skorKarakteristikPribadi.KlasifikasiSosial = field.NewString(tableName, "klasifikasi_sosial")
	_skorKarakteristikPribadi.KlasifikasiEmpati = field.NewString(tableName, "klasifikasi_empati")

	_skorKarakteristikPribadi.fillFieldMap()

	return _skorKarakteristikPribadi
}

type skorKarakteristikPribadi struct {
	skorKarakteristikPribadiDo skorKarakteristikPribadiDo

	ALL                     field.Asterisk
	IDUser                  field.Int32
	IDQuiz                  field.Int32
	PribadiMotivasi         field.Int32
	PribadiJuang            field.Int32
	PribadiYakin            field.Int32
	PribadiPercaya          field.Int32
	PribadiKonsep           field.Int32
	PribadiKreativitas      field.Int32
	PribadiMimpin           field.Int32
	PribadiEntrepreneur     field.Int32
	PribadiStress           field.Int32
	PribadiEmosi            field.Int32
	PribadiSosial           field.Int32
	PribadiEmpati           field.Int32
	KlasifikasiMotivasi     field.String
	KlasifikasiJuang        field.String
	KlasifikasiYakin        field.String
	KlasifikasiPercaya      field.String
	KlasifikasiKonsep       field.String
	KlasifikasiKreativitas  field.String
	KlasifikasiMimpin       field.String
	KlasifikasiEntrepreneur field.String
	KlasifikasiStress       field.String
	KlasifikasiEmosi        field.String
	KlasifikasiSosial       field.String
	KlasifikasiEmpati       field.String

	fieldMap map[string]field.Expr
}

func (s skorKarakteristikPribadi) Table(newTableName string) *skorKarakteristikPribadi {
	s.skorKarakteristikPribadiDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorKarakteristikPribadi) As(alias string) *skorKarakteristikPribadi {
	s.skorKarakteristikPribadiDo.DO = *(s.skorKarakteristikPribadiDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorKarakteristikPribadi) updateTableName(table string) *skorKarakteristikPribadi {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.PribadiMotivasi = field.NewInt32(table, "pribadi_motivasi")
	s.PribadiJuang = field.NewInt32(table, "pribadi_juang")
	s.PribadiYakin = field.NewInt32(table, "pribadi_yakin")
	s.PribadiPercaya = field.NewInt32(table, "pribadi_percaya")
	s.PribadiKonsep = field.NewInt32(table, "pribadi_konsep")
	s.PribadiKreativitas = field.NewInt32(table, "pribadi_kreativitas")
	s.PribadiMimpin = field.NewInt32(table, "pribadi_mimpin")
	s.PribadiEntrepreneur = field.NewInt32(table, "pribadi_entrepreneur")
	s.PribadiStress = field.NewInt32(table, "pribadi_stress")
	s.PribadiEmosi = field.NewInt32(table, "pribadi_emosi")
	s.PribadiSosial = field.NewInt32(table, "pribadi_sosial")
	s.PribadiEmpati = field.NewInt32(table, "pribadi_empati")
	s.KlasifikasiMotivasi = field.NewString(table, "klasifikasi_motivasi")
	s.KlasifikasiJuang = field.NewString(table, "klasifikasi_juang")
	s.KlasifikasiYakin = field.NewString(table, "klasifikasi_yakin")
	s.KlasifikasiPercaya = field.NewString(table, "klasifikasi_percaya")
	s.KlasifikasiKonsep = field.NewString(table, "klasifikasi_konsep")
	s.KlasifikasiKreativitas = field.NewString(table, "klasifikasi_kreativitas")
	s.KlasifikasiMimpin = field.NewString(table, "klasifikasi_mimpin")
	s.KlasifikasiEntrepreneur = field.NewString(table, "klasifikasi_entrepreneur")
	s.KlasifikasiStress = field.NewString(table, "klasifikasi_stress")
	s.KlasifikasiEmosi = field.NewString(table, "klasifikasi_emosi")
	s.KlasifikasiSosial = field.NewString(table, "klasifikasi_sosial")
	s.KlasifikasiEmpati = field.NewString(table, "klasifikasi_empati")

	s.fillFieldMap()

	return s
}

func (s *skorKarakteristikPribadi) WithContext(ctx context.Context) *skorKarakteristikPribadiDo {
	return s.skorKarakteristikPribadiDo.WithContext(ctx)
}

func (s skorKarakteristikPribadi) TableName() string { return s.skorKarakteristikPribadiDo.TableName() }

func (s skorKarakteristikPribadi) Alias() string { return s.skorKarakteristikPribadiDo.Alias() }

func (s skorKarakteristikPribadi) Columns(cols ...field.Expr) gen.Columns {
	return s.skorKarakteristikPribadiDo.Columns(cols...)
}

func (s *skorKarakteristikPribadi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorKarakteristikPribadi) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 26)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["pribadi_motivasi"] = s.PribadiMotivasi
	s.fieldMap["pribadi_juang"] = s.PribadiJuang
	s.fieldMap["pribadi_yakin"] = s.PribadiYakin
	s.fieldMap["pribadi_percaya"] = s.PribadiPercaya
	s.fieldMap["pribadi_konsep"] = s.PribadiKonsep
	s.fieldMap["pribadi_kreativitas"] = s.PribadiKreativitas
	s.fieldMap["pribadi_mimpin"] = s.PribadiMimpin
	s.fieldMap["pribadi_entrepreneur"] = s.PribadiEntrepreneur
	s.fieldMap["pribadi_stress"] = s.PribadiStress
	s.fieldMap["pribadi_emosi"] = s.PribadiEmosi
	s.fieldMap["pribadi_sosial"] = s.PribadiSosial
	s.fieldMap["pribadi_empati"] = s.PribadiEmpati
	s.fieldMap["klasifikasi_motivasi"] = s.KlasifikasiMotivasi
	s.fieldMap["klasifikasi_juang"] = s.KlasifikasiJuang
	s.fieldMap["klasifikasi_yakin"] = s.KlasifikasiYakin
	s.fieldMap["klasifikasi_percaya"] = s.KlasifikasiPercaya
	s.fieldMap["klasifikasi_konsep"] = s.KlasifikasiKonsep
	s.fieldMap["klasifikasi_kreativitas"] = s.KlasifikasiKreativitas
	s.fieldMap["klasifikasi_mimpin"] = s.KlasifikasiMimpin
	s.fieldMap["klasifikasi_entrepreneur"] = s.KlasifikasiEntrepreneur
	s.fieldMap["klasifikasi_stress"] = s.KlasifikasiStress
	s.fieldMap["klasifikasi_emosi"] = s.KlasifikasiEmosi
	s.fieldMap["klasifikasi_sosial"] = s.KlasifikasiSosial
	s.fieldMap["klasifikasi_empati"] = s.KlasifikasiEmpati
}

func (s skorKarakteristikPribadi) clone(db *gorm.DB) skorKarakteristikPribadi {
	s.skorKarakteristikPribadiDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorKarakteristikPribadi) replaceDB(db *gorm.DB) skorKarakteristikPribadi {
	s.skorKarakteristikPribadiDo.ReplaceDB(db)
	return s
}

type skorKarakteristikPribadiDo struct{ gen.DO }

func (s skorKarakteristikPribadiDo) Debug() *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Debug())
}

func (s skorKarakteristikPribadiDo) WithContext(ctx context.Context) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorKarakteristikPribadiDo) ReadDB() *skorKarakteristikPribadiDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorKarakteristikPribadiDo) WriteDB() *skorKarakteristikPribadiDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorKarakteristikPribadiDo) Session(config *gorm.Session) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorKarakteristikPribadiDo) Clauses(conds ...clause.Expression) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorKarakteristikPribadiDo) Returning(value interface{}, columns ...string) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorKarakteristikPribadiDo) Not(conds ...gen.Condition) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorKarakteristikPribadiDo) Or(conds ...gen.Condition) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorKarakteristikPribadiDo) Select(conds ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorKarakteristikPribadiDo) Where(conds ...gen.Condition) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorKarakteristikPribadiDo) Order(conds ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorKarakteristikPribadiDo) Distinct(cols ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorKarakteristikPribadiDo) Omit(cols ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorKarakteristikPribadiDo) Join(table schema.Tabler, on ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorKarakteristikPribadiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorKarakteristikPribadiDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorKarakteristikPribadiDo) Group(cols ...field.Expr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorKarakteristikPribadiDo) Having(conds ...gen.Condition) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorKarakteristikPribadiDo) Limit(limit int) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorKarakteristikPribadiDo) Offset(offset int) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorKarakteristikPribadiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorKarakteristikPribadiDo) Unscoped() *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorKarakteristikPribadiDo) Create(values ...*entity.SkorKarakteristikPribadi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorKarakteristikPribadiDo) CreateInBatches(values []*entity.SkorKarakteristikPribadi, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorKarakteristikPribadiDo) Save(values ...*entity.SkorKarakteristikPribadi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorKarakteristikPribadiDo) First() (*entity.SkorKarakteristikPribadi, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKarakteristikPribadi), nil
	}
}

func (s skorKarakteristikPribadiDo) Take() (*entity.SkorKarakteristikPribadi, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKarakteristikPribadi), nil
	}
}

func (s skorKarakteristikPribadiDo) Last() (*entity.SkorKarakteristikPribadi, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKarakteristikPribadi), nil
	}
}

func (s skorKarakteristikPribadiDo) Find() ([]*entity.SkorKarakteristikPribadi, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorKarakteristikPribadi), err
}

func (s skorKarakteristikPribadiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorKarakteristikPribadi, err error) {
	buf := make([]*entity.SkorKarakteristikPribadi, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorKarakteristikPribadiDo) FindInBatches(result *[]*entity.SkorKarakteristikPribadi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorKarakteristikPribadiDo) Attrs(attrs ...field.AssignExpr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorKarakteristikPribadiDo) Assign(attrs ...field.AssignExpr) *skorKarakteristikPribadiDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorKarakteristikPribadiDo) Joins(fields ...field.RelationField) *skorKarakteristikPribadiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorKarakteristikPribadiDo) Preload(fields ...field.RelationField) *skorKarakteristikPribadiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorKarakteristikPribadiDo) FirstOrInit() (*entity.SkorKarakteristikPribadi, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKarakteristikPribadi), nil
	}
}

func (s skorKarakteristikPribadiDo) FirstOrCreate() (*entity.SkorKarakteristikPribadi, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKarakteristikPribadi), nil
	}
}

func (s skorKarakteristikPribadiDo) FindByPage(offset int, limit int) (result []*entity.SkorKarakteristikPribadi, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorKarakteristikPribadiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorKarakteristikPribadiDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorKarakteristikPribadiDo) Delete(models ...*entity.SkorKarakteristikPribadi) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorKarakteristikPribadiDo) withDO(do gen.Dao) *skorKarakteristikPribadiDo {
	s.DO = *do.(*gen.DO)
	return s
}
