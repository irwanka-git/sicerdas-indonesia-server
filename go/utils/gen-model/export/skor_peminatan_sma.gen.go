// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorPeminatanSma(db *gorm.DB, opts ...gen.DOOption) skorPeminatanSma {
	_skorPeminatanSma := skorPeminatanSma{}

	_skorPeminatanSma.skorPeminatanSmaDo.UseDB(db, opts...)
	_skorPeminatanSma.skorPeminatanSmaDo.UseModel(&entity.SkorPeminatanSma{})

	tableName := _skorPeminatanSma.skorPeminatanSmaDo.TableName()
	_skorPeminatanSma.ALL = field.NewAsterisk(tableName)
	_skorPeminatanSma.IDUser = field.NewInt32(tableName, "id_user")
	_skorPeminatanSma.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorPeminatanSma.MinatSains = field.NewInt32(tableName, "minat_sains")
	_skorPeminatanSma.MinatHumaniora = field.NewInt32(tableName, "minat_humaniora")
	_skorPeminatanSma.MinatBahasa = field.NewInt32(tableName, "minat_bahasa")
	_skorPeminatanSma.MinatRentang = field.NewInt32(tableName, "minat_rentang")
	_skorPeminatanSma.RekomMinat = field.NewString(tableName, "rekom_minat")
	_skorPeminatanSma.KlasifikasiMinatSains = field.NewString(tableName, "klasifikasi_minat_sains")
	_skorPeminatanSma.KlasifikasiMinatHumaniora = field.NewString(tableName, "klasifikasi_minat_humaniora")
	_skorPeminatanSma.KlasifikasiMinatBahasa = field.NewString(tableName, "klasifikasi_minat_bahasa")

	_skorPeminatanSma.fillFieldMap()

	return _skorPeminatanSma
}

type skorPeminatanSma struct {
	skorPeminatanSmaDo skorPeminatanSmaDo

	ALL                       field.Asterisk
	IDUser                    field.Int32
	IDQuiz                    field.Int32
	MinatSains                field.Int32
	MinatHumaniora            field.Int32
	MinatBahasa               field.Int32
	MinatRentang              field.Int32
	RekomMinat                field.String
	KlasifikasiMinatSains     field.String
	KlasifikasiMinatHumaniora field.String
	KlasifikasiMinatBahasa    field.String

	fieldMap map[string]field.Expr
}

func (s skorPeminatanSma) Table(newTableName string) *skorPeminatanSma {
	s.skorPeminatanSmaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorPeminatanSma) As(alias string) *skorPeminatanSma {
	s.skorPeminatanSmaDo.DO = *(s.skorPeminatanSmaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorPeminatanSma) updateTableName(table string) *skorPeminatanSma {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.MinatSains = field.NewInt32(table, "minat_sains")
	s.MinatHumaniora = field.NewInt32(table, "minat_humaniora")
	s.MinatBahasa = field.NewInt32(table, "minat_bahasa")
	s.MinatRentang = field.NewInt32(table, "minat_rentang")
	s.RekomMinat = field.NewString(table, "rekom_minat")
	s.KlasifikasiMinatSains = field.NewString(table, "klasifikasi_minat_sains")
	s.KlasifikasiMinatHumaniora = field.NewString(table, "klasifikasi_minat_humaniora")
	s.KlasifikasiMinatBahasa = field.NewString(table, "klasifikasi_minat_bahasa")

	s.fillFieldMap()

	return s
}

func (s *skorPeminatanSma) WithContext(ctx context.Context) *skorPeminatanSmaDo {
	return s.skorPeminatanSmaDo.WithContext(ctx)
}

func (s skorPeminatanSma) TableName() string { return s.skorPeminatanSmaDo.TableName() }

func (s skorPeminatanSma) Alias() string { return s.skorPeminatanSmaDo.Alias() }

func (s skorPeminatanSma) Columns(cols ...field.Expr) gen.Columns {
	return s.skorPeminatanSmaDo.Columns(cols...)
}

func (s *skorPeminatanSma) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorPeminatanSma) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["minat_sains"] = s.MinatSains
	s.fieldMap["minat_humaniora"] = s.MinatHumaniora
	s.fieldMap["minat_bahasa"] = s.MinatBahasa
	s.fieldMap["minat_rentang"] = s.MinatRentang
	s.fieldMap["rekom_minat"] = s.RekomMinat
	s.fieldMap["klasifikasi_minat_sains"] = s.KlasifikasiMinatSains
	s.fieldMap["klasifikasi_minat_humaniora"] = s.KlasifikasiMinatHumaniora
	s.fieldMap["klasifikasi_minat_bahasa"] = s.KlasifikasiMinatBahasa
}

func (s skorPeminatanSma) clone(db *gorm.DB) skorPeminatanSma {
	s.skorPeminatanSmaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorPeminatanSma) replaceDB(db *gorm.DB) skorPeminatanSma {
	s.skorPeminatanSmaDo.ReplaceDB(db)
	return s
}

type skorPeminatanSmaDo struct{ gen.DO }

func (s skorPeminatanSmaDo) Debug() *skorPeminatanSmaDo {
	return s.withDO(s.DO.Debug())
}

func (s skorPeminatanSmaDo) WithContext(ctx context.Context) *skorPeminatanSmaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorPeminatanSmaDo) ReadDB() *skorPeminatanSmaDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorPeminatanSmaDo) WriteDB() *skorPeminatanSmaDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorPeminatanSmaDo) Session(config *gorm.Session) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorPeminatanSmaDo) Clauses(conds ...clause.Expression) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorPeminatanSmaDo) Returning(value interface{}, columns ...string) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorPeminatanSmaDo) Not(conds ...gen.Condition) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorPeminatanSmaDo) Or(conds ...gen.Condition) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorPeminatanSmaDo) Select(conds ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorPeminatanSmaDo) Where(conds ...gen.Condition) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorPeminatanSmaDo) Order(conds ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorPeminatanSmaDo) Distinct(cols ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorPeminatanSmaDo) Omit(cols ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorPeminatanSmaDo) Join(table schema.Tabler, on ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorPeminatanSmaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorPeminatanSmaDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorPeminatanSmaDo) Group(cols ...field.Expr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorPeminatanSmaDo) Having(conds ...gen.Condition) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorPeminatanSmaDo) Limit(limit int) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorPeminatanSmaDo) Offset(offset int) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorPeminatanSmaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorPeminatanSmaDo) Unscoped() *skorPeminatanSmaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorPeminatanSmaDo) Create(values ...*entity.SkorPeminatanSma) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorPeminatanSmaDo) CreateInBatches(values []*entity.SkorPeminatanSma, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorPeminatanSmaDo) Save(values ...*entity.SkorPeminatanSma) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorPeminatanSmaDo) First() (*entity.SkorPeminatanSma, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSma), nil
	}
}

func (s skorPeminatanSmaDo) Take() (*entity.SkorPeminatanSma, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSma), nil
	}
}

func (s skorPeminatanSmaDo) Last() (*entity.SkorPeminatanSma, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSma), nil
	}
}

func (s skorPeminatanSmaDo) Find() ([]*entity.SkorPeminatanSma, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorPeminatanSma), err
}

func (s skorPeminatanSmaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorPeminatanSma, err error) {
	buf := make([]*entity.SkorPeminatanSma, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorPeminatanSmaDo) FindInBatches(result *[]*entity.SkorPeminatanSma, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorPeminatanSmaDo) Attrs(attrs ...field.AssignExpr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorPeminatanSmaDo) Assign(attrs ...field.AssignExpr) *skorPeminatanSmaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorPeminatanSmaDo) Joins(fields ...field.RelationField) *skorPeminatanSmaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorPeminatanSmaDo) Preload(fields ...field.RelationField) *skorPeminatanSmaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorPeminatanSmaDo) FirstOrInit() (*entity.SkorPeminatanSma, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSma), nil
	}
}

func (s skorPeminatanSmaDo) FirstOrCreate() (*entity.SkorPeminatanSma, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorPeminatanSma), nil
	}
}

func (s skorPeminatanSmaDo) FindByPage(offset int, limit int) (result []*entity.SkorPeminatanSma, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorPeminatanSmaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorPeminatanSmaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorPeminatanSmaDo) Delete(models ...*entity.SkorPeminatanSma) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorPeminatanSmaDo) withDO(do gen.Dao) *skorPeminatanSmaDo {
	s.DO = *do.(*gen.DO)
	return s
}
