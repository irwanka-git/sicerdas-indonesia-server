// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newGambar(db *gorm.DB, opts ...gen.DOOption) gambar {
	_gambar := gambar{}

	_gambar.gambarDo.UseDB(db, opts...)
	_gambar.gambarDo.UseModel(&entity.Gambar{})

	tableName := _gambar.gambarDo.TableName()
	_gambar.ALL = field.NewAsterisk(tableName)
	_gambar.Filename = field.NewString(tableName, "filename")
	_gambar.ImageBase64 = field.NewString(tableName, "image_base64")
	_gambar.Type = field.NewString(tableName, "type")

	_gambar.fillFieldMap()

	return _gambar
}

type gambar struct {
	gambarDo gambarDo

	ALL         field.Asterisk
	Filename    field.String
	ImageBase64 field.String
	Type        field.String

	fieldMap map[string]field.Expr
}

func (g gambar) Table(newTableName string) *gambar {
	g.gambarDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gambar) As(alias string) *gambar {
	g.gambarDo.DO = *(g.gambarDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gambar) updateTableName(table string) *gambar {
	g.ALL = field.NewAsterisk(table)
	g.Filename = field.NewString(table, "filename")
	g.ImageBase64 = field.NewString(table, "image_base64")
	g.Type = field.NewString(table, "type")

	g.fillFieldMap()

	return g
}

func (g *gambar) WithContext(ctx context.Context) *gambarDo { return g.gambarDo.WithContext(ctx) }

func (g gambar) TableName() string { return g.gambarDo.TableName() }

func (g gambar) Alias() string { return g.gambarDo.Alias() }

func (g gambar) Columns(cols ...field.Expr) gen.Columns { return g.gambarDo.Columns(cols...) }

func (g *gambar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gambar) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 3)
	g.fieldMap["filename"] = g.Filename
	g.fieldMap["image_base64"] = g.ImageBase64
	g.fieldMap["type"] = g.Type
}

func (g gambar) clone(db *gorm.DB) gambar {
	g.gambarDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gambar) replaceDB(db *gorm.DB) gambar {
	g.gambarDo.ReplaceDB(db)
	return g
}

type gambarDo struct{ gen.DO }

func (g gambarDo) Debug() *gambarDo {
	return g.withDO(g.DO.Debug())
}

func (g gambarDo) WithContext(ctx context.Context) *gambarDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gambarDo) ReadDB() *gambarDo {
	return g.Clauses(dbresolver.Read)
}

func (g gambarDo) WriteDB() *gambarDo {
	return g.Clauses(dbresolver.Write)
}

func (g gambarDo) Session(config *gorm.Session) *gambarDo {
	return g.withDO(g.DO.Session(config))
}

func (g gambarDo) Clauses(conds ...clause.Expression) *gambarDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gambarDo) Returning(value interface{}, columns ...string) *gambarDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gambarDo) Not(conds ...gen.Condition) *gambarDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gambarDo) Or(conds ...gen.Condition) *gambarDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gambarDo) Select(conds ...field.Expr) *gambarDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gambarDo) Where(conds ...gen.Condition) *gambarDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gambarDo) Order(conds ...field.Expr) *gambarDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gambarDo) Distinct(cols ...field.Expr) *gambarDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gambarDo) Omit(cols ...field.Expr) *gambarDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gambarDo) Join(table schema.Tabler, on ...field.Expr) *gambarDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gambarDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gambarDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gambarDo) RightJoin(table schema.Tabler, on ...field.Expr) *gambarDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gambarDo) Group(cols ...field.Expr) *gambarDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gambarDo) Having(conds ...gen.Condition) *gambarDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gambarDo) Limit(limit int) *gambarDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gambarDo) Offset(offset int) *gambarDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gambarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gambarDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gambarDo) Unscoped() *gambarDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gambarDo) Create(values ...*entity.Gambar) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gambarDo) CreateInBatches(values []*entity.Gambar, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gambarDo) Save(values ...*entity.Gambar) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gambarDo) First() (*entity.Gambar, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Gambar), nil
	}
}

func (g gambarDo) Take() (*entity.Gambar, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Gambar), nil
	}
}

func (g gambarDo) Last() (*entity.Gambar, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Gambar), nil
	}
}

func (g gambarDo) Find() ([]*entity.Gambar, error) {
	result, err := g.DO.Find()
	return result.([]*entity.Gambar), err
}

func (g gambarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Gambar, err error) {
	buf := make([]*entity.Gambar, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gambarDo) FindInBatches(result *[]*entity.Gambar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gambarDo) Attrs(attrs ...field.AssignExpr) *gambarDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gambarDo) Assign(attrs ...field.AssignExpr) *gambarDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gambarDo) Joins(fields ...field.RelationField) *gambarDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gambarDo) Preload(fields ...field.RelationField) *gambarDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gambarDo) FirstOrInit() (*entity.Gambar, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Gambar), nil
	}
}

func (g gambarDo) FirstOrCreate() (*entity.Gambar, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Gambar), nil
	}
}

func (g gambarDo) FindByPage(offset int, limit int) (result []*entity.Gambar, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gambarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gambarDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gambarDo) Delete(models ...*entity.Gambar) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gambarDo) withDO(do gen.Dao) *gambarDo {
	g.DO = *do.(*gen.DO)
	return g
}
