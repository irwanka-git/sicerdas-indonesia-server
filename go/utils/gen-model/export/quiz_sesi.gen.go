// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newQuizSesi(db *gorm.DB, opts ...gen.DOOption) quizSesi {
	_quizSesi := quizSesi{}

	_quizSesi.quizSesiDo.UseDB(db, opts...)
	_quizSesi.quizSesiDo.UseModel(&entity.QuizSesi{})

	tableName := _quizSesi.quizSesiDo.TableName()
	_quizSesi.ALL = field.NewAsterisk(tableName)
	_quizSesi.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_quizSesi.Token = field.NewString(tableName, "token")
	_quizSesi.NamaSesi = field.NewString(tableName, "nama_sesi")
	_quizSesi.Lokasi = field.NewString(tableName, "lokasi")
	_quizSesi.Tanggal = field.NewTime(tableName, "tanggal")
	_quizSesi.Open = field.NewInt32(tableName, "open")
	_quizSesi.Gambar = field.NewString(tableName, "gambar")
	_quizSesi.SkoringTabel = field.NewString(tableName, "skoring_tabel")
	_quizSesi.IDQuizTemplate = field.NewInt32(tableName, "id_quiz_template")
	_quizSesi.IDUserBiro = field.NewInt32(tableName, "id_user_biro")
	_quizSesi.Kota = field.NewString(tableName, "kota")
	_quizSesi.NamaAsesor = field.NewString(tableName, "nama_asesor")
	_quizSesi.NomorSipp = field.NewString(tableName, "nomor_sipp")
	_quizSesi.UUID = field.NewString(tableName, "uuid")
	_quizSesi.TtdAsesor = field.NewString(tableName, "ttd_asesor")
	_quizSesi.IDLokasi = field.NewInt16(tableName, "id_lokasi")
	_quizSesi.Jenis = field.NewString(tableName, "jenis")
	_quizSesi.FilenameReportZip = field.NewString(tableName, "filename_report_zip")
	_quizSesi.JSONURL = field.NewString(tableName, "json_url")
	_quizSesi.JSONURLEncrypt = field.NewString(tableName, "json_url_encrypt")
	_quizSesi.CoverTemplate = field.NewString(tableName, "cover_template")
	_quizSesi.FilenameReportZipDoc = field.NewString(tableName, "filename_report_zip_doc")
	_quizSesi.ModelReport = field.NewString(tableName, "model_report")

	_quizSesi.fillFieldMap()

	return _quizSesi
}

type quizSesi struct {
	quizSesiDo quizSesiDo

	ALL                  field.Asterisk
	IDQuiz               field.Int32
	Token                field.String
	NamaSesi             field.String
	Lokasi               field.String
	Tanggal              field.Time
	Open                 field.Int32
	Gambar               field.String
	SkoringTabel         field.String
	IDQuizTemplate       field.Int32
	IDUserBiro           field.Int32 // Id User BIRO
	Kota                 field.String
	NamaAsesor           field.String
	NomorSipp            field.String
	UUID                 field.String
	TtdAsesor            field.String
	IDLokasi             field.Int16
	Jenis                field.String
	FilenameReportZip    field.String
	JSONURL              field.String
	JSONURLEncrypt       field.String
	CoverTemplate        field.String
	FilenameReportZipDoc field.String
	ModelReport          field.String

	fieldMap map[string]field.Expr
}

func (q quizSesi) Table(newTableName string) *quizSesi {
	q.quizSesiDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quizSesi) As(alias string) *quizSesi {
	q.quizSesiDo.DO = *(q.quizSesiDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quizSesi) updateTableName(table string) *quizSesi {
	q.ALL = field.NewAsterisk(table)
	q.IDQuiz = field.NewInt32(table, "id_quiz")
	q.Token = field.NewString(table, "token")
	q.NamaSesi = field.NewString(table, "nama_sesi")
	q.Lokasi = field.NewString(table, "lokasi")
	q.Tanggal = field.NewTime(table, "tanggal")
	q.Open = field.NewInt32(table, "open")
	q.Gambar = field.NewString(table, "gambar")
	q.SkoringTabel = field.NewString(table, "skoring_tabel")
	q.IDQuizTemplate = field.NewInt32(table, "id_quiz_template")
	q.IDUserBiro = field.NewInt32(table, "id_user_biro")
	q.Kota = field.NewString(table, "kota")
	q.NamaAsesor = field.NewString(table, "nama_asesor")
	q.NomorSipp = field.NewString(table, "nomor_sipp")
	q.UUID = field.NewString(table, "uuid")
	q.TtdAsesor = field.NewString(table, "ttd_asesor")
	q.IDLokasi = field.NewInt16(table, "id_lokasi")
	q.Jenis = field.NewString(table, "jenis")
	q.FilenameReportZip = field.NewString(table, "filename_report_zip")
	q.JSONURL = field.NewString(table, "json_url")
	q.JSONURLEncrypt = field.NewString(table, "json_url_encrypt")
	q.CoverTemplate = field.NewString(table, "cover_template")
	q.FilenameReportZipDoc = field.NewString(table, "filename_report_zip_doc")
	q.ModelReport = field.NewString(table, "model_report")

	q.fillFieldMap()

	return q
}

func (q *quizSesi) WithContext(ctx context.Context) *quizSesiDo { return q.quizSesiDo.WithContext(ctx) }

func (q quizSesi) TableName() string { return q.quizSesiDo.TableName() }

func (q quizSesi) Alias() string { return q.quizSesiDo.Alias() }

func (q quizSesi) Columns(cols ...field.Expr) gen.Columns { return q.quizSesiDo.Columns(cols...) }

func (q *quizSesi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quizSesi) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 23)
	q.fieldMap["id_quiz"] = q.IDQuiz
	q.fieldMap["token"] = q.Token
	q.fieldMap["nama_sesi"] = q.NamaSesi
	q.fieldMap["lokasi"] = q.Lokasi
	q.fieldMap["tanggal"] = q.Tanggal
	q.fieldMap["open"] = q.Open
	q.fieldMap["gambar"] = q.Gambar
	q.fieldMap["skoring_tabel"] = q.SkoringTabel
	q.fieldMap["id_quiz_template"] = q.IDQuizTemplate
	q.fieldMap["id_user_biro"] = q.IDUserBiro
	q.fieldMap["kota"] = q.Kota
	q.fieldMap["nama_asesor"] = q.NamaAsesor
	q.fieldMap["nomor_sipp"] = q.NomorSipp
	q.fieldMap["uuid"] = q.UUID
	q.fieldMap["ttd_asesor"] = q.TtdAsesor
	q.fieldMap["id_lokasi"] = q.IDLokasi
	q.fieldMap["jenis"] = q.Jenis
	q.fieldMap["filename_report_zip"] = q.FilenameReportZip
	q.fieldMap["json_url"] = q.JSONURL
	q.fieldMap["json_url_encrypt"] = q.JSONURLEncrypt
	q.fieldMap["cover_template"] = q.CoverTemplate
	q.fieldMap["filename_report_zip_doc"] = q.FilenameReportZipDoc
	q.fieldMap["model_report"] = q.ModelReport
}

func (q quizSesi) clone(db *gorm.DB) quizSesi {
	q.quizSesiDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quizSesi) replaceDB(db *gorm.DB) quizSesi {
	q.quizSesiDo.ReplaceDB(db)
	return q
}

type quizSesiDo struct{ gen.DO }

func (q quizSesiDo) Debug() *quizSesiDo {
	return q.withDO(q.DO.Debug())
}

func (q quizSesiDo) WithContext(ctx context.Context) *quizSesiDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quizSesiDo) ReadDB() *quizSesiDo {
	return q.Clauses(dbresolver.Read)
}

func (q quizSesiDo) WriteDB() *quizSesiDo {
	return q.Clauses(dbresolver.Write)
}

func (q quizSesiDo) Session(config *gorm.Session) *quizSesiDo {
	return q.withDO(q.DO.Session(config))
}

func (q quizSesiDo) Clauses(conds ...clause.Expression) *quizSesiDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quizSesiDo) Returning(value interface{}, columns ...string) *quizSesiDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quizSesiDo) Not(conds ...gen.Condition) *quizSesiDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quizSesiDo) Or(conds ...gen.Condition) *quizSesiDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quizSesiDo) Select(conds ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quizSesiDo) Where(conds ...gen.Condition) *quizSesiDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quizSesiDo) Order(conds ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quizSesiDo) Distinct(cols ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quizSesiDo) Omit(cols ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quizSesiDo) Join(table schema.Tabler, on ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quizSesiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quizSesiDo) RightJoin(table schema.Tabler, on ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quizSesiDo) Group(cols ...field.Expr) *quizSesiDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quizSesiDo) Having(conds ...gen.Condition) *quizSesiDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quizSesiDo) Limit(limit int) *quizSesiDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quizSesiDo) Offset(offset int) *quizSesiDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quizSesiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *quizSesiDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quizSesiDo) Unscoped() *quizSesiDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quizSesiDo) Create(values ...*entity.QuizSesi) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quizSesiDo) CreateInBatches(values []*entity.QuizSesi, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quizSesiDo) Save(values ...*entity.QuizSesi) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quizSesiDo) First() (*entity.QuizSesi, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesi), nil
	}
}

func (q quizSesiDo) Take() (*entity.QuizSesi, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesi), nil
	}
}

func (q quizSesiDo) Last() (*entity.QuizSesi, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesi), nil
	}
}

func (q quizSesiDo) Find() ([]*entity.QuizSesi, error) {
	result, err := q.DO.Find()
	return result.([]*entity.QuizSesi), err
}

func (q quizSesiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.QuizSesi, err error) {
	buf := make([]*entity.QuizSesi, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quizSesiDo) FindInBatches(result *[]*entity.QuizSesi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quizSesiDo) Attrs(attrs ...field.AssignExpr) *quizSesiDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quizSesiDo) Assign(attrs ...field.AssignExpr) *quizSesiDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quizSesiDo) Joins(fields ...field.RelationField) *quizSesiDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quizSesiDo) Preload(fields ...field.RelationField) *quizSesiDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quizSesiDo) FirstOrInit() (*entity.QuizSesi, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesi), nil
	}
}

func (q quizSesiDo) FirstOrCreate() (*entity.QuizSesi, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.QuizSesi), nil
	}
}

func (q quizSesiDo) FindByPage(offset int, limit int) (result []*entity.QuizSesi, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quizSesiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quizSesiDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quizSesiDo) Delete(models ...*entity.QuizSesi) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quizSesiDo) withDO(do gen.Dao) *quizSesiDo {
	q.DO = *do.(*gen.DO)
	return q
}
