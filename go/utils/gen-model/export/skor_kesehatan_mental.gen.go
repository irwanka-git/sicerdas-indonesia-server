// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newSkorKesehatanMental(db *gorm.DB, opts ...gen.DOOption) skorKesehatanMental {
	_skorKesehatanMental := skorKesehatanMental{}

	_skorKesehatanMental.skorKesehatanMentalDo.UseDB(db, opts...)
	_skorKesehatanMental.skorKesehatanMentalDo.UseModel(&entity.SkorKesehatanMental{})

	tableName := _skorKesehatanMental.skorKesehatanMentalDo.TableName()
	_skorKesehatanMental.ALL = field.NewAsterisk(tableName)
	_skorKesehatanMental.IDUser = field.NewInt32(tableName, "id_user")
	_skorKesehatanMental.IDQuiz = field.NewInt32(tableName, "id_quiz")
	_skorKesehatanMental.SkorStressKehidupan = field.NewInt32(tableName, "skor_stress_kehidupan")
	_skorKesehatanMental.SkorOverThinking = field.NewInt32(tableName, "skor_over_thinking")
	_skorKesehatanMental.SkorAdiksiMedsos = field.NewInt32(tableName, "skor_adiksi_medsos")
	_skorKesehatanMental.SkorImpulsiveBuying = field.NewInt32(tableName, "skor_impulsive_buying")
	_skorKesehatanMental.SkorGangguanMood = field.NewInt32(tableName, "skor_gangguan_mood")
	_skorKesehatanMental.SkorGangguanMakan = field.NewInt32(tableName, "skor_gangguan_makan")
	_skorKesehatanMental.SkorPenampilanTubuh = field.NewInt32(tableName, "skor_penampilan_tubuh")
	_skorKesehatanMental.SkorKecemasanBicara = field.NewInt32(tableName, "skor_kecemasan_bicara")
	_skorKesehatanMental.SkorPanicAttack = field.NewInt32(tableName, "skor_panic_attack")
	_skorKesehatanMental.SkorBipolarDisorder = field.NewInt32(tableName, "skor_bipolar_disorder")
	_skorKesehatanMental.SkorAdiksiZat = field.NewInt32(tableName, "skor_adiksi_zat")
	_skorKesehatanMental.NilaiStressKehidupan = field.NewInt32(tableName, "nilai_stress_kehidupan")
	_skorKesehatanMental.NilaiOverThinking = field.NewInt32(tableName, "nilai_over_thinking")
	_skorKesehatanMental.NilaiAdiksiMedsos = field.NewInt32(tableName, "nilai_adiksi_medsos")
	_skorKesehatanMental.NilaiImpulsiveBuying = field.NewInt32(tableName, "nilai_impulsive_buying")
	_skorKesehatanMental.NilaiGangguanMood = field.NewInt32(tableName, "nilai_gangguan_mood")
	_skorKesehatanMental.NilaiGangguanMakan = field.NewInt32(tableName, "nilai_gangguan_makan")
	_skorKesehatanMental.NilaiPenampilanTubuh = field.NewInt32(tableName, "nilai_penampilan_tubuh")
	_skorKesehatanMental.NilaiKecemasanBicara = field.NewInt32(tableName, "nilai_kecemasan_bicara")
	_skorKesehatanMental.NilaiPanicAttack = field.NewInt32(tableName, "nilai_panic_attack")
	_skorKesehatanMental.NilaiBipolarDisorder = field.NewInt32(tableName, "nilai_bipolar_disorder")
	_skorKesehatanMental.NilaiAdiksiZat = field.NewInt32(tableName, "nilai_adiksi_zat")

	_skorKesehatanMental.fillFieldMap()

	return _skorKesehatanMental
}

type skorKesehatanMental struct {
	skorKesehatanMentalDo skorKesehatanMentalDo

	ALL                  field.Asterisk
	IDUser               field.Int32
	IDQuiz               field.Int32
	SkorStressKehidupan  field.Int32
	SkorOverThinking     field.Int32
	SkorAdiksiMedsos     field.Int32
	SkorImpulsiveBuying  field.Int32
	SkorGangguanMood     field.Int32
	SkorGangguanMakan    field.Int32
	SkorPenampilanTubuh  field.Int32
	SkorKecemasanBicara  field.Int32
	SkorPanicAttack      field.Int32
	SkorBipolarDisorder  field.Int32
	SkorAdiksiZat        field.Int32
	NilaiStressKehidupan field.Int32
	NilaiOverThinking    field.Int32
	NilaiAdiksiMedsos    field.Int32
	NilaiImpulsiveBuying field.Int32
	NilaiGangguanMood    field.Int32
	NilaiGangguanMakan   field.Int32
	NilaiPenampilanTubuh field.Int32
	NilaiKecemasanBicara field.Int32
	NilaiPanicAttack     field.Int32
	NilaiBipolarDisorder field.Int32
	NilaiAdiksiZat       field.Int32

	fieldMap map[string]field.Expr
}

func (s skorKesehatanMental) Table(newTableName string) *skorKesehatanMental {
	s.skorKesehatanMentalDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skorKesehatanMental) As(alias string) *skorKesehatanMental {
	s.skorKesehatanMentalDo.DO = *(s.skorKesehatanMentalDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skorKesehatanMental) updateTableName(table string) *skorKesehatanMental {
	s.ALL = field.NewAsterisk(table)
	s.IDUser = field.NewInt32(table, "id_user")
	s.IDQuiz = field.NewInt32(table, "id_quiz")
	s.SkorStressKehidupan = field.NewInt32(table, "skor_stress_kehidupan")
	s.SkorOverThinking = field.NewInt32(table, "skor_over_thinking")
	s.SkorAdiksiMedsos = field.NewInt32(table, "skor_adiksi_medsos")
	s.SkorImpulsiveBuying = field.NewInt32(table, "skor_impulsive_buying")
	s.SkorGangguanMood = field.NewInt32(table, "skor_gangguan_mood")
	s.SkorGangguanMakan = field.NewInt32(table, "skor_gangguan_makan")
	s.SkorPenampilanTubuh = field.NewInt32(table, "skor_penampilan_tubuh")
	s.SkorKecemasanBicara = field.NewInt32(table, "skor_kecemasan_bicara")
	s.SkorPanicAttack = field.NewInt32(table, "skor_panic_attack")
	s.SkorBipolarDisorder = field.NewInt32(table, "skor_bipolar_disorder")
	s.SkorAdiksiZat = field.NewInt32(table, "skor_adiksi_zat")
	s.NilaiStressKehidupan = field.NewInt32(table, "nilai_stress_kehidupan")
	s.NilaiOverThinking = field.NewInt32(table, "nilai_over_thinking")
	s.NilaiAdiksiMedsos = field.NewInt32(table, "nilai_adiksi_medsos")
	s.NilaiImpulsiveBuying = field.NewInt32(table, "nilai_impulsive_buying")
	s.NilaiGangguanMood = field.NewInt32(table, "nilai_gangguan_mood")
	s.NilaiGangguanMakan = field.NewInt32(table, "nilai_gangguan_makan")
	s.NilaiPenampilanTubuh = field.NewInt32(table, "nilai_penampilan_tubuh")
	s.NilaiKecemasanBicara = field.NewInt32(table, "nilai_kecemasan_bicara")
	s.NilaiPanicAttack = field.NewInt32(table, "nilai_panic_attack")
	s.NilaiBipolarDisorder = field.NewInt32(table, "nilai_bipolar_disorder")
	s.NilaiAdiksiZat = field.NewInt32(table, "nilai_adiksi_zat")

	s.fillFieldMap()

	return s
}

func (s *skorKesehatanMental) WithContext(ctx context.Context) *skorKesehatanMentalDo {
	return s.skorKesehatanMentalDo.WithContext(ctx)
}

func (s skorKesehatanMental) TableName() string { return s.skorKesehatanMentalDo.TableName() }

func (s skorKesehatanMental) Alias() string { return s.skorKesehatanMentalDo.Alias() }

func (s skorKesehatanMental) Columns(cols ...field.Expr) gen.Columns {
	return s.skorKesehatanMentalDo.Columns(cols...)
}

func (s *skorKesehatanMental) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skorKesehatanMental) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 24)
	s.fieldMap["id_user"] = s.IDUser
	s.fieldMap["id_quiz"] = s.IDQuiz
	s.fieldMap["skor_stress_kehidupan"] = s.SkorStressKehidupan
	s.fieldMap["skor_over_thinking"] = s.SkorOverThinking
	s.fieldMap["skor_adiksi_medsos"] = s.SkorAdiksiMedsos
	s.fieldMap["skor_impulsive_buying"] = s.SkorImpulsiveBuying
	s.fieldMap["skor_gangguan_mood"] = s.SkorGangguanMood
	s.fieldMap["skor_gangguan_makan"] = s.SkorGangguanMakan
	s.fieldMap["skor_penampilan_tubuh"] = s.SkorPenampilanTubuh
	s.fieldMap["skor_kecemasan_bicara"] = s.SkorKecemasanBicara
	s.fieldMap["skor_panic_attack"] = s.SkorPanicAttack
	s.fieldMap["skor_bipolar_disorder"] = s.SkorBipolarDisorder
	s.fieldMap["skor_adiksi_zat"] = s.SkorAdiksiZat
	s.fieldMap["nilai_stress_kehidupan"] = s.NilaiStressKehidupan
	s.fieldMap["nilai_over_thinking"] = s.NilaiOverThinking
	s.fieldMap["nilai_adiksi_medsos"] = s.NilaiAdiksiMedsos
	s.fieldMap["nilai_impulsive_buying"] = s.NilaiImpulsiveBuying
	s.fieldMap["nilai_gangguan_mood"] = s.NilaiGangguanMood
	s.fieldMap["nilai_gangguan_makan"] = s.NilaiGangguanMakan
	s.fieldMap["nilai_penampilan_tubuh"] = s.NilaiPenampilanTubuh
	s.fieldMap["nilai_kecemasan_bicara"] = s.NilaiKecemasanBicara
	s.fieldMap["nilai_panic_attack"] = s.NilaiPanicAttack
	s.fieldMap["nilai_bipolar_disorder"] = s.NilaiBipolarDisorder
	s.fieldMap["nilai_adiksi_zat"] = s.NilaiAdiksiZat
}

func (s skorKesehatanMental) clone(db *gorm.DB) skorKesehatanMental {
	s.skorKesehatanMentalDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skorKesehatanMental) replaceDB(db *gorm.DB) skorKesehatanMental {
	s.skorKesehatanMentalDo.ReplaceDB(db)
	return s
}

type skorKesehatanMentalDo struct{ gen.DO }

func (s skorKesehatanMentalDo) Debug() *skorKesehatanMentalDo {
	return s.withDO(s.DO.Debug())
}

func (s skorKesehatanMentalDo) WithContext(ctx context.Context) *skorKesehatanMentalDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skorKesehatanMentalDo) ReadDB() *skorKesehatanMentalDo {
	return s.Clauses(dbresolver.Read)
}

func (s skorKesehatanMentalDo) WriteDB() *skorKesehatanMentalDo {
	return s.Clauses(dbresolver.Write)
}

func (s skorKesehatanMentalDo) Session(config *gorm.Session) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Session(config))
}

func (s skorKesehatanMentalDo) Clauses(conds ...clause.Expression) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skorKesehatanMentalDo) Returning(value interface{}, columns ...string) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skorKesehatanMentalDo) Not(conds ...gen.Condition) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skorKesehatanMentalDo) Or(conds ...gen.Condition) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skorKesehatanMentalDo) Select(conds ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skorKesehatanMentalDo) Where(conds ...gen.Condition) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skorKesehatanMentalDo) Order(conds ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skorKesehatanMentalDo) Distinct(cols ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skorKesehatanMentalDo) Omit(cols ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skorKesehatanMentalDo) Join(table schema.Tabler, on ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skorKesehatanMentalDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skorKesehatanMentalDo) RightJoin(table schema.Tabler, on ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skorKesehatanMentalDo) Group(cols ...field.Expr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skorKesehatanMentalDo) Having(conds ...gen.Condition) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skorKesehatanMentalDo) Limit(limit int) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skorKesehatanMentalDo) Offset(offset int) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skorKesehatanMentalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skorKesehatanMentalDo) Unscoped() *skorKesehatanMentalDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skorKesehatanMentalDo) Create(values ...*entity.SkorKesehatanMental) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skorKesehatanMentalDo) CreateInBatches(values []*entity.SkorKesehatanMental, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skorKesehatanMentalDo) Save(values ...*entity.SkorKesehatanMental) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skorKesehatanMentalDo) First() (*entity.SkorKesehatanMental, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKesehatanMental), nil
	}
}

func (s skorKesehatanMentalDo) Take() (*entity.SkorKesehatanMental, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKesehatanMental), nil
	}
}

func (s skorKesehatanMentalDo) Last() (*entity.SkorKesehatanMental, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKesehatanMental), nil
	}
}

func (s skorKesehatanMentalDo) Find() ([]*entity.SkorKesehatanMental, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SkorKesehatanMental), err
}

func (s skorKesehatanMentalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SkorKesehatanMental, err error) {
	buf := make([]*entity.SkorKesehatanMental, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skorKesehatanMentalDo) FindInBatches(result *[]*entity.SkorKesehatanMental, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skorKesehatanMentalDo) Attrs(attrs ...field.AssignExpr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skorKesehatanMentalDo) Assign(attrs ...field.AssignExpr) *skorKesehatanMentalDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skorKesehatanMentalDo) Joins(fields ...field.RelationField) *skorKesehatanMentalDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skorKesehatanMentalDo) Preload(fields ...field.RelationField) *skorKesehatanMentalDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skorKesehatanMentalDo) FirstOrInit() (*entity.SkorKesehatanMental, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKesehatanMental), nil
	}
}

func (s skorKesehatanMentalDo) FirstOrCreate() (*entity.SkorKesehatanMental, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SkorKesehatanMental), nil
	}
}

func (s skorKesehatanMentalDo) FindByPage(offset int, limit int) (result []*entity.SkorKesehatanMental, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skorKesehatanMentalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skorKesehatanMentalDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skorKesehatanMentalDo) Delete(models ...*entity.SkorKesehatanMental) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skorKesehatanMentalDo) withDO(do gen.Dao) *skorKesehatanMentalDo {
	s.DO = *do.(*gen.DO)
	return s
}
