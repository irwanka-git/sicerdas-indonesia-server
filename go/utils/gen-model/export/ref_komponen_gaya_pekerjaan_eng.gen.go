// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newRefKomponenGayaPekerjaanEng(db *gorm.DB, opts ...gen.DOOption) refKomponenGayaPekerjaanEng {
	_refKomponenGayaPekerjaanEng := refKomponenGayaPekerjaanEng{}

	_refKomponenGayaPekerjaanEng.refKomponenGayaPekerjaanEngDo.UseDB(db, opts...)
	_refKomponenGayaPekerjaanEng.refKomponenGayaPekerjaanEngDo.UseModel(&entity.RefKomponenGayaPekerjaanEng{})

	tableName := _refKomponenGayaPekerjaanEng.refKomponenGayaPekerjaanEngDo.TableName()
	_refKomponenGayaPekerjaanEng.ALL = field.NewAsterisk(tableName)
	_refKomponenGayaPekerjaanEng.NamaKomponen = field.NewString(tableName, "nama_komponen")
	_refKomponenGayaPekerjaanEng.Kode = field.NewString(tableName, "kode")
	_refKomponenGayaPekerjaanEng.No = field.NewString(tableName, "no")
	_refKomponenGayaPekerjaanEng.CetakKomponen = field.NewString(tableName, "cetak_komponen")
	_refKomponenGayaPekerjaanEng.Deskripsi = field.NewString(tableName, "deskripsi")
	_refKomponenGayaPekerjaanEng.Pekerjaan = field.NewString(tableName, "pekerjaan")
	_refKomponenGayaPekerjaanEng.Gambar = field.NewString(tableName, "gambar")

	_refKomponenGayaPekerjaanEng.fillFieldMap()

	return _refKomponenGayaPekerjaanEng
}

type refKomponenGayaPekerjaanEng struct {
	refKomponenGayaPekerjaanEngDo refKomponenGayaPekerjaanEngDo

	ALL           field.Asterisk
	NamaKomponen  field.String
	Kode          field.String
	No            field.String
	CetakKomponen field.String
	Deskripsi     field.String
	Pekerjaan     field.String
	Gambar        field.String

	fieldMap map[string]field.Expr
}

func (r refKomponenGayaPekerjaanEng) Table(newTableName string) *refKomponenGayaPekerjaanEng {
	r.refKomponenGayaPekerjaanEngDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refKomponenGayaPekerjaanEng) As(alias string) *refKomponenGayaPekerjaanEng {
	r.refKomponenGayaPekerjaanEngDo.DO = *(r.refKomponenGayaPekerjaanEngDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refKomponenGayaPekerjaanEng) updateTableName(table string) *refKomponenGayaPekerjaanEng {
	r.ALL = field.NewAsterisk(table)
	r.NamaKomponen = field.NewString(table, "nama_komponen")
	r.Kode = field.NewString(table, "kode")
	r.No = field.NewString(table, "no")
	r.CetakKomponen = field.NewString(table, "cetak_komponen")
	r.Deskripsi = field.NewString(table, "deskripsi")
	r.Pekerjaan = field.NewString(table, "pekerjaan")
	r.Gambar = field.NewString(table, "gambar")

	r.fillFieldMap()

	return r
}

func (r *refKomponenGayaPekerjaanEng) WithContext(ctx context.Context) *refKomponenGayaPekerjaanEngDo {
	return r.refKomponenGayaPekerjaanEngDo.WithContext(ctx)
}

func (r refKomponenGayaPekerjaanEng) TableName() string {
	return r.refKomponenGayaPekerjaanEngDo.TableName()
}

func (r refKomponenGayaPekerjaanEng) Alias() string { return r.refKomponenGayaPekerjaanEngDo.Alias() }

func (r refKomponenGayaPekerjaanEng) Columns(cols ...field.Expr) gen.Columns {
	return r.refKomponenGayaPekerjaanEngDo.Columns(cols...)
}

func (r *refKomponenGayaPekerjaanEng) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refKomponenGayaPekerjaanEng) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["nama_komponen"] = r.NamaKomponen
	r.fieldMap["kode"] = r.Kode
	r.fieldMap["no"] = r.No
	r.fieldMap["cetak_komponen"] = r.CetakKomponen
	r.fieldMap["deskripsi"] = r.Deskripsi
	r.fieldMap["pekerjaan"] = r.Pekerjaan
	r.fieldMap["gambar"] = r.Gambar
}

func (r refKomponenGayaPekerjaanEng) clone(db *gorm.DB) refKomponenGayaPekerjaanEng {
	r.refKomponenGayaPekerjaanEngDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refKomponenGayaPekerjaanEng) replaceDB(db *gorm.DB) refKomponenGayaPekerjaanEng {
	r.refKomponenGayaPekerjaanEngDo.ReplaceDB(db)
	return r
}

type refKomponenGayaPekerjaanEngDo struct{ gen.DO }

func (r refKomponenGayaPekerjaanEngDo) Debug() *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Debug())
}

func (r refKomponenGayaPekerjaanEngDo) WithContext(ctx context.Context) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refKomponenGayaPekerjaanEngDo) ReadDB() *refKomponenGayaPekerjaanEngDo {
	return r.Clauses(dbresolver.Read)
}

func (r refKomponenGayaPekerjaanEngDo) WriteDB() *refKomponenGayaPekerjaanEngDo {
	return r.Clauses(dbresolver.Write)
}

func (r refKomponenGayaPekerjaanEngDo) Session(config *gorm.Session) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Session(config))
}

func (r refKomponenGayaPekerjaanEngDo) Clauses(conds ...clause.Expression) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refKomponenGayaPekerjaanEngDo) Returning(value interface{}, columns ...string) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refKomponenGayaPekerjaanEngDo) Not(conds ...gen.Condition) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refKomponenGayaPekerjaanEngDo) Or(conds ...gen.Condition) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refKomponenGayaPekerjaanEngDo) Select(conds ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refKomponenGayaPekerjaanEngDo) Where(conds ...gen.Condition) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refKomponenGayaPekerjaanEngDo) Order(conds ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refKomponenGayaPekerjaanEngDo) Distinct(cols ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refKomponenGayaPekerjaanEngDo) Omit(cols ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refKomponenGayaPekerjaanEngDo) Join(table schema.Tabler, on ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refKomponenGayaPekerjaanEngDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refKomponenGayaPekerjaanEngDo) RightJoin(table schema.Tabler, on ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refKomponenGayaPekerjaanEngDo) Group(cols ...field.Expr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refKomponenGayaPekerjaanEngDo) Having(conds ...gen.Condition) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refKomponenGayaPekerjaanEngDo) Limit(limit int) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refKomponenGayaPekerjaanEngDo) Offset(offset int) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refKomponenGayaPekerjaanEngDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refKomponenGayaPekerjaanEngDo) Unscoped() *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refKomponenGayaPekerjaanEngDo) Create(values ...*entity.RefKomponenGayaPekerjaanEng) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refKomponenGayaPekerjaanEngDo) CreateInBatches(values []*entity.RefKomponenGayaPekerjaanEng, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refKomponenGayaPekerjaanEngDo) Save(values ...*entity.RefKomponenGayaPekerjaanEng) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refKomponenGayaPekerjaanEngDo) First() (*entity.RefKomponenGayaPekerjaanEng, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenGayaPekerjaanEng), nil
	}
}

func (r refKomponenGayaPekerjaanEngDo) Take() (*entity.RefKomponenGayaPekerjaanEng, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenGayaPekerjaanEng), nil
	}
}

func (r refKomponenGayaPekerjaanEngDo) Last() (*entity.RefKomponenGayaPekerjaanEng, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenGayaPekerjaanEng), nil
	}
}

func (r refKomponenGayaPekerjaanEngDo) Find() ([]*entity.RefKomponenGayaPekerjaanEng, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RefKomponenGayaPekerjaanEng), err
}

func (r refKomponenGayaPekerjaanEngDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RefKomponenGayaPekerjaanEng, err error) {
	buf := make([]*entity.RefKomponenGayaPekerjaanEng, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refKomponenGayaPekerjaanEngDo) FindInBatches(result *[]*entity.RefKomponenGayaPekerjaanEng, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refKomponenGayaPekerjaanEngDo) Attrs(attrs ...field.AssignExpr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refKomponenGayaPekerjaanEngDo) Assign(attrs ...field.AssignExpr) *refKomponenGayaPekerjaanEngDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refKomponenGayaPekerjaanEngDo) Joins(fields ...field.RelationField) *refKomponenGayaPekerjaanEngDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refKomponenGayaPekerjaanEngDo) Preload(fields ...field.RelationField) *refKomponenGayaPekerjaanEngDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refKomponenGayaPekerjaanEngDo) FirstOrInit() (*entity.RefKomponenGayaPekerjaanEng, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenGayaPekerjaanEng), nil
	}
}

func (r refKomponenGayaPekerjaanEngDo) FirstOrCreate() (*entity.RefKomponenGayaPekerjaanEng, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RefKomponenGayaPekerjaanEng), nil
	}
}

func (r refKomponenGayaPekerjaanEngDo) FindByPage(offset int, limit int) (result []*entity.RefKomponenGayaPekerjaanEng, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refKomponenGayaPekerjaanEngDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refKomponenGayaPekerjaanEngDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refKomponenGayaPekerjaanEngDo) Delete(models ...*entity.RefKomponenGayaPekerjaanEng) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refKomponenGayaPekerjaanEngDo) withDO(do gen.Dao) *refKomponenGayaPekerjaanEngDo {
	r.DO = *do.(*gen.DO)
	return r
}
