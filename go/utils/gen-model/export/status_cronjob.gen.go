// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package export

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"irwanka/sicerdas/utils/gen-model/entity"
)

func newStatusCronjob(db *gorm.DB, opts ...gen.DOOption) statusCronjob {
	_statusCronjob := statusCronjob{}

	_statusCronjob.statusCronjobDo.UseDB(db, opts...)
	_statusCronjob.statusCronjobDo.UseModel(&entity.StatusCronjob{})

	tableName := _statusCronjob.statusCronjobDo.TableName()
	_statusCronjob.ALL = field.NewAsterisk(tableName)
	_statusCronjob.ID = field.NewInt32(tableName, "id")
	_statusCronjob.Status = field.NewInt16(tableName, "status")

	_statusCronjob.fillFieldMap()

	return _statusCronjob
}

type statusCronjob struct {
	statusCronjobDo statusCronjobDo

	ALL    field.Asterisk
	ID     field.Int32
	Status field.Int16

	fieldMap map[string]field.Expr
}

func (s statusCronjob) Table(newTableName string) *statusCronjob {
	s.statusCronjobDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s statusCronjob) As(alias string) *statusCronjob {
	s.statusCronjobDo.DO = *(s.statusCronjobDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *statusCronjob) updateTableName(table string) *statusCronjob {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Status = field.NewInt16(table, "status")

	s.fillFieldMap()

	return s
}

func (s *statusCronjob) WithContext(ctx context.Context) *statusCronjobDo {
	return s.statusCronjobDo.WithContext(ctx)
}

func (s statusCronjob) TableName() string { return s.statusCronjobDo.TableName() }

func (s statusCronjob) Alias() string { return s.statusCronjobDo.Alias() }

func (s statusCronjob) Columns(cols ...field.Expr) gen.Columns {
	return s.statusCronjobDo.Columns(cols...)
}

func (s *statusCronjob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *statusCronjob) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["id"] = s.ID
	s.fieldMap["status"] = s.Status
}

func (s statusCronjob) clone(db *gorm.DB) statusCronjob {
	s.statusCronjobDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s statusCronjob) replaceDB(db *gorm.DB) statusCronjob {
	s.statusCronjobDo.ReplaceDB(db)
	return s
}

type statusCronjobDo struct{ gen.DO }

func (s statusCronjobDo) Debug() *statusCronjobDo {
	return s.withDO(s.DO.Debug())
}

func (s statusCronjobDo) WithContext(ctx context.Context) *statusCronjobDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s statusCronjobDo) ReadDB() *statusCronjobDo {
	return s.Clauses(dbresolver.Read)
}

func (s statusCronjobDo) WriteDB() *statusCronjobDo {
	return s.Clauses(dbresolver.Write)
}

func (s statusCronjobDo) Session(config *gorm.Session) *statusCronjobDo {
	return s.withDO(s.DO.Session(config))
}

func (s statusCronjobDo) Clauses(conds ...clause.Expression) *statusCronjobDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s statusCronjobDo) Returning(value interface{}, columns ...string) *statusCronjobDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s statusCronjobDo) Not(conds ...gen.Condition) *statusCronjobDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s statusCronjobDo) Or(conds ...gen.Condition) *statusCronjobDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s statusCronjobDo) Select(conds ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s statusCronjobDo) Where(conds ...gen.Condition) *statusCronjobDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s statusCronjobDo) Order(conds ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s statusCronjobDo) Distinct(cols ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s statusCronjobDo) Omit(cols ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s statusCronjobDo) Join(table schema.Tabler, on ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s statusCronjobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s statusCronjobDo) RightJoin(table schema.Tabler, on ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s statusCronjobDo) Group(cols ...field.Expr) *statusCronjobDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s statusCronjobDo) Having(conds ...gen.Condition) *statusCronjobDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s statusCronjobDo) Limit(limit int) *statusCronjobDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s statusCronjobDo) Offset(offset int) *statusCronjobDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s statusCronjobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *statusCronjobDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s statusCronjobDo) Unscoped() *statusCronjobDo {
	return s.withDO(s.DO.Unscoped())
}

func (s statusCronjobDo) Create(values ...*entity.StatusCronjob) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s statusCronjobDo) CreateInBatches(values []*entity.StatusCronjob, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s statusCronjobDo) Save(values ...*entity.StatusCronjob) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s statusCronjobDo) First() (*entity.StatusCronjob, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusCronjob), nil
	}
}

func (s statusCronjobDo) Take() (*entity.StatusCronjob, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusCronjob), nil
	}
}

func (s statusCronjobDo) Last() (*entity.StatusCronjob, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusCronjob), nil
	}
}

func (s statusCronjobDo) Find() ([]*entity.StatusCronjob, error) {
	result, err := s.DO.Find()
	return result.([]*entity.StatusCronjob), err
}

func (s statusCronjobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.StatusCronjob, err error) {
	buf := make([]*entity.StatusCronjob, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s statusCronjobDo) FindInBatches(result *[]*entity.StatusCronjob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s statusCronjobDo) Attrs(attrs ...field.AssignExpr) *statusCronjobDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s statusCronjobDo) Assign(attrs ...field.AssignExpr) *statusCronjobDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s statusCronjobDo) Joins(fields ...field.RelationField) *statusCronjobDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s statusCronjobDo) Preload(fields ...field.RelationField) *statusCronjobDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s statusCronjobDo) FirstOrInit() (*entity.StatusCronjob, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusCronjob), nil
	}
}

func (s statusCronjobDo) FirstOrCreate() (*entity.StatusCronjob, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.StatusCronjob), nil
	}
}

func (s statusCronjobDo) FindByPage(offset int, limit int) (result []*entity.StatusCronjob, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s statusCronjobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s statusCronjobDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s statusCronjobDo) Delete(models ...*entity.StatusCronjob) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *statusCronjobDo) withDO(do gen.Dao) *statusCronjobDo {
	s.DO = *do.(*gen.DO)
	return s
}
